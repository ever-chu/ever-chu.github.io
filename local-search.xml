<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2021/05/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/05/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一-七大原则"><a href="#一-七大原则" class="headerlink" title="一.七大原则"></a>一.七大原则</h2><p><strong>设计模式原则，其实就是程序员在编程时，应当遵守的原则，也是各种设计模式的基础。</strong></p><h3 id="1-0-单一职责原则"><a href="#1-0-单一职责原则" class="headerlink" title="1.0 单一职责原则"></a>1.0 单一职责原则</h3><ul><li><p><strong>定义：</strong>不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。</p></li><li><p><strong>单一职责原则的优点</strong></p><blockquote><p>1.可以降低类的复杂度，一个类只负责一项职责，其逻辑肯定要比负责多项职责简单的多；<br>2.提高类的可读性，提高系统的可维护性；<br>3.变更引起的风险降低，变更是必然的，如果单一职责原则遵守的好，当修改一个功能时，可以显著降低对其他功能的影响。</p></blockquote></li><li><p><strong>基本介绍</strong><br>&nbsp;&nbsp;&nbsp;对类来说的，即一个类应该只负责一项职责。如类A负责两个不同职责：职责1，职责2。当职责1需求变更而改变A时，可能造成职责2执行错误，所以需要将类A的粒度分解为A1、A2</p></li><li><p><strong>单一职责原则的实现方法</strong><br><img src="https://img.wenhairu.com/images/2021/05/15/aBsSU.png" alt="1.0"><br>在run方法中，违反了单一职责原则，解决的方案非常简单，根据交通工具运行方法的不同分解成不同类即可。下面看我第一次优化</p><blockquote><p><strong>第一次优化</strong><br><img src="https://img.wenhairu.com/images/2021/05/15/aB2sj.png" alt="1.0.0"><br>当前方案遵守单一职责原则，但是这样改动很大，解决方案直接修改Vehicle类，改动的代码会比较少，接下来看我们第二次优化<br><strong>第二次优化</strong><br><img src="https://img.wenhairu.com/images/2021/05/15/aBrYg.png" alt="1.0.1"><br>对当前优化分析：这种修改方法没有对原来的类做大的修改，只是增加方法，这里虽然没有在类级别上遵守单一职责原则，但是在方法上依然遵守单一职责原则。</p></blockquote></li></ul><h3 id="1-1-接口隔离原则"><a href="#1-1-接口隔离原则" class="headerlink" title="1.1 接口隔离原则"></a>1.1 接口隔离原则</h3><ul><li><strong>基本介绍：</strong><br>客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上。</li><li>下面让我们看个案例来了解它的基本使用<br>类 A 通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D，如果接口 Interface1 对于类 A 和类 C 来说不是最小接口，那么类 B 和类 D 必须去实现他们不需要的方法。<br><img src="https://img.wenhairu.com/images/2021/05/15/aBzX3.png" alt="1.1.0"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 接口隔离原则;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Interface1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation1</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation2</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation3</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation4</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation5</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interface1</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation1</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B 实现了 opertion1&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation2</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B 实现了 opertion1&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation3</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B 实现了 opertion1&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation4</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B 实现了 opertion1&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation5</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B 实现了 opertion1&quot;</span>);<br>&#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interface1</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation1</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;D 实现了 opertion1&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation2</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;D 实现了 opertion1&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation3</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;D 实现了 opertion1&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation4</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;D 实现了 opertion1&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation5</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;D 实现了 opertion1&quot;</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123; <span class="hljs-comment">//A类通过接口Interface1 依赖(使用) B类，但是只会用到1，2，3方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend1</span><span class="hljs-params">(Interface1 i)</span> </span>&#123;<br>i.operation1();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend2</span><span class="hljs-params">(Interface1 i)</span> </span>&#123;<br>i.operation2();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend3</span><span class="hljs-params">(Interface1 i)</span> </span>&#123;<br>i.operation3();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123; <span class="hljs-comment">//C类通过接口Interface1 依赖(使用) B类，但是只会用到1，4，5方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend1</span><span class="hljs-params">(Interface1 i)</span> </span>&#123;<br>i.operation1();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend4</span><span class="hljs-params">(Interface1 i)</span> </span>&#123;<br>i.operation4();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend5</span><span class="hljs-params">(Interface1 i)</span> </span>&#123;<br>i.operation5();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>按隔离原则应当这样处理：将接口 Interface1 拆分为独立的几个接口(这里我们拆分成 3 个接口)，类 A 和类 C 分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则</li><li>优化<br><img src="https://img.wenhairu.com/images/2021/05/15/aBL8o.png" alt="1.1.1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 接口隔离原则;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//接口1</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Interface11</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation1</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-comment">//接口2</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Interface22</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation2</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation3</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-comment">//接口3</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Interface33</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation4</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation5</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interface11</span>,<span class="hljs-title">Interface22</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation1</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B 实现了 opertion1&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation2</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B 实现了 opertion1&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation3</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B 实现了 opertion1&quot;</span>);<br>&#125;<br><br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DD</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interface11</span>,<span class="hljs-title">Interface33</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation1</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;D 实现了 opertion1&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation4</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;D 实现了 opertion1&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation5</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;D 实现了 opertion1&quot;</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AA</span> </span>&#123; <span class="hljs-comment">//A类通过接口Interface1 依赖(使用) B类，但是只会用到1，2，3方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend1</span><span class="hljs-params">(Interface11 i)</span> </span>&#123;<br>i.operation1();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend2</span><span class="hljs-params">(Interface22 i)</span> </span>&#123;<br>i.operation2();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend3</span><span class="hljs-params">(Interface22 i)</span> </span>&#123;<br>i.operation3();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC</span> </span>&#123; <span class="hljs-comment">//C类通过接口Interface1 依赖(使用) B类，但是只会用到1，4，5方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend1</span><span class="hljs-params">(Interface11 i)</span> </span>&#123;<br>i.operation1();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend4</span><span class="hljs-params">(Interface33 i)</span> </span>&#123;<br>i.operation4();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend5</span><span class="hljs-params">(Interface33 i)</span> </span>&#123;<br>i.operation5();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-2-依赖倒转原则"><a href="#1-2-依赖倒转原则" class="headerlink" title="1.2 依赖倒转原则"></a>1.2 依赖倒转原则</h3><ul><li><p>基本介绍</p><blockquote><p>1)高层模块不应该依赖低层模块，二者都应该依赖其抽象<br>2)抽象不应该依赖细节，细节应该依赖抽象<br>3)依赖倒转(倒置)的中心思想是面向接口编程<br>4)依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在 java 中，抽象指的是接口或抽象类，细节就是具体的实现类<br>5)使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成</p></blockquote></li><li><p>单一职责的实现方法<br>完成Person接受消息的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 依赖倒转原则;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    Person person = <span class="hljs-keyword">new</span> Person();<br>person.receive(<span class="hljs-keyword">new</span> Email());<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Email</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;电子邮件信息：hello,world&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">(Email email)</span> </span>&#123;<br>email.getInfo();<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><strong>分析：</strong> </p><blockquote><p>1.简单，比较容易想到<br>2.如果我们获取的对象是 微信，短信等等，则新增类，同时 Perons 也要增加相应的接收方法<br>3.解决思路：引入一个抽象的接口 IReceiver, 表示接收者, 这样 Person 类与接口 IReceiver 发生依赖，因为 Email, WeiXin 等等属于接收的范围，他们各自实现 IReceiver 接口就 ok,  这样我们就符号依赖倒转原则</p></blockquote></li><li><p><strong>优化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 依赖倒转原则.strong;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">//客户端无需改变</span><br>Person person = <span class="hljs-keyword">new</span> Person();<br>person.receive(<span class="hljs-keyword">new</span> Email());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//定义接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IReceiver</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInfo</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Email</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IReceiver</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;电子邮件信息：hello,world&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><span class="hljs-comment">//我们是对接口的依赖</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">(IReceiver iReceiver)</span> </span>&#123;<br>System.out.println(iReceiver.getInfo());<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//增加微信</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weixin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IReceiver</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;微信信息：hello,world&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意事项和细节</p><blockquote><p>1)低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好.<br>2)变量的声明类型尽量是抽象类或接口, 这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化<br>3)继承时遵循里氏替换原则</p></blockquote></li></ul><h3 id="1-3-里氏替换原则"><a href="#1-3-里氏替换原则" class="headerlink" title="1.3 里氏替换原则"></a>1.3 里氏替换原则</h3><ul><li>基本介绍<blockquote><p>1)在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法<br>2)子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说，子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写弗雷德方法。<br>3)里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖 来解决问题。</p></blockquote></li><li>里氏替换原则的实现方法<br>分析：定义鸟类，将燕子、几维鸟继承当前鸟类并拥有当前鸟类的速度属性和飞行时间的方法，并且让几维鸟实现方法的重写，让我们看两个继承鸟的实现<br><img src="https://img.wenhairu.com/images/2021/05/16/abuQN.png" alt="1.3.0"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 里氏替换原则;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Bird bird1 = <span class="hljs-keyword">new</span> Swallow();<br>Bird bird2 = <span class="hljs-keyword">new</span> BrownKiwi();<br>bird1.setSpeed(<span class="hljs-number">120</span>);<br>bird2.setSpeed(<span class="hljs-number">120</span>);<br>System.out.println(<span class="hljs-string">&quot;如果飞行300千米:&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;燕子将飞行&quot;</span>+bird1.getFlyTime(<span class="hljs-number">300</span>)+<span class="hljs-string">&quot;小时&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;几维鸟将飞行&quot;</span>+bird2.getFlyTime(<span class="hljs-number">300</span>)+<span class="hljs-string">&quot;小时&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>System.out.println(<span class="hljs-string">&quot;发生错误了&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//鸟类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bird</span> </span>&#123;<br><span class="hljs-keyword">double</span> flySpeed;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSpeed</span><span class="hljs-params">(<span class="hljs-keyword">double</span> speed)</span> </span>&#123;<br>flySpeed = speed;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getFlyTime</span><span class="hljs-params">(<span class="hljs-keyword">double</span> distance)</span> </span>&#123;<br><span class="hljs-keyword">return</span> (distance/flySpeed);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//燕子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Swallow</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Bird</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">//几维鸟类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BrownKiwi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Bird</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSpeed</span><span class="hljs-params">(<span class="hljs-keyword">double</span> speed)</span></span>&#123;<br>flySpeed = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>结果:<br><img src="https://img.wenhairu.com/images/2021/05/16/abafR.png" alt="1.3"></li><li><strong>程序运行错误的原因：</strong>几维鸟重写了鸟类的setSpeed(double speed)方法，这违背了里氏替换原则。<font color="orange">正确的做法是：</font>取消几维鸟原来的继承关系，定义鸟和几维鸟的更一般的父类，如动物类，他们都有奔跑的能力。几维鸟的速度虽然为0，但奔跑速度不为0，可以计算出奔跑300千米索要花费的时间。</li><li>优化<br><img src="https://img.wenhairu.com/images/2021/05/16/ab9eB.png" alt="1.3.1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 里氏替换原则.Strong;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Bird bird1 = <span class="hljs-keyword">new</span> Swallow();<br>Animal bird2 = <span class="hljs-keyword">new</span> BrownKiwi();<br>bird1.setSpeed(<span class="hljs-number">120</span>);<br>bird2.setRunSpeed(<span class="hljs-number">120</span>);<br>System.out.println(<span class="hljs-string">&quot;如果飞行300千米:&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;燕子将飞行&quot;</span>+bird1.getFlyTime(<span class="hljs-number">300</span>)+<span class="hljs-string">&quot;小时&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;几维鸟将飞行&quot;</span>+bird2.getRunTime(<span class="hljs-number">300</span>)+<span class="hljs-string">&quot;小时&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>System.out.println(<span class="hljs-string">&quot;发生错误了&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br><span class="hljs-keyword">double</span> runSpeed;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRunSpeed</span><span class="hljs-params">(<span class="hljs-keyword">double</span> speed)</span> </span>&#123;<br>runSpeed = speed;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getRunTime</span><span class="hljs-params">(<span class="hljs-keyword">double</span> distance)</span> </span>&#123;<br><span class="hljs-keyword">return</span> (distance/runSpeed);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//鸟类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bird</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br><span class="hljs-keyword">double</span> flySpeed;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSpeed</span><span class="hljs-params">(<span class="hljs-keyword">double</span> speed)</span> </span>&#123;<br>flySpeed = speed;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getFlyTime</span><span class="hljs-params">(<span class="hljs-keyword">double</span> distance)</span> </span>&#123;<br><span class="hljs-keyword">return</span> (distance/flySpeed);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//燕子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Swallow</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Bird</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">//几维鸟类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BrownKiwi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRunSpeed</span><span class="hljs-params">(<span class="hljs-keyword">double</span> speed)</span></span>&#123;<br>runSpeed = <span class="hljs-number">120</span>;<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-4-开闭原则"><a href="#1-4-开闭原则" class="headerlink" title="1.4 开闭原则"></a>1.4 开闭原则</h3><ul><li><strong>定义：</strong>一个软件实体如类，模块和函数应该对扩展开放(对提供方)，对修改关闭(对使用方)。3)当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</li><li>代码示例<br><img src="https://img.wenhairu.com/images/2021/05/17/abrgS.png" alt="1.4.0"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 开闭原则;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    GraphicEditor graphicEditor = <span class="hljs-keyword">new</span> GraphicEditor();<br>    graphicEditor.drawShape(<span class="hljs-keyword">new</span> Circle());<br>    graphicEditor.drawShape(<span class="hljs-keyword">new</span> Rectangle());<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//这是一个用于绘图的类 [使用方] </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GraphicEditor</span> </span>&#123;<br>    <span class="hljs-comment">//接收 Shape 对象，然后根据 type，来绘制不同的图形</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawShape</span><span class="hljs-params">(Shape s)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (s.m_type == <span class="hljs-number">1</span>) drawRectangle(s);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.m_type == <span class="hljs-number">2</span>) drawCircle(s);<br>&#125;<br><br><span class="hljs-comment">//绘制矩形</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawRectangle</span><span class="hljs-params">(Shape r)</span> </span>&#123; <br>System.out.println(<span class="hljs-string">&quot; 绘制矩形 &quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//绘制圆形</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawCircle</span><span class="hljs-params">(Shape r)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot; 绘制圆形 &quot;</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//Shape 类，基类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> </span>&#123;<br><span class="hljs-keyword">int</span> m_type;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123; <br>Rectangle() &#123;<br>    <span class="hljs-keyword">super</span>.m_type = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123; <br>Circle() &#123;<br>   <span class="hljs-keyword">super</span>.m_type = <span class="hljs-number">2</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>分析：<blockquote><p>1)优点是比较好理解，简单易操作。<br>2)缺点是违反了设计模式的 ocp 原则，即对扩展开放(提供方)，对修改关闭(使用方)。即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码.<br>3)比如我们这时要新增加一个图形种类 三角形，我们需要做如下修改，修改的地方较多</p></blockquote></li><li>代码演示<br><img src="https://img.wenhairu.com/images/2021/05/17/abtrC.png" alt="1.4.1"></li><li>优化：把创建 Shape 类做成抽象类，并提供一个抽象的 draw 方法，让子类去实现即可，这样我们有新的图形种类时，只需要让新的图形类继承 Shape，并实现 draw 方法即可，使用方的代码就不需要修-&gt;满足了开闭原则<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 开闭原则.improve;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>GraphicEditor graphicEditor = <span class="hljs-keyword">new</span> GraphicEditor();<br>    graphicEditor.drawShape(<span class="hljs-keyword">new</span> Circle());<br>    graphicEditor.drawShape(<span class="hljs-keyword">new</span> Rectangle());<br>&#125;<br>&#125;<br><span class="hljs-comment">//这是一个用于绘图的类 [使用方] </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GraphicEditor</span> </span>&#123;<br>  <span class="hljs-comment">//接收 Shape 对象，然后根据 type，来绘制不同的图形</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawShape</span><span class="hljs-params">(Shape s)</span> </span>&#123;<br>s.draw();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Shape 类，基类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> </span>&#123;<br><span class="hljs-keyword">int</span> m_type;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123; <br>Rectangle() &#123;<br>    <span class="hljs-keyword">super</span>.m_type = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;绘制矩形&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123; <br>Circle() &#123;<br>   <span class="hljs-keyword">super</span>.m_type = <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;绘制圆形&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//新增画三角形</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123; <br>Triangle() &#123;<br>    <span class="hljs-keyword">super</span>.m_type = <span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;绘制三角形&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-5-迪米特法则"><a href="#1-5-迪米特法则" class="headerlink" title="1.5 迪米特法则"></a>1.5 迪米特法则</h3><ul><li>基本介绍<blockquote><p>1)一个对象应该对其他对象保持最少的了解<br>2)类与类关系越密切，耦合度越大<br>3)迪米特法则(Demeter Principle)又叫最少知道原则，即一个类对自己依赖的类知道的越少越好</p></blockquote></li><li>应用实例：有一个学校，下属有各个学院和总部，现要求打印出学校总部员工ID和学院员工的id<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 迪米特法则;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList; <br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">//创建了一个 SchoolManager 对象</span><br>SchoolManager schoolManager = <span class="hljs-keyword">new</span> SchoolManager();<br><span class="hljs-comment">//输出学院的员工 id  和学校总部的员工信息</span><br>schoolManager.printAllEmployee(<span class="hljs-keyword">new</span> CollegeManager());<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//学校总部员工类 </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;<br><span class="hljs-keyword">private</span> String id;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(String id)</span> </span>&#123; <br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123; <br><span class="hljs-keyword">return</span> id;<br>&#125;<br>&#125;<br><br><br><br><span class="hljs-comment">//学院的员工类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollegeEmployee</span> </span>&#123; <br><span class="hljs-keyword">private</span> String id;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(String id)</span> </span>&#123; <br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123; <br><span class="hljs-keyword">return</span> id;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//管理学院员工的管理类 </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollegeManager</span> </span>&#123;<br><span class="hljs-comment">//返回学院的所有员工</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;CollegeEmployee&gt; <span class="hljs-title">getAllEmployee</span><span class="hljs-params">()</span> </span>&#123; <br>List&lt;CollegeEmployee&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;CollegeEmployee&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123; <span class="hljs-comment">//这里我们增加了 10 个员工到 list</span><br>        CollegeEmployee emp = <span class="hljs-keyword">new</span> CollegeEmployee(); <br>        emp.setId(<span class="hljs-string">&quot;学院员工 id= &quot;</span> + i);<br>        list.add(emp);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//学校管理类</span><br><br><span class="hljs-comment">//分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager</span><br><span class="hljs-comment">//CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SchoolManager</span> </span>&#123;<br><span class="hljs-comment">//返回学校总部的员工</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getAllEmployee</span><span class="hljs-params">()</span> </span>&#123; <br>List&lt;Employee&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Employee&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123; <span class="hljs-comment">//这里我们增加了 5 个员工到 list </span><br>Employee emp = <span class="hljs-keyword">new</span> Employee(); <br>emp.setId(<span class="hljs-string">&quot;学校总部员工 id= &quot;</span> + i);<br>    list.add(emp);<br>&#125;<br><span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">//该方法完成输出学校总部和学院员工信息(id) </span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printAllEmployee</span><span class="hljs-params">(CollegeManager sub)</span> </span>&#123;<br><span class="hljs-comment">//分析问题</span><br><span class="hljs-comment">//1. 这 里 的  CollegeEmployee 不是SchoolManager 的直接朋友</span><br><span class="hljs-comment">//2. CollegeEmployee 是以局部变量方式出现在 SchoolManager</span><br>    <span class="hljs-comment">//3. 违反了 迪米特法则</span><br><br>        <span class="hljs-comment">//获取到学院员工</span><br>List&lt;CollegeEmployee&gt; list1 = sub.getAllEmployee(); <br>System.out.println(<span class="hljs-string">&quot;------------学院员工------------&quot;</span>); <br><span class="hljs-keyword">for</span> (CollegeEmployee e : list1) &#123;<br>    System.out.println(e.getId());<br>&#125;<br><span class="hljs-comment">//获取到学校总部员工</span><br>List&lt;Employee&gt; list2 = <span class="hljs-keyword">this</span>.getAllEmployee(); <br>System.out.println(<span class="hljs-string">&quot;------------学校总部员工------------&quot;</span>); <br><span class="hljs-keyword">for</span> (Employee e : list2) &#123;<br>   System.out.println(e.getId());<br>    &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>优化<blockquote><p>1)前面设计的问题在于 SchoolManager 中，CollegeEmployee 类并不是 SchoolManager 类的直接朋友 (分析)<br>2)按照迪米特法则，应该避免类中出现这样非直接朋友关系的耦合，<strong>我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 迪米特法则.improve;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList; <br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">//创建了一个 SchoolManager 对象</span><br>SchoolManager schoolManager = <span class="hljs-keyword">new</span> SchoolManager();<br><span class="hljs-comment">//输出学院的员工 id  和学校总部的员工信息</span><br>schoolManager.printAllEmployee(<span class="hljs-keyword">new</span> CollegeManager());<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//学校总部员工类 </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;<br><span class="hljs-keyword">private</span> String id;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(String id)</span> </span>&#123; <br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123; <br><span class="hljs-keyword">return</span> id;<br>&#125;<br>&#125;<br><br><br><br><span class="hljs-comment">//学院的员工类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollegeEmployee</span> </span>&#123; <br><span class="hljs-keyword">private</span> String id;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(String id)</span> </span>&#123; <br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123; <br><span class="hljs-keyword">return</span> id;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//管理学院员工的管理类 </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollegeManager</span> </span>&#123;<br><span class="hljs-comment">//返回学院的所有员工</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;CollegeEmployee&gt; <span class="hljs-title">getAllEmployee</span><span class="hljs-params">()</span> </span>&#123; <br>List&lt;CollegeEmployee&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;CollegeEmployee&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123; <span class="hljs-comment">//这里我们增加了 10 个员工到 list</span><br>        CollegeEmployee emp = <span class="hljs-keyword">new</span> CollegeEmployee(); <br>        emp.setId(<span class="hljs-string">&quot;学院员工 id= &quot;</span> + i);<br>        list.add(emp);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printEmployee</span><span class="hljs-params">()</span> </span>&#123;<br> <span class="hljs-comment">//获取到学院员工</span><br>List&lt;CollegeEmployee&gt; list1 = getAllEmployee(); <br>System.out.println(<span class="hljs-string">&quot;------------学院员工------------&quot;</span>); <br><span class="hljs-keyword">for</span> (CollegeEmployee e : list1) &#123;<br>    System.out.println(e.getId());<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//学校管理类</span><br><span class="hljs-comment">//分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager</span><br><span class="hljs-comment">//CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SchoolManager</span> </span>&#123;<br><span class="hljs-comment">//返回学校总部的员工</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getAllEmployee</span><span class="hljs-params">()</span> </span>&#123; <br>List&lt;Employee&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Employee&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123; <span class="hljs-comment">//这里我们增加了 5 个员工到 list </span><br>Employee emp = <span class="hljs-keyword">new</span> Employee(); <br>emp.setId(<span class="hljs-string">&quot;学校总部员工 id= &quot;</span> + i);<br>    list.add(emp);<br>&#125;<br><span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">//该方法完成输出学校总部和学院员工信息(id) </span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printAllEmployee</span><span class="hljs-params">(CollegeManager sub)</span> </span>&#123;<br>    <br>    sub.printEmployee();<br><span class="hljs-comment">//获取到学校总部员工</span><br>List&lt;Employee&gt; list2 = <span class="hljs-keyword">this</span>.getAllEmployee(); <br>System.out.println(<span class="hljs-string">&quot;------------学校总部员工------------&quot;</span>); <br><span class="hljs-keyword">for</span> (Employee e : list2) &#123;<br>   System.out.println(e.getId());<br>    &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-6-合成复用原则"><a href="#1-6-合成复用原则" class="headerlink" title="1.6 合成复用原则"></a>1.6 合成复用原则</h3><ul><li>基本介绍：原则是尽量使用合成/聚合的方式，而不是使用继承<br><img src="https://img.wenhairu.com/images/2021/05/17/as1AI.png" alt="1.6.0"></li></ul><h3 id="1-7-设计原则核心思想"><a href="#1-7-设计原则核心思想" class="headerlink" title="1.7 设计原则核心思想"></a>1.7 设计原则核心思想</h3><ul><li>1)找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</li><li>2)针对接口编程，而不是针对实现编程。</li><li>3)为了交互对象之间的松耦合设计而努力</li></ul><h2 id="二-创建型模式"><a href="#二-创建型模式" class="headerlink" title="二.创建型模式"></a>二.创建型模式</h2><h3 id="2-0-单例模式"><a href="#2-0-单例模式" class="headerlink" title="2.0 单例模式"></a>2.0 单例模式</h3><ul><li>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例， 并且该类只提供一个取得其对象实例的方法(静态方法)。<h4 id="2-0-1-饿汉式-静态常量"><a href="#2-0-1-饿汉式-静态常量" class="headerlink" title="2.0.1 饿汉式(静态常量)"></a>2.0.1 饿汉式(静态常量)</h4></li><li>饿汉式（静态常量）应用实例步骤如下：<blockquote><p>1)构造器私有化 (防止 new )<br>2)类的内部创建对象<br>3)向外暴露一个静态的公共方法。getInstance<br>4)代码实现</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 单例模式.type1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 饿汉式 </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>   Singleton instance = Singleton.getInstance();<br>   Singleton instance1 = Singleton.getInstance();<br>   System.out.println(instance == instance1);<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//饿汉式(静态变量)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br><span class="hljs-comment">//1.构造器私有化</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">//2.本类内部创建对象实例</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();<br><br><span class="hljs-comment">//3.提供一个共有的静态方法，返回实例对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> instance;<br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>优缺点说明：</p><blockquote><p>1)优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。<br>2)缺点：在类装载的时候就完成实例化，没有达到 Lazy Loading 的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费</p></blockquote></li><li><p><strong>结论</strong>：这种单例模式可用，可能造成内存浪费</p></li></ul><h4 id="2-0-2饿汉式（静态代码块）"><a href="#2-0-2饿汉式（静态代码块）" class="headerlink" title="2.0.2饿汉式（静态代码块）"></a>2.0.2饿汉式（静态代码块）</h4><ul><li>代码演示<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 单例模式.type2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 饿汉式2 </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>   Singleton instance = Singleton.getInstance();<br>   Singleton instance1 = Singleton.getInstance();<br>   System.out.println(instance == instance1);<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//饿汉式(静态变量)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br><span class="hljs-comment">//1.构造器私有化</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">//2.本类内部创建对象实例</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Singleton instance;<br><br><span class="hljs-keyword">static</span> &#123; <span class="hljs-comment">//静态代码块中创建单例对象</span><br>instance = <span class="hljs-keyword">new</span> Singleton();<br>&#125;<br><br><span class="hljs-comment">//3.提供一个共有的静态方法，返回实例对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> instance;<br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure></li><li>优缺点说明：<blockquote><p>1).这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。<br>2).结论：这种单例模式可用，但是可能造成内存浪费</p></blockquote></li></ul><h4 id="2-0-3-懒汉式-线程不安全"><a href="#2-0-3-懒汉式-线程不安全" class="headerlink" title="2.0.3 懒汉式(线程不安全)"></a>2.0.3 懒汉式(线程不安全)</h4><ul><li>代码演示<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 单例模式.type3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 懒汉式线程不安全 </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>   Singleton instance = Singleton.getInstance();<br>   Singleton instance1 = Singleton.getInstance();<br>   System.out.println(instance == instance1);<br>&#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">//提供一个静态的公有方法，当时使用到该方法时，才会创建instance</span><br>    <span class="hljs-comment">//即懒汉式</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>) &#123;<br>    instance = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br>    <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>优缺点说明：<blockquote><p>1)起到了 Lazy Loading 的效果，但是只能在单线程下使用。<br>2)如果在多线程下，一个线程进入了 if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式</p></blockquote></li><li><strong>结论</strong>：在实际开发中，不要使用这种方式.</li></ul><h4 id="2-0-3-懒汉式-线程安全"><a href="#2-0-3-懒汉式-线程安全" class="headerlink" title="2.0.3 懒汉式(线程安全)"></a>2.0.3 懒汉式(线程安全)</h4><ul><li>代码演示<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 单例模式.type4;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 懒汉式线程安全 </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>   Singleton instance = Singleton.getInstance();<br>   Singleton instance1 = Singleton.getInstance();<br>   System.out.println(instance == instance1);<br>&#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">//提供一个静态的公有方法，加入同步处理代码，解决线程安全问题</span><br>    <span class="hljs-comment">//即懒汉式</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>) &#123;<br>    instance = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br>    <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>优缺点说明：<blockquote><p>1).解决了线程安全问题<br>2).效率太低了，每个线程在想获得类的实例时候，执行 getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接 return 就行了。方法进行同步效率太低</p></blockquote></li><li><strong>结论</strong>：在实际开发中，不推荐使用这种方式</li></ul><h3 id="2-1-工厂模式"><a href="#2-1-工厂模式" class="headerlink" title="2.1 工厂模式"></a>2.1 工厂模式</h3><ul><li>看一个具体的需求，一个披萨的项目：要便于披萨种类的扩展，要便于维护<blockquote><p>1).披萨的种类很多(比如 GreekPizz、CheesePizz 等)<br>2).披萨的制作有 prepare(原材料)，bake(制作), cut(切割), box(打包)<br>3).完成披萨店订购功能。<br><img src="https://img.wenhairu.com/images/2021/05/20/uw3ah.png" alt="2.1.0"></p></blockquote></li></ul><p>1.将Pizza类做成抽象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 工厂模式.type1;<br><br><span class="hljs-comment">//将Pizza类做成抽象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pizza</span> </span>&#123;<br><br><span class="hljs-keyword">protected</span> String name;<span class="hljs-comment">//名字</span><br><br><span class="hljs-comment">//准备原材料,不同的Pizza不一样，因此我们做成抽象方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prepare</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bake</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(name + <span class="hljs-string">&quot;baking;&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cut</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(name + <span class="hljs-string">&quot;cutting;&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">box</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(name + <span class="hljs-string">&quot;boxing;&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.制作奶酪披萨</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 工厂模式.type1;<br><br><span class="hljs-comment">//制作奶酪披萨</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheesePizza</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pizza</span></span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prepare</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;给制作奶酪披萨 准备原材料&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.制作希腊披萨</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 工厂模式.type1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GreekPizza</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pizza</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prepare</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;给制作希腊披萨 准备原材料&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.订购披萨</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 工厂模式.order;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">import</span> 工厂模式.type1.CheesePizza;<br><span class="hljs-keyword">import</span> 工厂模式.type1.GreekPizza;<br><span class="hljs-keyword">import</span> 工厂模式.type1.Pizza;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderPizza</span> </span>&#123;<br>    <span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OrderPizza</span><span class="hljs-params">()</span> </span>&#123;<br>Pizza pizza = <span class="hljs-keyword">null</span>;<br>String orderType; <span class="hljs-comment">//  订购披萨的类型</span><br><span class="hljs-keyword">do</span> &#123;<br>    orderType = getType();<br><span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;greek&quot;</span>)) &#123;<br>    pizza = <span class="hljs-keyword">new</span> GreekPizza();<br>    pizza.setName(<span class="hljs-string">&quot; 希腊披萨 &quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;cheese&quot;</span>)) &#123;<br>pizza = <span class="hljs-keyword">new</span> CheesePizza();<br>pizza.setName(<span class="hljs-string">&quot; 奶酪披萨 &quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">break</span>;<br>    &#125;<br><span class="hljs-comment">//输出 pizza 制作过程</span><br>pizza.prepare();<br>pizza.bake();<br>pizza.cut();<br>pizza.box();<br><br>   &#125; <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>);<br>    &#125;<br><br><span class="hljs-comment">// 写一个方法，可以获取客户希望订购的披萨种类</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123; <br><span class="hljs-keyword">try</span> &#123;<br>        BufferedReader strin = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in)); <br>        System.out.println(<span class="hljs-string">&quot;input pizza 种类:&quot;</span>);<br>String str = strin.readLine();<br><span class="hljs-keyword">return</span> str;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123; <br>    e.printStackTrace(); <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.相当于一个客户端，发出订购</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 工厂模式.order;<br><br><span class="hljs-keyword">import</span> 工厂模式.type1.GreekPizza;<br><br><span class="hljs-comment">//相当于一个客户端，发出订购</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PizzaStore</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">new</span> OrderPizza();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>传统的方式违反了设计模式的 ocp 原则，即对扩展开放，对修改关闭。即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码.<blockquote><p><font color="orange">分析</font>：修改代码可以接受，但是如果我们在其它的地方也有创建 Pizza 的代码，就意味着，也需要修改，而创建 Pizza的代码，往往有多处。<br><font color="orange">思路</font>：把创建 Pizza 对象封装到一个类中，这样我们有新的 Pizza 种类时，只需要修改该类就可，其它有创建到 Pizza对象的代码就不需要修改了 -&gt; 简单工厂模式 </p></blockquote></li></ul><h4 id="2-1-0-简单工厂模式"><a href="#2-1-0-简单工厂模式" class="headerlink" title="2.1.0 简单工厂模式"></a>2.1.0 简单工厂模式</h4><ul><li>基本介绍<blockquote><p>1).简单工厂模式是属于创建型模式，是工厂模式的一种。<br>2).简单工厂模式：定义了一个创建对象的类，由这个类来封装实例化对象的行为(代码)<br>3).在软件开发中，当我们会用到大量的创建某种、某类或者某批对象时，就会使用到工厂模式.<br><img src="https://img.wenhairu.com/images/2021/05/20/uwjJt.png" alt="2.1.1"></p></blockquote></li></ul><p>1.创建工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 工厂模式.order;<br><br><span class="hljs-keyword">import</span> 工厂模式.type1.CheesePizza;<br><span class="hljs-keyword">import</span> 工厂模式.type1.GreekPizza;<br><span class="hljs-keyword">import</span> 工厂模式.type1.PepperPizza;<br><span class="hljs-keyword">import</span> 工厂模式.type1.Pizza;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleFactory</span> </span>&#123;<br><br><span class="hljs-comment">//更加 orderType 返回对应的 Pizza 对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Pizza <span class="hljs-title">createPizza</span><span class="hljs-params">(String orderType)</span> </span>&#123;<br>    Pizza pizza = <span class="hljs-keyword">null</span>;<br>    System.out.println(<span class="hljs-string">&quot;使用简单工厂模式&quot;</span>); <br><span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;greek&quot;</span>)) &#123;<br>   pizza = <span class="hljs-keyword">new</span> GreekPizza();<br>   pizza.setName(<span class="hljs-string">&quot; 希腊披萨 &quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;cheese&quot;</span>)) &#123; <br>pizza = <span class="hljs-keyword">new</span> CheesePizza();<br>    pizza.setName(<span class="hljs-string">&quot; 奶酪披萨 &quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (orderType.equals(<span class="hljs-string">&quot;pepper&quot;</span>)) &#123; <br>pizza = <span class="hljs-keyword">new</span> PepperPizza();<br>    pizza.setName(<span class="hljs-string">&quot;胡椒披萨&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> pizza;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.订单类拿到工厂披萨</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 工厂模式.order;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">import</span> 工厂模式.type1.CheesePizza;<br><span class="hljs-keyword">import</span> 工厂模式.type1.GreekPizza;<br><span class="hljs-keyword">import</span> 工厂模式.type1.Pizza;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderPizza</span> </span>&#123;<br><br>    <span class="hljs-comment">//定义一个简单工厂对象</span><br>    SimpleFactory simpleFactory; <br>    Pizza pizza = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OrderPizza</span><span class="hljs-params">(SimpleFactory simpleFactory)</span> </span>&#123; <br>    setFactory(simpleFactory);<br>    &#125;<br>    <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFactory</span><span class="hljs-params">(SimpleFactory simpleFactory)</span> </span>&#123;<br>String orderType = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//用户输入的</span><br><span class="hljs-keyword">this</span>.simpleFactory = simpleFactory; <span class="hljs-comment">//设置简单工厂对象</span><br><span class="hljs-keyword">do</span> &#123;<br>orderType = getType();<br>pizza = <span class="hljs-keyword">this</span>.simpleFactory.createPizza(orderType);<br><br><span class="hljs-comment">//输出 pizza</span><br><span class="hljs-keyword">if</span>(pizza != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">//订购成功</span><br>pizza.prepare(); <br>pizza.bake();<br>pizza.cut();<br>pizza.box();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot; 订购披萨失败 &quot;</span>); <span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>);<br>&#125;<br><br><br><span class="hljs-comment">// 写一个方法，可以获取客户希望订购的披萨种类</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123; <br><span class="hljs-keyword">try</span> &#123;<br>        BufferedReader strin = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in)); <br>        System.out.println(<span class="hljs-string">&quot;input pizza 种类:&quot;</span>);<br>String str = strin.readLine();<br><span class="hljs-keyword">return</span> str;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123; <br>    e.printStackTrace(); <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.主类拿到订单获取披萨</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 工厂模式.order;<br><br><span class="hljs-comment">//相当于一个客户端，发出订购</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PizzaStore</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">new</span> OrderPizza(<span class="hljs-keyword">new</span> SimpleFactory());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot</title>
    <link href="/2021/05/08/springboot/"/>
    <url>/2021/05/08/springboot/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一-SpringBoot入门"><a href="#一-SpringBoot入门" class="headerlink" title="一.SpringBoot入门"></a>一.SpringBoot入门</h2><h3 id="1-0-springboot简介"><a href="#1-0-springboot简介" class="headerlink" title="1.0 springboot简介"></a>1.0 springboot简介</h3><ul><li><p><strong>SpringBoot介绍</strong><br>先通过来一些概念，会让我们对技术有着更加清晰的理解。J2EE笨重的开发、繁多的配置、低下的开发效率、复杂的部署流程、第三方技术集成难度大，如果开发过SpringMVC或者单纯使用过SSH、SSM框架的同学，肯定是体验过被很多配置文件支配的恐惧，很难受吧，不过不用担心，我们有了SpringBoot。Spring Boot用来简化Spring应用开发，约定大于配置，去繁从简，just run就能创建一个独立的，产品级别的应用。</p></li><li><p><strong>SpringBoot优点</strong></p><blockquote><p>1.可快速构建独立的Spring应用<br>2.直接嵌入Tomcat、Jetty和Undertow服务器<br>3.通过依赖启动器简化构建配置<br>4.自动化配置Spring和第三方库<br>5.提供生产就绪功能<br>6.极少的代码生成和XML配置</p></blockquote></li></ul><h3 id="1-1-实现HelloWorld应用"><a href="#1-1-实现HelloWorld应用" class="headerlink" title="1.1 实现HelloWorld应用"></a>1.1 实现HelloWorld应用</h3><ul><li>1.环境说明(这是我自己的版本)<blockquote><p>JDK1.8：1.8的版本很好用，目前大部分公司生产环境的项目也都是1.8<br>SpringBoot2：我这里使用的SpringBoot2.3.4<br>Maven3.3以上：我这里使用的是3.6.3<br>IDEA2020.2: 我这里使用的是IDEA，自己也可以使用eclipse</p></blockquote></li><li>2.maven添加阿里云镜像(加快依赖jar包下载)<br><font color="orange">maven -&gt; config -&gt; settings.xml</font> 找到mirrors标签，在里面添加以下配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;mirror&gt;<br>&lt;id&gt;alimaven&lt;/id&gt;<br>&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;<br>&lt;name&gt;aliyun maven&lt;/name&gt;<br>&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;<br>&lt;/mirror&gt;<br></code></pre></td></tr></table></figure></li><li>3.完成了上述操作之后，现在我教你用Idea配置自己的Maven，具体操作如下图：<br><img src="https://img.wenhairu.com/images/2021/05/12/aTza0.png" alt="1.1.0"><br><img src="https://img.wenhairu.com/images/2021/05/10/aOiIq.png" alt="1.1.1"><br>选择好了之后，点击Apply就可以了。</li><li>4.搭建springboot应用<br>首先我们使用Idea创建Maven工程<br><img src="https://img.wenhairu.com/images/2021/05/12/aTjPU.png" alt="1.1.2"><br><img src="https://img.wenhairu.com/images/2021/05/10/aO3Ep.png" alt="1.1.3"><br><img src="https://img.wenhairu.com/images/2021/05/10/aOrg6.png" alt="1.1.4"><br><img src="https://img.wenhairu.com/images/2021/05/10/aOt3I.png" alt="1.1.5"><br>然后点击Finish就创建成功了，我们的Maven项目也就创建好了，这里要提一下，我们刚创建Maven项目的时候，Idea给我的一些Tip，我们把这个勾选了，以后我们修改pom.xml的时候，就会自动帮我们加载依赖了。<br><img src="https://img.wenhairu.com/images/2021/05/12/aTLtj.png" alt="1.1.6"><br><img src="https://img.wenhairu.com/images/2021/05/12/aTlJg.png" alt="1.1.7"><br>到这里我们的springboot项目就创建完成了</li><li>4.编写一个主程序，启动springboot应用<br>现在创建一个包，在包下创建一个java类，命名随便，我这里命名为DemoApplication ，如下图，编写的代码如下：<br><img src="https://img.wenhairu.com/images/2021/05/12/aTvoK.png" alt="1.1.8"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(DemoApplication.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;name&quot;, defaultValue = &quot;World&quot;)</span> String name)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;Hello %s!&quot;</span>, name);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>代码写好了就直接运行吧，你没听错，啥都不用做，直接运行就好了，运行了之后，直接在浏览器中访问，你就会发现成功了，舒不舒服。<br><img src="https://img.wenhairu.com/images/2021/05/12/aTxd3.png" alt="1.1.9"><br><a href="https://blog.csdn.net/DBC_121/article/details/104383089?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162052898116780262592032%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162052898116780262592032&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_yy~default-1-104383089.pc_search_result_hbase_insert&utm_term=springbott">原文章链接</a></li></ul><h3 id="1-1-单元测试"><a href="#1-1-单元测试" class="headerlink" title="1.1 单元测试"></a>1.1 单元测试</h3><ul><li>1.添加测试依赖启动器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"> &lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>&lt;scope&gt;<span class="hljs-built_in">test</span>&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li>2.编写单元测试类和测试方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.chu.domain.Example;<br><span class="hljs-keyword">import</span> com.chu.domain.Person;<br><span class="hljs-keyword">import</span> com.chu.domain.Person1;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@SpringBootTest</span> <span class="hljs-comment">//标记单元测试类，并加载项目的上下文环境ApplicationContext</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span> <span class="hljs-comment">//测试运行器，并加载Spring Boot测试注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationTests</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(person1.getId());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-2-yaml语法"><a href="#1-2-yaml语法" class="headerlink" title="1.2 yaml语法"></a>1.2 yaml语法</h3><ul><li>1.导入yaml提示依赖<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!-- 通过本依赖可以提示yaml文件，自定义的属性 --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;<br>&lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li>2.创建application.yaml(springboot会自动识别)和实体类，我们可以在yaml文件中配置一些属性在应用启动时自动给实体类注入属性(请注意yaml的文件格式：application.yaml文件使用 <strong>“key”:(空格)value</strong>格式配置属性)<br><img src="https://img.wenhairu.com/images/2021/05/10/aOx1t.png" alt="1.2.0"><br><font color="orange">application.yaml</font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">person:<br>  userName: zhangsan<br>  boss: <span class="hljs-literal">true</span><br>  birth: 2020/1/12<br>  age: 18<br><span class="hljs-comment">#  interests: [篮球,足球]</span><br>  interests:<br>    - 篮球<br>    - 足球<br>  animal: [阿猫,阿狗]<br><span class="hljs-comment">#  score:</span><br><span class="hljs-comment">#    english: 80</span><br><span class="hljs-comment">#    math: 90</span><br>  score: &#123;english:80,math:90&#125;<br>  salarys:<br>    - 999.9<br>    - 9999.9<br>  pet:<br>    name: 阿狗<br>  allPets:<br>    sick:<br>      - &#123;name: 阿狗&#125;<br>      - name: 阿猫<br>      - name: 啊虫<br>    health:<br>      - name: 阿花<br>      - name: 阿浪<br><br></code></pre></td></tr></table></figure><font color="orange">Person.java</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySources;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-comment">//@PropertySource(value = &quot;classpath:xxx.properties&quot;) 记载指定配置文件</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> Boolean boss;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Pet pet;<br>    <span class="hljs-keyword">private</span> String[] interests;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; animal;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; score;<br>    <span class="hljs-keyword">private</span> Set&lt;Double&gt; salarys;<br>    <span class="hljs-keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;<br>&#125;<br><span class="hljs-comment">//...此处省略setter、getter方法</span><br></code></pre></td></tr></table></figure></li><li>3.编写单元测试类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.chu.domain.Person;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationTests</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//获取person组件</span><br>    <span class="hljs-keyword">private</span> Person person;<br><br><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-3-常用注解总结"><a href="#1-3-常用注解总结" class="headerlink" title="1.3 常用注解总结"></a>1.3 常用注解总结</h3><ul><li><font color="orange">@RestController</font>：@RestController 注解告诉Spring以字符串的形式渲染结果，并直接返回给调用者。@Controller和@Responsebody结合</li><li><font color="orange">@RequestMapping</font>：注解提供路由信息。它告诉Spring任何来自”/“路径的HTTP请求都应该被映射到 home 方法。</li><li><strong>注意</strong>：@RestController和@RequestMapping注解是Spring MVC注解</li><li><font color="orange">@EnableAutoConfiguration</font>：就是Springboot根据你添加的jar包来配置你项目的默认配置，比如根据spring-boot-starter-web ，来判断你的项目是否需要添加了webmvc和tomcat，就会自动的帮你配置web项目中所需要的默认配置。</li><li><font color="orange">@Configuration</font>：告诉SpringBoot这是一个配置类 == 配置文件</li><li><font color="orange">@ConditionalOnBean(name = “tomcat”)</font>：条件装配。如果放在方法上时表示只有容器中有某个组件才给下面所有都生效，否则都不生效。</li><li><font color="orange">@ConfigurationProperties(prefix = “person”)</font>：它可以将 application.yml 或 application.properties 主配置文件中的属性值与 Java Bean 对应属性进行注入。</li><li><font color="orange">@PropertySource</font>：去加载指定的配置文件，然后结合 @ConfigurationProperties 注解，便能够实现指定配置文件与 Java Bean 的注入操作。</li><li><font color="orange">@EnableAutoConfiguration</font>：开启自动配置</li><li><font color="orange">@ComponentScan(param)</font>：告诉Spring 哪个packages 的用注解标识的类 会被spring自动扫描并且装入bean容器,param即用来指定扫描包的范围。</li><li><font color="orange">@SpringBootApplication</font>：启动类，注解等价于以默认属性使用 @Configuration ， @EnableAutoConfiguration 和 @ComponentScan</li><li><font color="orange">@ResponseBody</font>：表示该方法的返回结果直接写入HTTP response body中</li><li><font color="orange">@Component</font>：泛指组件，可以将类注册到容器中</li><li><font color="orange">@AutoWired</font>：造函数进行标注，完成自动装配的工作。当加上（required=false）时，就算找不到bean也不报错。</li><li><font color="orange">@RequestParam(value=”参数名”,required=”true/false”,defaultValue=””)</font>：将请求参数绑定到你控制器的方法参数上（是springmvc中接收普通参数的注解）</li><li><font color="orange">@PathVariable</font>：接收请求路径中占位符的值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"> &lt;a href=&quot;car/3/owner/lisi?age=18&amp;inters=basketball&amp;inters=game&quot;&gt;car/&#123;id&#125;/owner/&#123;username&#125;&lt;/a&gt;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@PathVariable</span>注解可将有当前注解的属性封装到map中，但是map的k、v必须都是String类型</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> kv</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br> <span class="hljs-meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">getCar</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="hljs-function"><span class="hljs-params">                                  <span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String name,</span></span><br><span class="hljs-function"><span class="hljs-params">                                  <span class="hljs-meta">@PathVariable</span> Map&lt;String,String&gt; kv,</span></span><br><span class="hljs-function"><span class="hljs-params">                                  <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span><br><span class="hljs-function"><span class="hljs-params">                                  <span class="hljs-meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters)</span></span>&#123;<br>     Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>     map.put(<span class="hljs-string">&quot;id&quot;</span>,id);<br>     map.put(<span class="hljs-string">&quot;name&quot;</span>,name);<br>     map.put(<span class="hljs-string">&quot;kv&quot;</span>,kv);<br>     map.put(<span class="hljs-string">&quot;age&quot;</span>,age);<br>     map.put(<span class="hljs-string">&quot;inters&quot;</span>,inters);<br>     <span class="hljs-keyword">return</span> map;<br> &#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-4-自定义REST风格"><a href="#1-4-自定义REST风格" class="headerlink" title="1.4 自定义REST风格"></a>1.4 自定义REST风格</h3><ul><li>1.在配置类自定义REST风格的name属性<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> HiddenHttpMethodFilter <span class="hljs-title">hiddenHttpMethodFilter</span><span class="hljs-params">()</span></span>&#123;<br>HiddenHttpMethodFilter methodFilter = <span class="hljs-keyword">new</span> HiddenHttpMethodFilter();<br><span class="hljs-comment">//自定义参数，html提交必须的name属性，默认为_method</span><br>methodFilter.setMethodParam(<span class="hljs-string">&quot;_chu&quot;</span>);<br><span class="hljs-keyword">return</span> methodFilter;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>2.页面表单(index.html)<br>浏览器支持get、post提交，所以我们只需要模拟put、delete<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">测试REST风格:<br>&lt;form action=<span class="hljs-string">&quot;/user&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;REST-GET提交&quot;</span>&gt;<br>&lt;/form&gt;<br><br>&lt;form action=<span class="hljs-string">&quot;/user&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;REST-POST提交&quot;</span>&gt;<br>&lt;/form&gt;<br><br>&lt;form action=<span class="hljs-string">&quot;/user&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;!--&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;_method&quot;</span> value=<span class="hljs-string">&quot;delete&quot;</span>&gt;--&gt;<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;_chu&quot;</span> value=<span class="hljs-string">&quot;delete&quot;</span>&gt;<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;REST-DELETE提交&quot;</span>&gt;<br>&lt;/form&gt;<br><br>&lt;form action=<span class="hljs-string">&quot;/user&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;!--&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;_method&quot;</span> value=<span class="hljs-string">&quot;PUT&quot;</span>&gt;--&gt;<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;_chu&quot;</span> value=<span class="hljs-string">&quot;PUT&quot;</span>&gt;<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;REST-PUT提交&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure></li><li>3.接受提交数据(name=”_chu”和value值来判断)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash">package com.chu.boot.controller;<br><br>import org.springframework.web.bind.annotation.*;<br><br>@RestController<br>public class HelloController &#123;<br><br>    /**<br>     * 请求进来，先去找Controller看能不能处理。不能处理的所有请求有都交给静态资源处理器。静态资源也找不到时404<br>     * @<span class="hljs-built_in">return</span><br>     */<br>    @RequestMapping(<span class="hljs-string">&quot;/time.jpg&quot;</span>)<br>    public String <span class="hljs-function"><span class="hljs-title">hello</span></span>()&#123;<br>        <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;aaa&quot;</span>;<br>    &#125;<br><br>    //@RequestMapping(value = <span class="hljs-string">&quot;/user&quot;</span>,method = RequestMethod.GET)<br>    @GetMapping(<span class="hljs-string">&quot;/user&quot;</span>)<br>    public String <span class="hljs-function"><span class="hljs-title">getUser</span></span>()&#123;<br>        <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;GET-张三&quot;</span>;<br>    &#125;<br><br>    //@RequestMapping(value = <span class="hljs-string">&quot;/user&quot;</span>,method = RequestMethod.POST)<br>    @PostMapping(<span class="hljs-string">&quot;user&quot;</span>)<br>    public String <span class="hljs-function"><span class="hljs-title">saveUser</span></span>()&#123;<br>        <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;POST-张三&quot;</span>;<br>    &#125;<br><br><br>    //@RequestMapping(value = <span class="hljs-string">&quot;/user&quot;</span>,method = RequestMethod.PUT)<br>    @PutMapping(<span class="hljs-string">&quot;/user&quot;</span>)<br>    public String <span class="hljs-function"><span class="hljs-title">putUser</span></span>()&#123;<br>        <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;PUT-张三&quot;</span>;<br>    &#125;<br><br>    //@RequestMapping(value = <span class="hljs-string">&quot;/user&quot;</span>,method = RequestMethod.DELETE)<br>    @DeleteMapping(<span class="hljs-string">&quot;/user&quot;</span>)<br>    public String <span class="hljs-function"><span class="hljs-title">deleteUser</span></span>()&#123;<br>        <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;DELETE-张三&quot;</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-5-JSR303数据校验"><a href="#1-5-JSR303数据校验" class="headerlink" title="1.5 JSR303数据校验"></a>1.5 JSR303数据校验</h3><ul><li>@ConfigurationProperties 注解注入配置文件属性值时,支持JSR303数据校验，其主要作用是校验配置文件中注入对应Bean属性的值是否符合相关值的规则。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.validation.annotation.Validated;<br><br><span class="hljs-keyword">import</span> javax.validation.constraints.Email;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-meta">@Validated</span> <span class="hljs-comment">//引入Spring框架支持的数据校验规则</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> </span>&#123;<br>    <span class="hljs-meta">@Email</span> <span class="hljs-comment">//对属性进行规则匹配</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEmail</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEmail</span><span class="hljs-params">(String email)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.email = email;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-6-拦截器的简单实现"><a href="#1-6-拦截器的简单实现" class="headerlink" title="1.6 拦截器的简单实现"></a>1.6 拦截器的简单实现</h3><ul><li>1.实现HandlerInterceptor接口实现拦截器(我的这个案例主要是拦截用户是否登录,主要展示后台代码)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chu.interceptor;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 登录检查</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 目标方法执行之前</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//获取session对象</span><br>HttpSession session = request.getSession();<br><span class="hljs-comment">//获取session中已经存储的key并拿到user用户</span><br>        Object user = session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-comment">//判断当前用户是否存在</span><br>        <span class="hljs-keyword">if</span>(user!=<span class="hljs-keyword">null</span>)&#123;<br>    <span class="hljs-comment">//存在放行</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">//否则跳转到登录页面</span><br>            <span class="hljs-comment">/*request.setAttribute(&quot;msg&quot;,&quot;请先登录&quot;);*/</span><br>            request.getRequestDispatcher(<span class="hljs-string">&quot;/&quot;</span>).forward(request,response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 目标方法执行完以后</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> modelAndView</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 页面渲染之后</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>2.添加到配置类中并进行Bean注册<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>registry.addInterceptor(<span class="hljs-keyword">new</span> LoginInterceptor())<br>        <span class="hljs-comment">//添加拦截的路径</span><br>.addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br><span class="hljs-comment">//添加放行的路径(一般都放行静态文件)</span><br>.excludePathPatterns(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-string">&quot;/css/**&quot;</span>,<span class="hljs-string">&quot;/fonts/**&quot;</span>,<span class="hljs-string">&quot;/images/**&quot;</span>,<span class="hljs-string">&quot;/js/**&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-7-自定义banner-txt"><a href="#1-7-自定义banner-txt" class="headerlink" title="1.7 自定义banner.txt"></a>1.7 自定义banner.txt</h3><ul><li>我们在启动springboot启动类的时候，控制台会打印以下输出图样<br><img src="https://img.wenhairu.com/images/2021/05/12/aV8Fo.png" alt="1.8.0"></li><li>其实我们可以改变他的默认输出图样并设置成我们自己喜欢的图样<br><img src="https://img.wenhairu.com/images/2021/05/12/aVmTd.png" alt="1.8.1"></li><li>这样就成功啦!!!<br><img src="https://img.wenhairu.com/images/2021/05/12/aVqxH.png" alt="1.8.2"></li></ul><h3 id="1-8-配置favicon-ico小图标"><a href="#1-8-配置favicon-ico小图标" class="headerlink" title="1.8 配置favicon.ico小图标"></a>1.8 配置favicon.ico小图标</h3><ul><li>本节分享设置项目logo，我们默认的项目访问后并没有任何图标<blockquote><p>1.我们自己的<br><img src="https://img.wenhairu.com/images/2021/05/12/aVNuq.png" alt="2.0"><br>2.csdn的logo<br><img src="https://img.wenhairu.com/images/2021/05/12/aVYPX.png" alt="2.0.0"><br>3.设置自定义logo，在页面引入<br><img src="https://img.wenhairu.com/images/2021/05/12/aVfzp.png" alt="2.0.1"><br><img src="https://img.wenhairu.com/images/2021/05/12/aVCK6.png" alt="2.0.2"><br>4.访问我们的页面就配置成功啦!!!<br><img src="https://img.wenhairu.com/images/2021/05/12/aVJoI.png" alt="2.0.3"></p></blockquote></li></ul><h2 id="二-SpringBoot视图技术"><a href="#二-SpringBoot视图技术" class="headerlink" title="二.SpringBoot视图技术"></a>二.SpringBoot视图技术</h2><h3 id="2-0-配置视图控制器"><a href="#2-0-配置视图控制器" class="headerlink" title="2.0 配置视图控制器"></a>2.0 配置视图控制器</h3><ul><li>我们通过Controller控制层RequestMapping映射路径时，我们可能想要隐藏某个方法的真实路径，可以通过配置addViewControllers来通过虚拟路径访问真实路径。创建配置类实现WebMvcConfigurer接口，重写addViewControllers方法。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">@Configuration<br>public class MyWebConfig implements WebMvcConfigurer &#123;<br>    /**<br>     * 添加视图控制器<br>     * @param registry<br>     */<br>    @Override<br>    public void addViewControllers(ViewControllerRegistry registry) &#123;<br>        registry.addViewController(<span class="hljs-string">&quot;/&quot;</span>).setViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>        registry.addViewController(<span class="hljs-string">&quot;/index.html&quot;</span>).setViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>        registry.addViewController(<span class="hljs-string">&quot;/dashboard.html&quot;</span>).setViewName(<span class="hljs-string">&quot;dashboard&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-1-i18n国际化"><a href="#2-1-i18n国际化" class="headerlink" title="2.1 i18n国际化"></a>2.1 i18n国际化</h3><ul><li><p><font color="orange"><strong>步骤</strong></font> 在配置类中加载开启国际化</p><blockquote><p>1.实现LocaleResolver接口实现国际化的转换</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">package</span> com.chu.config;<br><br><span class="hljs-keyword">import</span> org.springframework.util.ObjectUtils;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.LocaleResolver;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现LocaleResolver接口实现国际化的转换</span><br><span class="hljs-comment"> * 底层AcceptHeaderLocaleResolver实现了LocaleResolver重写了resolveLocale方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLocaleResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">LocaleResolver</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Locale <span class="hljs-title">resolveLocale</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br><span class="hljs-comment">//获取请求中的语言参数</span><br>String language = request.getParameter(<span class="hljs-string">&quot;l&quot;</span>);<br><span class="hljs-comment">//如果没有就使用默认的</span><br>Locale locale = Locale.getDefault();<br><br><span class="hljs-comment">//如果请求的链接携带了国际化的参数</span><br><span class="hljs-keyword">if</span>(!ObjectUtils.isEmpty(language))&#123;<br><span class="hljs-comment">//zh_CN</span><br>String[] strings = language.split(<span class="hljs-string">&quot;_&quot;</span>);<br><span class="hljs-comment">//国家,地区</span><br>locale = <span class="hljs-keyword">new</span> Locale(strings[<span class="hljs-number">0</span>],strings[<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">return</span> locale;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLocale</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>2.加载到配置类中，并进行@Bean注册</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title">localeResolver</span><span class="hljs-params">()</span></span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyLocaleResolver();<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>创建需要存储转换英文和中文的properties文件<br><img src="https://img.wenhairu.com/images/2021/05/10/aTqgR.png" alt="1.6.0"></p><blockquote><p>login.properties</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">login.password=密码<br>login.tip=登录<br>login.username=用户名<br></code></pre></td></tr></table></figure><blockquote><p>login_en_US.properties</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">login.password=Password<br>login.tip=Sign In<br>login.username=User ID<br></code></pre></td></tr></table></figure><blockquote><p>login_zh_CN.properties</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">login.password=密码<br>login.tip=登录<br>login.username=用户名<br></code></pre></td></tr></table></figure></li><li><p>html需要的数据<br><img src="https://img.wenhairu.com/images/2021/05/10/aTFrN.png" alt="1.6.1"></p></li><li><p>到这里国际化的配置就结束了让我们一起来看看实现的效果。<br><img src="https://img.wenhairu.com/images/2021/05/10/aTYwB.png" alt="1.6.2"><br><img src="https://img.wenhairu.com/images/2021/05/10/aTfRn.png" alt="1.6.3"></p></li></ul><h3 id="2-2-整合Thymeleaf"><a href="#2-2-整合Thymeleaf" class="headerlink" title="2.2 整合Thymeleaf"></a>2.2 整合Thymeleaf</h3><p>&nbsp;&nbsp;<strong>1.表达式基本了解</strong></p><ul><li><p>它是一种用于Web和独立环境的现代服务器端的Java模板引擎，其主要目的是将优雅的Java模板带到开发工作流程中，将HTML在浏览器中显示，并且可以作为静态原型，让开发团队能更容易的协作。Thymeleaf能够处理HTML、XML、JavaScript、CSS甚至纯文本。</p></li><li><p><strong>Thymeleaf常用标签</strong></p><table><thead><tr><th>th:标签</th><th>说明</th><th>使用</th></tr></thead><tbody><tr><td>th:action</td><td>定义后台控制器路径，类似标签的action属性</td><td>&lt;form id=”login-form” th:action=”@{/login}”&gt;…&lt;/form&gt;</td></tr><tr><td>th:each</td><td>对象遍历，功能类似jstl中的&lt;c:forEach&gt;标签</td><td>&lt;tr th:each=”emp:${employees}”&gt;…&lt;/tr&gt;</td></tr><tr><td>th:href</td><td>定义超链接，类似标签的href 属性。value形式为@{/logout}</td><td>&lt;a th:href=”@{/logout}” class=”signOut”&gt;&lt;/a&gt;</td></tr><tr><td>th:if</td><td>条件判断</td><td>&lt;div th:if=”${rowStat.index} == 0”&gt;… 该div显示 …&lt;/div&gt;</td></tr><tr><td>th:src</td><td>用于外部资源引入，类似于</td><td>&lt;script th:src=”@{/resources/js/jquery/jquery.json-2.4.min.js}”</td></tr><tr><td>th:text</td><td>文本显示</td><td></td><td class="text" th:text="${username}"></td></tr><tr><td>th:value</td><td>用于标签复制，类似标签的value属性</td><td>&lt;input  id=”msg” type=”hidden” th:value=”${msg}” /&gt;</td></tr></tbody></table></li><li><p>声明定义该属性的div为模板片段，常用与头文件、页尾文件的引入。<strong>th:fragment</strong>常与<strong>th:include，th:replace</strong>一起使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!-- 声明模板片段footer. html --&gt; <br>&lt;nav th:fragment=<span class="hljs-string">&quot;sidebar&quot;</span>&gt;...&lt;/nav&gt;<br><br>&lt;!-- 引入模板片段 --&gt; <br>//插入片段，保留自身标记<br>&lt;div th:insert=<span class="hljs-string">&quot;~&#123;commons/commons::sidebar&#125;&quot;</span>&gt;&lt;/div&gt;<br>//插入片段的内容，去掉片段外层标记，同时保留自身标记<br>&lt;div th:include=<span class="hljs-string">&quot;~&#123;commons/commons::sidebar&#125;&quot;</span>&gt;&lt;/div&gt;<br>//插入片段，替换了自身标记<br>&lt;div th:replace=<span class="hljs-string">&quot;~&#123;commons/commons::sidebar(active=&#x27;main.html&#x27;)&#125;&quot;</span>&gt;&lt;/div&gt;<br><br>//对引入的模板进行判断来实现不同的样式展示<br>&lt;a th:class=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;active==&#x27;main.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;</span>&quot;</span>&gt;...&lt;/a&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>Thymeleaf主要标准表达式语法</strong></p><table><thead><tr><th>说明</th><th>表达式语法</th></tr></thead><tbody><tr><td>变量表达式</td><td>${…}</td></tr><tr><td>选择变量表达式</td><td>*{…}</td></tr><tr><td>消息表达式</td><td>#{…}</td></tr><tr><td>链接URL表达式</td><td>@{…}</td></tr><tr><td>片段表达式</td><td>~{…}</td></tr></tbody></table></li></ul><p>&nbsp;&nbsp;<strong>2.Thymeleaf基本配置</strong></p><blockquote><p>1.引入Thymeleaf依赖</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><blockquote><p>2.全局配置文件中配置Thymeleaf一些基本参数</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">spring.thymeleaf.cache = <span class="hljs-literal">false</span> <span class="hljs-comment">#启用模板缓存</span><br>spring.thymeleaf.encoding = UTF-8 <span class="hljs-comment">#模板编码</span><br>spring.thymeleaf.mode = HTML5 <span class="hljs-comment">#应用于模板的模板模式</span><br>spring.thymeleaf.prefix = classpath:/resources/templates/ <span class="hljs-comment">#指定模板页面存放路径</span><br>spring.thymeleaf.suffix = .html <span class="hljs-comment">#指定模板页面名称的后缀</span><br></code></pre></td></tr></table></figure><blockquote><p>3.获取数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/findUsers&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">findUsers</span><span class="hljs-params">(Model model)</span></span>&#123;<br>List&lt;User&gt; user = userService.findUsers();<br>model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,user);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>4.编写页面<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html xmlns:th=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;首页&lt;/title&gt;<br>    &lt;style <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;<br>        table &#123;border-collapse: collapse; font-size: 14px; width: 80%; margin: auto&#125;<br>        table, th, td &#123;border: 1px solid darkslategray;padding: 10px&#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div style=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;<br>    &lt;span style=<span class="hljs-string">&quot;color: darkslategray; font-size: 30px&quot;</span>&gt;欢迎光临！&lt;/span&gt;<br>    &lt;hr/&gt;<br>    &lt;table class=<span class="hljs-string">&quot;list&quot;</span>&gt;<br>        &lt;tr&gt;<br>            &lt;th&gt;id&lt;/th&gt;<br>            &lt;th&gt;姓名&lt;/th&gt;<br>            &lt;th&gt;用户名&lt;/th&gt;<br>            &lt;th&gt;年龄&lt;/th&gt;<br>            &lt;th&gt;性别&lt;/th&gt;<br>            &lt;th&gt;生日&lt;/th&gt;<br>        &lt;/tr&gt;<br>        &lt;tr th:each=<span class="hljs-string">&quot;u : <span class="hljs-variable">$&#123;user&#125;</span>&quot;</span>&gt;<br>            &lt;td th:text=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;u.id&#125;</span>&quot;</span>&gt;1&lt;/td&gt;<br>            &lt;td th:text=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;u.name&#125;</span>&quot;</span>&gt;张三&lt;/td&gt;<br>            &lt;td th:text=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;u.userName&#125;</span>&quot;</span>&gt;zhangsan&lt;/td&gt;<br>            &lt;td th:text=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;u.age&#125;</span>&quot;</span>&gt;20&lt;/td&gt;<br>            &lt;td th:text=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;u.sex&#125;</span> == 1 ? &#x27;男&#x27;: &#x27;女&#x27;&quot;</span>&gt;男&lt;/td&gt;<br>            &lt;td th:text=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#dates.format(u.birthday, &#x27;yyyy-MM-dd&#x27;)&#125;</span>&quot;</span>&gt;2020-02-12&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/table&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></p></blockquote><h2 id="三-SpringBoot数据访问"><a href="#三-SpringBoot数据访问" class="headerlink" title="三.SpringBoot数据访问"></a>三.SpringBoot数据访问</h2><h3 id="3-0-xml整合Mybatis"><a href="#3-0-xml整合Mybatis" class="headerlink" title="3.0 xml整合Mybatis"></a>3.0 xml整合Mybatis</h3><p><strong>1.基础环境搭建</strong></p><blockquote><p>1.0 数据准备</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">DROP TABLE IF EXISTS `employee`;<br>CREATE TABLE `employee`  (<br>  `id` int(11) NOT NULL AUTO_INCREMENT,<br>  `lastName` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,<br>  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,<br>  `gender` int(1) NULL DEFAULT NULL,<br>  `birth` datetime NULL DEFAULT NULL,<br>  `did` int(11) NULL DEFAULT NULL,<br>  PRIMARY KEY (`id`) USING BTREE,<br>  INDEX `did`(`did`) USING BTREE,<br>  CONSTRAINT `did` FOREIGN KEY (`did`) REFERENCES `department` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT<br>) ENGINE = InnoDB AUTO_INCREMENT = 1006 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;<br><br>-- ----------------------------<br>-- Records of employee<br>-- ----------------------------<br>INSERT INTO `employee` VALUES (1001, <span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27;123531293@qq.com&#x27;</span>, 1, <span class="hljs-string">&#x27;2019-12-06 04:00:00&#x27;</span>, 102);<br>INSERT INTO `employee` VALUES (1002, <span class="hljs-string">&#x27;BB&#x27;</span>, <span class="hljs-string">&#x27;213531293@qq.com&#x27;</span>, 0, <span class="hljs-string">&#x27;2019-12-05 16:12:00&#x27;</span>, 103);<br>INSERT INTO `employee` VALUES (1003, <span class="hljs-string">&#x27;GG&#x27;</span>, <span class="hljs-string">&#x27;753531293@qq.com&#x27;</span>, 0, <span class="hljs-string">&#x27;2019-12-05 16:00:00&#x27;</span>, 103);<br>INSERT INTO `employee` VALUES (1004, <span class="hljs-string">&#x27;GG&#x27;</span>, <span class="hljs-string">&#x27;753531293@qq.com&#x27;</span>, 0, <span class="hljs-string">&#x27;2019-12-05 16:00:00&#x27;</span>, 104);<br>INSERT INTO `employee` VALUES (1005, <span class="hljs-string">&#x27;GG&#x27;</span>, <span class="hljs-string">&#x27;753531293@qq.com&#x27;</span>, 0, <span class="hljs-string">&#x27;2019-12-05 16:00:00&#x27;</span>, 105);<br><br>SET FOREIGN_KEY_CHECKS = 1;<br><br></code></pre></td></tr></table></figure><blockquote><p>1.1 根据数据库表编写相应的实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;<br><br>     <span class="hljs-keyword">private</span> Integer id;<br>     <span class="hljs-keyword">private</span> String lastName;<br>     <span class="hljs-keyword">private</span> String email;<br>     <span class="hljs-keyword">private</span> Integer gender;<br>     <span class="hljs-keyword">private</span> Integer did;<br><br>     <span class="hljs-keyword">private</span> Department department;<br>     <span class="hljs-keyword">private</span> Date birth;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">(Integer id, String lastName, String email, Integer gender, Department department)</span> </span>&#123;<br>          <span class="hljs-keyword">this</span>.id = id;<br>          <span class="hljs-keyword">this</span>.lastName = lastName;<br>          <span class="hljs-keyword">this</span>.email = email;<br>          <span class="hljs-keyword">this</span>.gender = gender;<br>          <span class="hljs-keyword">this</span>.department = department;<br>          <span class="hljs-comment">//默认的创建日期</span><br>          <span class="hljs-keyword">this</span>.birth = <span class="hljs-keyword">new</span> Date();<br>     &#125;<br> <span class="hljs-comment">//此处省略setter、getter、toString法</span><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>1.2 引入mybatis依赖和Druid数据源</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;dependency&gt;<br>&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;<br>&lt;version&gt;2.1.1&lt;/version&gt;<br>&lt;/dependency&gt;<br><br>&lt;dependency&gt;<br>&lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;<br>&lt;version&gt;1.1.10&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><blockquote><p>1.3 编写数据库驱动和Mybatis配置文件(我使用的是yaml)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">spring:<br>  datasource:<br>    username: root<br>    password: root<br>    url: jdbc:mysql://localhost:3306/tests?serverTimezone=UTC&amp;characterEncoding=utf-8&amp;useUnicode=<span class="hljs-literal">true</span><br>    driver-class-name: com.mysql.cj.jdbc.Driver<br><span class="hljs-built_in">type</span>: com.alibaba.druid.pool.DruidDataSource <span class="hljs-comment">#配置第三方数据源</span><br>    filters: <span class="hljs-built_in">stat</span>,wall,log4j<br>mybatis:<br>  type-aliases-package: com.chu.pojo <span class="hljs-comment">#别名配置</span><br>  mapper-locations: classpath:mybatis/mapper/*.xml <span class="hljs-comment">#配置XML映射文件中指定的实体类别名路径</span><br></code></pre></td></tr></table></figure><blockquote><p>1.4 自定义Druid配置类对数据源属性值进行配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chu.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DruidConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">druidDataSource</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DruidDataSource();<br>    &#125;<br><br>    <span class="hljs-comment">//后台监控</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">statViewServlet</span><span class="hljs-params">()</span></span>&#123;<br>        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="hljs-keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="hljs-keyword">new</span> StatViewServlet(), <span class="hljs-string">&quot;/druid/*&quot;</span>);<br>        <span class="hljs-comment">//后台需要有人登录</span><br>        HashMap&lt;String,String&gt; initParameters = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-comment">//增加配置</span><br>        initParameters.put(<span class="hljs-string">&quot;loginUsername&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>); <span class="hljs-comment">//登录key是固定的</span><br>        initParameters.put(<span class="hljs-string">&quot;loginPassword&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>        bean.setInitParameters(initParameters);<span class="hljs-comment">//设置初始化参数</span><br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>2.配置文件方式整合Mybatis</strong></p><blockquote><p>创建一个与数据库表对应的接口Mapper文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.chu.pojo.Employee;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeDaoMapper</span> </span>&#123;<br>    <span class="hljs-comment">//查询所有员工</span><br>    <span class="hljs-function">Collection&lt;Employee&gt; <span class="hljs-title">getEmployeeAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>该Mapper接口文件声明了查询员工集合的一个方法</p><blockquote><p>编写EmployeeDaoMapper接口对应的映射文件EmployeeMapper.xml</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE mapper<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;<br>&lt;mapper namespace=<span class="hljs-string">&quot;com.chu.mapper.EmployeeDao&quot;</span>&gt;<br>    &lt;resultMap id=<span class="hljs-string">&quot;employeeMap&quot;</span> type=<span class="hljs-string">&quot;Employee&quot;</span>&gt;<br>        &lt;id property=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/id&gt;<br>        &lt;result property=&quot;lastName&quot; column=&quot;lastName&quot;&gt;&lt;/result&gt;<br>        &lt;result property=&quot;email&quot; column=&quot;email&quot;&gt;&lt;/result&gt;<br>        &lt;result property=&quot;gender&quot; column=&quot;gender&quot;&gt;&lt;/result&gt;<br>        &lt;result property=&quot;birth&quot; column=&quot;birth&quot;&gt;&lt;/result&gt;<br>        &lt;result property=&quot;did&quot; column=&quot;did&quot;&gt;&lt;/result&gt;<br><br>        &lt;association property=<span class="hljs-string">&quot;department&quot;</span> column=<span class="hljs-string">&quot;did&quot;</span> javaType=<span class="hljs-string">&quot;Department&quot;</span>&gt;<br>            &lt;id property=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/id&gt;<br>            &lt;result property=&quot;departmentName&quot; column=&quot;departmentName&quot;&gt;&lt;/result&gt;<br>        &lt;/association&gt;<br>    &lt;/resultMap&gt;<br>&lt;/mapper&gt;<br></code></pre></td></tr></table></figure><blockquote><p>编写单端测试进行接口方法测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chu;<br><br><span class="hljs-keyword">import</span> com.chu.mapper.EmployeeDao;<br><span class="hljs-keyword">import</span> com.chu.pojo.Employee;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmployeeDao employeeDao;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectEmployee</span><span class="hljs-params">()</span></span>&#123;<br>        Collection&lt;Employee&gt; employees = employeeDao.getEmployeeAll();<br>        System.out.println(employees);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://img.wenhairu.com/images/2021/05/14/aBIYN.png" alt="3.0"></p><h3 id="3-1-注解整合Mybatis"><a href="#3-1-注解整合Mybatis" class="headerlink" title="3.1 注解整合Mybatis"></a>3.1 注解整合Mybatis</h3><ul><li>1.导入实体类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Comment</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> Integer aId;<br><br><span class="hljs-comment">//此处省略setter、getter、toString法</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>2.创建Mapper接口，并注入容器，实现注解实现增删改查<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chu.boot_test02.mapper;<br><br><span class="hljs-keyword">import</span> com.chu.boot_test02.domain.Comment;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CommentMapper</span> </span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from t_comment where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Comment <span class="hljs-title">findById</span><span class="hljs-params">(Integer id)</span></span>;<br><br>   <span class="hljs-comment">/* @Insert(&quot;insert into t_comment(content,author,aId) values (#&#123;content,#&#123;author&#125;,#&#123;aId&#125;)&quot;)</span><br><span class="hljs-comment">    public  int insertComment(Comment comment);*/</span><br><br>    <span class="hljs-meta">@Update(&quot;update t_comment set content=#&#123;content&#125; where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateComment</span><span class="hljs-params">(Comment comment)</span></span>;<br><br>    <span class="hljs-meta">@Delete(&quot;delete from t_comment where id = #&#123;id&#125;)</span><span class="hljs-string">&quot;)</span><br><span class="hljs-string">    public int deleteComment(Integer id);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure></li><li>3.编写测试类实现数据库数据的操作<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.chu.boot_test03.domain.*;<br><span class="hljs-keyword">import</span> com.chu.boot_test03.mapper.CommentMapper;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BootTest03ApplicationTests</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CommentMapper commentMapper;<br><br><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectComment</span><span class="hljs-params">()</span></span>&#123;<br>        Comment c = commentMapper.findById(<span class="hljs-number">1</span>);<br>        System.out.println(c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://img.wenhairu.com/images/2021/05/18/avb7u.png" alt="3.1.0"></li><li><strong>注意：</strong>我们当前的aId属性并没有获取到值，由于驼峰的问题并没有映射到值，我们可以配置属性忽略驼峰问题(yaml写法)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mybatis:<br>  configuration:<br>    map-underscore-to-camel-case: <span class="hljs-literal">true</span> <span class="hljs-comment">#开启驼峰命名规则匹配</span><br></code></pre></td></tr></table></figure><img src="https://img.wenhairu.com/images/2021/05/18/avdih.png" alt="3.1.1"></li></ul><h3 id="3-2-SpringBoot整合JPA"><a href="#3-2-SpringBoot整合JPA" class="headerlink" title="3.2 SpringBoot整合JPA"></a>3.2 SpringBoot整合JPA</h3><ul><li><p>Spring Data JPA是Spring在ORM框架、JPA规范的基础上封装的一套JPA应用框架，它提供了增删改查等常用功能，使开发者可以用较少的代码实现数据操作，同时还易于扩展。</p></li><li><p>1.添加Spring Data Jpa依赖启动器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>2.编写ORM实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.persistence.*;<br><span class="hljs-comment">//标注要与数据库做映射的实体类，默认情况下，数据表的名称就是首字母小写的类名</span><br><span class="hljs-meta">@Entity(name = &quot;t_comment&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Discuss</span> </span>&#123;<br>    <span class="hljs-comment">//标注在类属性或者getter方法上，表示某一个属性对应表中的主键</span><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-comment">//与@Id注解标注在同一位置，用于表示属性对应主键生成的策略，可省略</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-comment">//标注在属性上，当类属性与表字段名称不同是，能够配合name属性表示类属性对应的表字段名</span><br>    <span class="hljs-meta">@Column(name = &quot;a_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer aId;<br><br><span class="hljs-comment">//...此处省略setter、getter、toString法</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>3.编写Repository接口，根据需要编写对应的数据操作方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chu.boot_test03.Pepository;<br><br><span class="hljs-keyword">import</span> com.chu.boot_test03.domain.Discuss;<br><span class="hljs-keyword">import</span> org.springframework.data.domain.Pageable;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.Modifying;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.Query;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DiscussRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JpaRepository</span>&lt;<span class="hljs-title">Discuss</span>,<span class="hljs-title">Integer</span>&gt; </span>&#123;<br>    <span class="hljs-comment">//1.查询author非空的Discuss评论集合</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Discuss&gt; <span class="hljs-title">findByAuthorNotNull</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">//2.根据文章id分页查询Discuss评论集合</span><br>    <span class="hljs-meta">@Query(&quot;select c from t_comment c where c.aId = ?1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Discuss&gt; <span class="hljs-title">getDiscussPaged</span><span class="hljs-params">(Integer aid, Pageable pageable)</span></span>;<br><br>    <span class="hljs-comment">//3.使用元素SQL语句，根据文章id分页查询Discuss评论集合</span><br>    <span class="hljs-meta">@Query(value = &quot;select * from t_comment  where a_Id = ?1&quot;,nativeQuery = true)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Discuss&gt; <span class="hljs-title">getDiscussPaged2</span><span class="hljs-params">(Integer aid, Pageable pageable)</span></span>;<br><br>    <span class="hljs-comment">//表示支持事务管理</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-comment">//表示支持事务变更</span><br>    <span class="hljs-meta">@Modifying</span><br>    <span class="hljs-comment">//根据评论id修改评论作者author</span><br>    <span class="hljs-meta">@Query(&quot;update t_comment c set c.author  = ?1 where c.id = ?2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateDiscuss</span><span class="hljs-params">(String author,Integer id)</span></span>;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-meta">@Modifying</span><br>    <span class="hljs-comment">//根据评论id删除评论</span><br>    <span class="hljs-meta">@Query(&quot;DELETE t_comment c where c.id = ?1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteDiscuss</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>4.编写单元测试进行接口方法测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><span class="hljs-keyword">import</span> java.util.Optional;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BootTest03ApplicationTests</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DiscussRepository repository;<br><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectCommentPaged</span><span class="hljs-params">()</span></span>&#123;<br>        Pageable of = PageRequest.of(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br>        List&lt;Discuss&gt; discussPaged = repository.getDiscussPaged(<span class="hljs-number">1</span>, of);<br>        System.out.println(discussPaged);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="四-SpringBoot安全管理"><a href="#四-SpringBoot安全管理" class="headerlink" title="四.SpringBoot安全管理"></a>四.SpringBoot安全管理</h2><ul><li>在 Web 应用开发中，安全一直是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。本章详细介绍了如何使用 <strong>Spring Security</strong>和<strong>Shiro</strong> 来保护 Web 应用的安全。Spring Security 本身以及 Spring 框架带来的灵活性，能够满足一般 Web 应用开发的典型需求，并允许开发人员进行定制。下面首先简单介绍 Spring Security。</li></ul><h3 id="4-0-Security基本使用"><a href="#4-0-Security基本使用" class="headerlink" title="4.0 Security基本使用"></a>4.0 Security基本使用</h3><h4 id="4-0-0-Security基础环境搭建"><a href="#4-0-0-Security基础环境搭建" class="headerlink" title="4.0.0 Security基础环境搭建"></a>4.0.0 Security基础环境搭建</h4><ul><li><strong>Spring Security</strong>的安全管理有两个重要概念，分别是<strong>Authentication(认证)<strong>和</strong>Authorization(授权)<strong>。其中，</strong>认证</strong>即确认用户是否登录，并对用户登录进行管控；<strong>授权</strong>即确定用户所拥有的功能权限，并对用户权限进行管控。</li><li>首先创建spring boot项目HelloSecurity<blockquote><p>1).引入pom依赖</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!-- security --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br><br>&lt;!-- thymeleaf-springSecurity整合 --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;<br>&lt;artifactId&gt;thymeleaf-extras-springsecurity5&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><blockquote><p>2).然后在src/main/resources/templates/目录下创建页面：index.html文件是项目首页</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">  &lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span> xmlns:th=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1 align=<span class="hljs-string">&quot;center&quot;</span>&gt;欢迎进入电影网站首页&lt;/h1&gt;<br>&lt;hr&gt;<br>   &lt;h3&gt;普通电影&lt;/h3&gt;<br>   &lt;ul&gt;<br>       &lt;li&gt;&lt;a th:href=<span class="hljs-string">&quot;@&#123;/detail/common/1&#125;&quot;</span>&gt;飞驰人生&lt;/a&gt;&lt;/li&gt;<br>       &lt;li&gt;&lt;a th:href=<span class="hljs-string">&quot;@&#123;/detail/common/2&#125;&quot;</span>&gt;夏洛特烦恼&lt;/a&gt;&lt;/li&gt;<br>   &lt;/ul&gt;<br><br>    &lt;h3&gt;VIP专享&lt;/h3&gt;<br>    &lt;ul&gt;<br>        &lt;li&gt;&lt;a th:href=<span class="hljs-string">&quot;@&#123;/detail/vip/1&#125;&quot;</span>&gt;速度与激情&lt;/a&gt;&lt;/li&gt;<br>        &lt;li&gt;&lt;a th:href=<span class="hljs-string">&quot;@&#123;/detail/vip/2&#125;&quot;</span>&gt;猩球崛起&lt;/a&gt;&lt;/li&gt;<br>    &lt;/ul&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><img src="https://img.wenhairu.com/images/2021/05/16/abslD.md.png" alt="4.0.0"><br>common和vip文件夹中分别对应的是普通用户和vip用户可访问的页面，index.html首页中通过标签展示了一些普通电影和vip电影，并通过&lt;a&gt;标签链接到了具体影片详情<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span> xmlns:th=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;影片详情&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>   &lt;a th:href=<span class="hljs-string">&quot;@&#123;/&#125;&quot;</span>&gt;返回&lt;/a&gt;<br>   &lt;h2&gt;飞驰人生&lt;/h2&gt;<br>   &lt;p&gt;<br>       飞驰人生介绍...<br>   &lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><img src="https://img.wenhairu.com/images/2021/05/16/ab3Et.png" alt="4.0.1"></li><li><strong>注意：</strong>引入security的pom依赖后，通过浏览器访问localhost:8080会自动跳到一个新的登录链接页面，说明项目在添加Security依赖时实现了自动化配置，并且拥有了一些默认的安全管理功能。当在SpringSecurity提供的默认登录页面”/login”中输入错误登录信息后，会重定向到”/login?error”页面并显示出错误信息。</li></ul><h4 id="4-0-1-Security安全配置"><a href="#4-0-1-Security安全配置" class="headerlink" title="4.0.1 Security安全配置"></a>4.0.1 Security安全配置</h4><ul><li>1.自定义WebSecurityConfigurerAdapter配置类并使用内存进行身份认证<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><br><span class="hljs-meta">@EnableWebSecurity</span> <span class="hljs-comment">//开启安全支持</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//密码需要设置编码器</span><br>        BCryptPasswordEncoder encoder = <span class="hljs-keyword">new</span> BCryptPasswordEncoder();<br>        <span class="hljs-comment">//使用内存用户信息，作为测试使用</span><br>        auth.inMemoryAuthentication().passwordEncoder(encoder)<br>                .withUser(<span class="hljs-string">&quot;chu&quot;</span>).password(encoder.encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;common&quot;</span>)<br>                .and()<br>                .withUser(<span class="hljs-string">&quot;里斯&quot;</span>).password(encoder.encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>2.效果测试，启动项目，通过浏览器访问”<a href="http://localhost:8080/&quot;%E6%9F%A5%E7%9C%8B%E9%A6%96%E9%A1%B5">http://localhost:8080/&quot;查看首页</a><br><img src="https://img.wenhairu.com/images/2021/05/17/at2nX.png" alt="4.1.0"></li></ul><h4 id="4-0-2-JDBC身份认证"><a href="#4-0-2-JDBC身份认证" class="headerlink" title="4.0.2 JDBC身份认证"></a>4.0.2 JDBC身份认证</h4><ul><li><p>我们可以使用数据库中已有的用户信息在项目中实现用户功能</p></li><li><p>1.数据准备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash">DROP TABLE IF EXISTS `t_authority`;<br>CREATE TABLE `t_authority`  (<br>  `id` int(20) NOT NULL AUTO_INCREMENT,<br>  `authority` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,<br>  PRIMARY KEY (`id`) USING BTREE<br>) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;<br><br>-- ----------------------------<br>-- Records of t_authority<br>-- ----------------------------<br>INSERT INTO `t_authority` VALUES (1, <span class="hljs-string">&#x27;ROLE_common&#x27;</span>);<br>INSERT INTO `t_authority` VALUES (2, <span class="hljs-string">&#x27;ROLE_vip&#x27;</span>);<br><br>SET FOREIGN_KEY_CHECKS = 1;<br><br>DROP TABLE IF EXISTS `t_customer`;<br>CREATE TABLE `t_customer`  (<br>  `id` int(11) NOT NULL,<br>  `username` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,<br>  `password` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,<br>  `valid` tinyint(1) NULL DEFAULT 1,<br>  PRIMARY KEY (`id`) USING BTREE<br>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;<br><br>-- ----------------------------<br>-- Records of t_customer<br>-- ----------------------------<br>INSERT INTO `t_customer` VALUES (1, <span class="hljs-string">&#x27;shitou&#x27;</span>, <span class="hljs-string">&#x27;$2a$10$5ooQI8dir8jv0/gCa1Six.GpzAdIPf6pMqdminZ/3ijYzivCyP1fK&#x27;</span>, 1);<br>INSERT INTO `t_customer` VALUES (2, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;$10$5ooQI8dir8jv0/gCa1Six.GpzAdIPf6pMqdminZ/3ijYzivCyP1fK&#x27;</span>, 1);<br><br>SET FOREIGN_KEY_CHECKS = 1;<br><br>DROP TABLE IF EXISTS `t_customer_authority`;<br>CREATE TABLE `t_customer_authority`  (<br>  `id` int(20) NOT NULL,<br>  `customer_id` int(20) NULL DEFAULT NULL,<br>  `authority_id` int(20) NULL DEFAULT NULL,<br>  PRIMARY KEY (`id`) USING BTREE<br>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;<br><br>-- ----------------------------<br>-- Records of t_customer_authority<br>-- ----------------------------<br>INSERT INTO `t_customer_authority` VALUES (1, 1, 1);<br>INSERT INTO `t_customer_authority` VALUES (2, 2, 2);<br><br>SET FOREIGN_KEY_CHECKS = 1;<br></code></pre></td></tr></table></figure></li><li><p>2.添加JDBC依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br><br>&lt;dependency&gt;<br>&lt;groupId&gt;mysql&lt;/groupId&gt;<br>&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>&lt;scope&gt;runtime&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>3.配置数据库连接(application.properties)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">spring.datasource.username=root<br>spring.datasource.password=root<br>spring.datasource.url=jdbc:mysql://localhost:3306/<span class="hljs-built_in">test</span>?serverTimezone=UTC&amp;characterEncoding=utf-8&amp;useUnicode=<span class="hljs-literal">true</span><br>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver<br></code></pre></td></tr></table></figure></li><li><p>4.使用JDBC进行认证<br>使用JDBC身份认证时，首先需要对密码编码设置(必须与数据库中用户密码加密方式一致),然后需要加载JDBC进行认证连接的数据源DataSource,最后，执行SQL语句，实现通过用户名username查询用户信息和用户权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chu.boot_security.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-meta">@EnableWebSecurity</span> <span class="hljs-comment">//开启安全支持</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-comment">//装配数据源</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DataSource dataSource;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//密码需要设置编码器</span><br>        BCryptPasswordEncoder encoder = <span class="hljs-keyword">new</span> BCryptPasswordEncoder();<br>        <span class="hljs-comment">//使用jdbc进行认证</span><br>        String userSQL = <span class="hljs-string">&quot;select username,password,valid from t_customer where username = ?&quot;</span>;<br>        String authoritySQL = <span class="hljs-string">&quot;select c.username,a.authority from t_customer c,&quot;</span> +<br>                <span class="hljs-string">&quot;t_authority a,t_customer_authority ca where ca.customer_id = c.id and ca.authority_id = a.id and c.username = ?&quot;</span>;<br>        <span class="hljs-comment">//使用内存用户信息，作为测试使用</span><br>       <span class="hljs-comment">/* auth.inMemoryAuthentication().passwordEncoder(encoder)</span><br><span class="hljs-comment">                .withUser(&quot;chu&quot;).password(encoder.encode(&quot;123456&quot;)).roles(&quot;common&quot;)</span><br><span class="hljs-comment">                .and()</span><br><span class="hljs-comment">                .withUser(&quot;里斯&quot;).password(encoder.encode(&quot;123456&quot;)).roles(&quot;vip&quot;);*/</span><br>        <span class="hljs-comment">//使用JDBC身份认证时，首先需要对密码编码设置(必须与数据库中用户密码加密方式一致),然后需要加载JDBC进行认证连接的数据源DataSource,最后，执行SQL语句，实现通过用户名username查询用户信息和用户权限</span><br>        auth.jdbcAuthentication().passwordEncoder(encoder)<br>                .dataSource(dataSource)<br>                .usersByUsernameQuery(userSQL)<br>                .authoritiesByUsernameQuery(authoritySQL);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="4-0-3-自定义用户授权管理"><a href="#4-0-3-自定义用户授权管理" class="headerlink" title="4.0.3 自定义用户授权管理"></a>4.0.3 自定义用户授权管理</h4><ul><li>1.自定义用户访问控制<br>在创建的自定义配置类SecurityConfig重写configure方法进行用户访问控制。示例如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>http.authorizeRequests()<br>.antMatchers(<span class="hljs-string">&quot;/&quot;</span>).permitAll() <span class="hljs-comment">// &quot;/&quot;直接放行</span><br>.antMatchers(<span class="hljs-string">&quot;/detail/common/**&quot;</span>).hasRole(<span class="hljs-string">&quot;common&quot;</span>) <span class="hljs-comment">//用户角色为common(ROLE_common)权限才允许访问</span><br>.antMatchers(<span class="hljs-string">&quot;/detail/vip/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip&quot;</span>) <span class="hljs-comment">//用户角色为vip(ROLE_vip)权限才允许访问</span><br>.anyRequest().authenticated()<span class="hljs-comment">//需要要求用户必须先进行登录认证</span><br>.and()<br>.formLogin();<br>&#125;<br></code></pre></td></tr></table></figure></li><li>2.效果测试<blockquote><p>直接访问时进入首页，这是因为自定义的用户访问控制中，对”/“的请求是直接放行的。<br><img src="https://img.wenhairu.com/images/2021/05/19/uFS1A.png" alt="4.3.0"><br>访问首页影片详情时会直接被自定义的访问控制跳转到默认的登录页面。输入信息后会立即跳转到之前将要访问的页面详情页<br><img src="https://img.wenhairu.com/images/2021/05/17/at2nX.png" alt="4.3.1"><br><img src="https://img.wenhairu.com/images/2021/05/19/uFc4T.png" alt="4.3.2"></p></blockquote></li></ul><h4 id="4-0-4-自定义用户登录"><a href="#4-0-4-自定义用户登录" class="headerlink" title="4.0.4 自定义用户登录"></a>4.0.4 自定义用户登录</h4><ul><li>1.自定义用户登录页面<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>用户登录页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/bootstrap.min.css&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/signin.css&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-signin&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/userLogin&#125;&quot;</span> <span class="hljs-attr">th:method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-4&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/img/123.png&#125;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100px&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h3 mb-3 font-weight-normal&quot;</span>&gt;</span>请登录<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 用户登录错误信息提示框 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;param.error&#125;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red;height: 40px;text-align: left;font-size: 1.1em&quot;</span>&gt;</span><br>           用户名或密码错误<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>Copyright@ 2019-2021<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>2.自定义用户登录跳转<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/userLogin&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toLoginPage</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user/login&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>3.自定义用户登录控制<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>http.authorizeRequests()<br>.antMatchers(<span class="hljs-string">&quot;/&quot;</span>).permitAll() <span class="hljs-comment">// &quot;/&quot;直接放行</span><br><span class="hljs-comment">//需要对static文件夹下静态资源进行统一放行</span><br>.antMatchers(<span class="hljs-string">&quot;/css/**&quot;</span>).permitAll()<br>.antMatchers(<span class="hljs-string">&quot;/img/**&quot;</span>).permitAll()<br>.antMatchers(<span class="hljs-string">&quot;/detail/common/**&quot;</span>).hasRole(<span class="hljs-string">&quot;common&quot;</span>) <span class="hljs-comment">//用户角色为common(ROLE_common)权限才允许访问</span><br>.antMatchers(<span class="hljs-string">&quot;/detail/vip/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip&quot;</span>) <span class="hljs-comment">//用户角色为vip(ROLE_vip)权限才允许访问</span><br>.anyRequest().authenticated();<span class="hljs-comment">//需要要求用户必须先进行登录认证</span><br><span class="hljs-comment">//自定义用户登录控制</span><br>http.formLogin()<br><span class="hljs-comment">//像自定义登录页跳转的请求路径，并使用permitAll对登录跳转的请求进行放行</span><br>.loginPage(<span class="hljs-string">&quot;/userLogin&quot;</span>).permitAll()<br><span class="hljs-comment">//接收登录时提交的用户名和密码</span><br>.usernameParameter(<span class="hljs-string">&quot;name&quot;</span>).passwordParameter(<span class="hljs-string">&quot;pwd&quot;</span>)<br><span class="hljs-comment">//指定了用户登录成功后默认跳转到项目首页</span><br>.defaultSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>)<br><span class="hljs-comment">//用来控制用户登录认证失败后的跳转路径，该方法默认的参数为&quot;/login?error&quot;</span><br>.failureUrl(<span class="hljs-string">&quot;/userLogin?error&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>4.效果测试<br>启动项目进入首页后点击影片详情时，会跳转到我们自定义的用户登录界面，输入错误时会提示。输入正确后跳转到当前访问的页面<br><img src="https://img.wenhairu.com/images/2021/05/20/uJblu.png" alt="4.4.0"></li></ul><h4 id="4-0-5-自定义用户退出"><a href="#4-0-5-自定义用户退出" class="headerlink" title="4.0.5 自定义用户退出"></a>4.0.5 自定义用户退出</h4><ul><li>1.添加自定义用户退出链接<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要实现自定义用户退出功能，必须先在某个页面定义用户退出链接或者按钮。我们可以在项目首页index.html新增一个用户退出连接。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/mylogout&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;注销&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>新增一个&lg;from&gt;标签进行注销控制</li><li>2.自定义用户退出控制<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在SecurityConfig配置类的configure方法中进行用户退出控制。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//自定义用户退出控制</span><br>http.logout()<br><span class="hljs-comment">//指定用户退出请求路径</span><br>.logoutUrl(<span class="hljs-string">&quot;/mylogout&quot;</span>)<br><span class="hljs-comment">//指定用户退出成功后重定向到&quot;/&quot;地址</span><br>.logoutSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>);<br></code></pre></td></tr></table></figure></li><li>3.效果测试<br><img src="https://img.wenhairu.com/images/2021/05/20/uJiEh.png" alt="4.5.0"></li></ul><h4 id="4-0-6-记住我功能"><a href="#4-0-6-记住我功能" class="headerlink" title="4.0.6 记住我功能"></a>4.0.6 记住我功能</h4><ul><li><p>Spring Security针对记住我功能提供了两种实现：一种是<strong>简单的使用加密来保证基于 Cookie 中 Token 的安全</strong>；另一种是<strong>通过数据库或其它持久化机制来保存生成的Tocken</strong>。</p></li><li><p><font color="orange">1.基于简单加密 Token 的方式</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于简单加密Token的方式实现记住我功能非常简单，当用户选择记住我并登录成功后，Security会生成一个Cookie并发给客户端浏览器。基于简单加密Token的方式中Token在指定的时间内有效，且必须保证Tocken中所包含的username、password和key没有被改变。需要注意的是，这种方式是存在安全隐患的。<br>在login.html中新增一个记住我功能勾选框。示例代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox mb-3&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rememberme&quot;</span>&gt;</span>记住我<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打开SecurityConfig配置类的configure方法中进行记住我配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定制Remember-me记住我功能</span><br>http.rememberMe()<br><span class="hljs-comment">//指定了记住我勾选框的 name 指属性，如果页面中使用了默认的 &quot;remember-me&quot;,则该方法可以省略</span><br>.rememberMeParameter(<span class="hljs-string">&quot;rememberme&quot;</span>)<br><span class="hljs-comment">//设置了记住我功能中Token的有效期为200s</span><br>.tokenValiditySeconds(<span class="hljs-number">200</span>);<br></code></pre></td></tr></table></figure><p>在初次登录时勾选了【记住我】选项后，在设置的Token有效期内再次进行访问不需要重新登录认证。如果Token失效后，再次访问项目，则需要重新登录认证。</p></li><li><p><font color="orange">2.基于持久化Token的方式</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了对持久化Token进行存储，需要在数据库中创建一个存储Cookie信息的持续登录用户表persistent_logins，具体建表语句如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">create table persistent_logins (username varchar(64) not null,<br>                                series varchar(64) primary key,<br>token varchar(64) not null,<br>last_used timestamp not null);<br></code></pre></td></tr></table></figure><p>在完成存储Cookie信息的用户表创建以及页面记住我功能勾选框设置后，打开SecurityConfig类，重写configure方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">http.rememberMe()<br><span class="hljs-comment">//指定了记住我勾选框的 name 指属性，如果页面中使用了默认的 &quot;remember-me&quot;,则该方法可以省略</span><br>.rememberMeParameter(<span class="hljs-string">&quot;rememberme&quot;</span>)<br><span class="hljs-comment">//设置了记住我功能中Token的有效期为200s</span><br>.tokenValiditySeconds(<span class="hljs-number">200</span>)<br><span class="hljs-comment">//对Cookie信息进行持久化管理</span><br>.tokenRepository(tokenRepository());<br></code></pre></td></tr></table></figure><p>实现tokenRepository()方法对    Cookie信息进行持久化管理。其中的tokenRepository()参数会返回一个设置dataSource数据源的JdbcTokenRepositoryImpl对象，该对象包含操作Token的各种方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//持久化Token存储</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> JdbcTokenRepositoryImpl <span class="hljs-title">tokenRepository</span><span class="hljs-params">()</span></span>&#123;<br>JdbcTokenRepositoryImpl jr = <span class="hljs-keyword">new</span> JdbcTokenRepositoryImpl();<br>jr.setDataSource(dataSource);<br><span class="hljs-keyword">return</span> jr;<br>&#125;<br></code></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;启动项目，通过浏览器访问项目登录页，在登录界面输入正确用户信息并勾选记住我后，此时数据库持久化数据表persistent_logins，包括用户名、序列号、Token和最近登录时间。登录用户手动实现用户退出时，数据库中的持久化用户信息也会随之删除。如果用户是在Token有效期后自动退出的，那么数据库中的persistent_logins表的持久化用户信息不会随之删除，当用户再次登录访问时，则是在表中新增一条持久化用户信息。</p></li></ul><h4 id="4-0-7-CSRF防护功能"><a href="#4-0-7-CSRF防护功能" class="headerlink" title="4.0.7 CSRF防护功能"></a>4.0.7 CSRF防护功能</h4><ul><li><p>一、CSRF是什么<br>CSRF全称为跨站请求伪造（Cross-site request forgery），是一种网络攻击方式，也被称为 one-click attack 或者 session riding。</p></li><li><p>二、CSRF攻击原理<br>CSRF攻击利用网站对于用户网页浏览器的信任，挟持用户当前已登陆的Web应用程序，去执行并非用户本意的操作。</p></li><li><p>三、在业界目前防御CSRF攻击主要有以下3种策略</p><blockquote><p>1).验证HTTP Referer字段<br>2).在请求地址中添加Token并验证<br>3).在HTTP头中自定义属性并验证</p></blockquote></li><li><p><font color="red">1.CSRFF防护功能关闭</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringBoot整合SpringSecurity默认开启了CSRF功能，并要求数据修改的请求方法(例如：PATCH、POST、PUT、DELETE)都需要经过Security配置的安全认证后方可正常访问，否则无法正常发送请求。</p><blockquote><p>1.创建数据修改页面。打开项目resources/templates目录，在该目录下创建一个名为csrf的文件夹，在该文件夹中模拟修改用户账户信息的csrfTest.html页面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">  <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/html&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>用户修改<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/updateUser&quot;</span>&gt;</span><br>        用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        密<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>2.在controller包下创建一个用于CSRF页面请求测试的控制类CERFController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chu.boot_security.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CERFController</span> </span>&#123;<br>    <br>    <span class="hljs-comment">//向用户修改页面跳转</span><br>    <span class="hljs-meta">@GetMapping(&quot;/toUpdate&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toUpdate</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;csrf/csrfTest&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//用户修改提交处理</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@PostMapping(value = &quot;/updateUser&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateUser</span><span class="hljs-params">(String username, String password, HttpServletRequest request)</span></span>&#123;<br>        System.out.println(username);<br>        System.out.println(password);<br>        String csrf_token = request.getParameter(<span class="hljs-string">&quot;_csrf&quot;</span>);<br>        System.out.println(csrf_token);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果测试<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在所示的用户修改页面中，随意输入修改后的信息，点击【修改】按钮进行数据提交<br><img src="https://img.wenhairu.com/images/2021/05/20/uWcWo.png" alt="4.0.7"><br><img src="https://img.wenhairu.com/images/2021/05/20/uWgSf.png" alt="4.0.8"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从上图可以看出，在业务代码没有错误的情况下，表单中正确提交POST的请求数据被拦截，这说明在整合Security安全框架后，项目默认启用了CSRF安全防护功能，项目中所有涉及数据修改方式的请求都会被拦截。针对这种情况，可以有两种处理方式：<strong>一种方式是直接关闭Security默认开启的CSRF防御功能；另一种方式配置Security需要的CSRF Token</strong></p><blockquote><p>3.关闭默认开启的CSRF防御功能的话，打开配置类SecurityConfig，再重写configure方法中进行关闭配置即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//可以关闭SpringSecurity默认开启的CSRF防护功能</span><br>http.csrf().disable();<br></code></pre></td></tr></table></figure></li><li><p><font color="red">2.针对Form表单数据修改的CERF Token配置</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;针对Form表单类型的数据修改请求，Security支持在Form表单中提供一个携带 CSRF Token 信息的隐藏域，与其他修改数据一起提交，这样后台就可以获取并验证请求是否为安全的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/html&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>用户修改<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/updateUser&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- th:name=&quot;$&#123;_csrf.parameterName&#125;&quot;会获取Security提供默认的CSRF Token对应的key值_csrf</span><br><span class="hljs-comment">             th:value=&quot;$&#123;_csrf.token&#125;&quot;会获取Security默认随机生成的CSRF Token对应的value值</span><br><span class="hljs-comment">--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">th:name</span>=<span class="hljs-string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;_csrf.token&#125;&quot;</span>&gt;</span><br>        用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        密<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上述代码中，Form表单中&lg;input&gt;隐藏标签携带了Security提供的CSRF Tocken信息。在Form表单中添加上述CSRF Token配置后，无需其他配置就可以正常实现数据修改请求，后台配置的Security会自动获取并识别请求中的CSRF Token信息并进行用户信息验证，从而判断是否安全。<br><font color="orange">还可以使用Thymeleaf模板的th:action属性配置CSRF Token信息</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;/updateUser&quot;</span>&gt;</span><br>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>密<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thymeleaf模板的th:action属性配置请求时，会默认携带CERF Token信息，无需了开发者手动添加。</p></li><li><p><font color="red">3.针对Ajax数据修改请求的CSRF Token配置</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于Ajax类型的数据修改请求来说，Security提供了通过添加HTTP header头信息的方式携带CSRF Token 信息进行请求验证。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，在页面&lt;head&gt;标签中添加&amp;ltmeta&gt;子标签，并配置CSRF Token 信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 获取CSRF Token --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_csrf&quot;</span> <span class="hljs-attr">th:content</span>=<span class="hljs-string">&quot;$&#123;_csrf.token&#125;&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 获取CSRF头，默认为X-CSRF-TOKEN --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_csrf_header&quot;</span> <span class="hljs-attr">th:content</span>=<span class="hljs-string">&quot;$&#123;_csrf.headerName&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>用户修改<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="4-0-8-Security管理前端页面"><a href="#4-0-8-Security管理前端页面" class="headerlink" title="4.0.8 Security管理前端页面"></a>4.0.8 Security管理前端页面</h4><ul><li><p>1.导入Thymeleaf和Security整合依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!-- thymeleaf-springSecurity整合 --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;<br>&lt;artifactId&gt;thymeleaf-extras-springsecurity5&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>2.修改前端页面，使用Security相关标签进行页面控制<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开首页index.html，引入Security安全标签，并在页面中根据使用Security标签进行显示控制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:sec</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity4&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>欢迎进入电影网站首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 判断用户是否未登录 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;isAnonymous()&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>游客你好，如果想查看电影<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/userLogin&#125;&quot;</span>&gt;</span>请登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 判断用户是否已登录 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;isAuthenticated()&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 显示当前用户名字 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">sec:authentication</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #007bff&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 显示用户权限 --&gt;</span><br>    您好，你的用户权限为<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">sec:authentication</span>=<span class="hljs-string">&quot;principal.authorities&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: darkkhaki&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    ，你有权看以下电影<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/mylogout&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;注销&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 定义了只有角色为common(对应权限Authority为ROLE_common)且登录的用户才会显示普通电影列表 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;hasRole(&#x27;common&#x27;)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>普通电影<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/detail/common/1&#125;&quot;</span>&gt;</span>飞驰人生<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/detail/common/2&#125;&quot;</span>&gt;</span>夏洛特烦恼<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 定义了只有角色为ROLE_vip(对应角色Role为vip)且登录的用户才会显示vip电影列表 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;hasAnyAuthority(&#x27;ROLE_vip&#x27;)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>VIP专享<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/detail/vip/1&#125;&quot;</span>&gt;</span>速度与激情<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/detail/vip/2&#125;&quot;</span>&gt;</span>猩球崛起<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://img.wenhairu.com/images/2021/05/20/uW0Hq.png" alt="4.0.8.0"><br><img src="https://img.wenhairu.com/images/2021/05/20/uW4XX.png" alt="4.0.8.1"></p></li><li><p>表达式描述</p><blockquote><p><font color="red">hasRole([role])</font> 用户拥有制定的角色时返回true （Spring security默认会带有ROLE_前缀）<br><font color="red">hasAnyRole([role1,role2])</font> 用户拥有任意一个制定的角色时返回true<br><font color="red">hasAuthority([authority])</font> 等同于hasRole,但不会带有ROLE_前缀<br><font color="red">hasAnyAuthority([auth1,auth2])</font> 等同于hasAnyRole<br><font color="red">permitAll</font> 永远返回true<br><font color="red">denyAll</font> 永远返回false<br><font color="red">rememberMe</font> 当前勇士是rememberMe用户返回true<br><font color="red">authentication</font> 当前登录用户的authentication对象<br><font color="red">fullAuthenticated</font> 当前用户既不是anonymous也不是rememberMe用户时返回true</p></blockquote></li></ul><h2 id="五-SpringBoot任务管理"><a href="#五-SpringBoot任务管理" class="headerlink" title="五.SpringBoot任务管理"></a>五.SpringBoot任务管理</h2>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/2021/05/01/vue/"/>
    <url>/2021/05/01/vue/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一-Vue初体验"><a href="#一-Vue初体验" class="headerlink" title="一.Vue初体验"></a>一.Vue初体验</h2><ul><li><p>简介<br>Vue (读音 /vjuː/,类似于 View) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p></li><li><p>MVVM<br><img src="https://img.wenhairu.com/images/2021/05/06/aI0ih.png" alt="mvvm"></p></li><li><p>Vue安装方式：</p></li></ul><p>   1.使用此CDN方法(代码如下):<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><br>   2.官网下载:<a href="https://cn.vuejs.org/v2/guide/installation.html">vue官网</a><br>   <img src="https://img.wenhairu.com/images/2021/05/06/aIbjR.png" alt="vue_download"></p><h3 id="1-0-HelloVuejs"><a href="#1-0-HelloVuejs" class="headerlink" title="1.0 HelloVuejs"></a>1.0 HelloVuejs</h3><ul><li>第一个vue程序<br>  1.创建HTML文件<br>  2.引入Vue.js文件</li></ul><p><font color="#999AAA"><strong>完整示例</strong>:</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;<br>&lt;!-- 编程范式:声明式编程 --&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>//es6 <span class="hljs-built_in">let</span>(变量)/const(常量)<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span><br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;!-- js:命令式编程 --&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br><br></code></pre></td></tr></table></figure><p><font color="red">演示效果：（视图驱动数据，数据驱动视图）<br><img src="https://img.wenhairu.com/images/2021/05/06/aIZ7u.png" alt="result1.0"></font></p><h3 id="1-1-vue列表展示"><a href="#1-1-vue列表展示" class="headerlink" title="1.1 vue列表展示"></a>1.1 vue列表展示</h3><ul><li>通过在vue实例data里定义数组，在vue实例范围内通过v-for对数组进行遍历实现数据的展示</li></ul><p><font color="#999AAA"><strong>完整示例</strong>:</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;ul&gt;<br>&lt;li v-for=<span class="hljs-string">&quot;item in movies&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;haha&#x27;</span>,<br>movies: [<span class="hljs-string">&#x27;111&#x27;</span>,<span class="hljs-string">&#x27;222&#x27;</span>,<span class="hljs-string">&#x27;333&#x27;</span>,<span class="hljs-string">&#x27;444&#x27;</span>]<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h3 id="1-2-vue案例-计数器"><a href="#1-2-vue案例-计数器" class="headerlink" title="1.2 vue案例-计数器"></a>1.2 vue案例-计数器</h3><ul><li>1.在vue模板内创建两个按钮并通过属性绑定两个点击事件,通过mustache语法获取计数器的初始值<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;button v-on:click=<span class="hljs-string">&quot;add&quot;</span>&gt;+&lt;/button&gt;<br>&lt;button @click=<span class="hljs-string">&quot;sub&quot;</span>&gt;-&lt;/button&gt;<br></code></pre></td></tr></table></figure></li><li>2.创建add、sub方法，通过拿到vue实例内的counter计数值给方法实现相对应的赋值<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">add: <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br>this.counter++<br>&#125;,<br>sub: <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br>this.counter--<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><font color="#999AAA"><strong>完整示例</strong>:</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;h2&gt;当前计数:&#123;&#123;counter&#125;&#125;&lt;/h2&gt;<br>&lt;!-- &lt;button v-on:click=<span class="hljs-string">&quot;counter++&quot;</span>&gt;+&lt;/button&gt;<br>&lt;button v-on:click=<span class="hljs-string">&quot;counter--&quot;</span>&gt;-&lt;/button&gt; --&gt;<br>&lt;button v-on:click=<span class="hljs-string">&quot;add&quot;</span>&gt;+&lt;/button&gt;<br>&lt;button @click=<span class="hljs-string">&quot;sub&quot;</span>&gt;-&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>counter: 0<br>&#125;,<br>methods: &#123;<br>add: <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br>this.counter++<br>&#125;,<br>sub: <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br>this.counter--<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h2 id="二-插值的操作"><a href="#二-插值的操作" class="headerlink" title="二.插值的操作"></a>二.插值的操作</h2><h3 id="2-0-Mustache语法"><a href="#2-0-Mustache语法" class="headerlink" title="2.0 Mustache语法"></a>2.0 Mustache语法</h3><ul><li>使用“mustache” 语法 （双花括号）</li><li>mustache 标签将会被替换为 data 对象上对应的 msg 属性的值。</li><li>只要绑定的数据对象上的 msg 属性发生改变，插值内容也会随之更新。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">  &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>     &lt;!-- this 指向 vm --&gt;<br>     &lt;p&gt; &#123;&#123; msg &#125;&#125; &lt;/p&gt;<br>  &lt;/div&gt;<br>  <br>  &lt;script&gt;<br>var vm = new Vue(&#123;<br>   el: ‘<span class="hljs-comment">#app’,</span><br> data: &#123;<br> msg: <span class="hljs-string">&#x27;hello vue.js&#x27;</span><br> &#125;<br> &#125;)<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p><font color="#999AAA"><strong>完整示例</strong>:</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>&lt;!-- 在mustache语法中，不仅仅可以直接写变量，也可以写简单的表达式 --&gt;<br>&lt;h2&gt;&#123;&#123;firstName + lastName&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;&#123;&#123;firstName + <span class="hljs-string">&#x27; &#x27;</span> + lastName&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;&#123;&#123;counter * 2&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span>,<br>firstName: <span class="hljs-string">&#x27;haha&#x27;</span>,<br>lastName: <span class="hljs-string">&#x27;heihei&#x27;</span>,<br>counter: 100<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h3 id="2-1-v-once指令的使用"><a href="#2-1-v-once指令的使用" class="headerlink" title="2.1 v-once指令的使用"></a>2.1 v-once指令的使用</h3><ul><li><strong>v-show 和 v-if 区别</strong><br>1、DOM结构上的区别<br>v-show是display的none和block的切换，组件被渲染并一直保留在 DOM 中，而v-if是组件销毁创建的切换，销毁的组件显示为<!---->，加上v-once可以在内存上优化，达到和v-show一样的效果。<br>2、限制上的区别<br>v-show不支持 template 元素，而v-if支持，这里可以用v-if+v-once达到v-show的性能。</li></ul><p><font color="#999AAA"><strong>完整示例</strong>:</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>&lt;!-- 应用场景： 如果显示的信息后续不需要再修改,使用v-once,这样可以提高性能。 --&gt;<br>    &lt;h2 v-once&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span><br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p><font color="red">演示效果:<br><img src="https://img.wenhairu.com/images/2021/05/06/aIINP.png" alt="result2.1"></font></p><h3 id="2-2-v-html指令的使用"><a href="#2-2-v-html指令的使用" class="headerlink" title="2.2 v-html指令的使用"></a>2.2 v-html指令的使用</h3><p>v-html：将字符串解析成html显示</p><ul><li>用法:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;p v-html=<span class="hljs-string">&quot;html&quot;</span>&gt;&lt;/p&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></li></ul><p><font color="#999AAA"><strong>完整示例</strong>:</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>&lt;!-- v-html使普通字符串转换为html代码 --&gt;<br>    &lt;h2 v-html=<span class="hljs-string">&quot;url&quot;</span>&gt;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span>,<br>url: <span class="hljs-string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度一下&lt;a&gt;&#x27;</span><br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>具体细节从结果来分析~~(url被v-html转换成了html)<br><font color="red">演示效果:<br><img src="https://img.wenhairu.com/images/2021/05/06/aIOyD.md.png" alt="result2.2"></font></p><h3 id="2-3-v-text指令的使用"><a href="#2-3-v-text指令的使用" class="headerlink" title="2.3 v-text指令的使用"></a>2.3 v-text指令的使用</h3><p>v-text是用于操作纯文本，它会替代显示对应的数据对象上的值。当绑定的数据对象上的值发生改变，插值处的内容也会随之更新。注意：此处为单向绑定，数据对象上的值改变，插值会发生变化；但是当插值发生变化并不会影响数据对象的值</p><p><font color="#999AAA"><strong>完整示例</strong>:</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>   &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>   &lt;!-- v-text指令（相当于原生js中的innerText）<br>                用于将数据填充到标签中，作用于插值表达式类似，但是没有闪动问题<br>   （如果数据中有HTML标签会将html标签一并输出 ）<br>                注意：此处为单向绑定，数据对象上的值改变，插值会发生变化；<br>但是当插值发生变化并不会影响数据对象的值 --&gt;<br>   &lt;h2 v-text=<span class="hljs-string">&quot;message&quot;</span>&gt;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span><br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：注意：此处为单向绑定，数据对象上的值改变，插值会发生变化；但是当插值发生变化并不会影响数据对象的值</p><p><font color="red">演示效果:<br><img src="https://img.wenhairu.com/images/2021/05/06/aITVt.md.png" alt="result2.3"></font></p><h3 id="2-4-v-pre指令的使用"><a href="#2-4-v-pre指令的使用" class="headerlink" title="2.4 v-pre指令的使用"></a>2.4 v-pre指令的使用</h3><p><strong>v-pre</strong>：原样输出，不进行渲染</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;div&gt;渲染的文本：&#123;&#123;message&#125;&#125;&lt;/div&gt;<br>&lt;div v-pre&gt;原样输出，不进行渲染：&#123;&#123;message&#125;&#125;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><font color="#999AAA"><strong>完整示例</strong>:</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>&lt;h2 v-pre&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span><br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p><font color="red">演示效果:<br><img src="https://img.wenhairu.com/images/2021/05/06/aIX6S.png" alt="result2.4"></font></p><h3 id="2-5-v-cloak指令的使用"><a href="#2-5-v-cloak指令的使用" class="headerlink" title="2.5 v-cloak指令的使用"></a>2.5 v-cloak指令的使用</h3><p><strong>v-cloak</strong>：在整个页面渲染完成之后，才显示内容。</p><p>在vue实例未读出动态数据时使用display隐藏未被渲染的数据，数据渲染成功后标签失去效果。</p><p><font color="#999AAA"><strong>完整示例</strong>:</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;style&gt;<br>[v-cloak]&#123;<br>display: none;<br>&#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;!-- 在某些情况下，我们浏览器可能会直接显示出未编译的Mustache标签 --&gt;<br>&lt;!-- 场景:当网络较慢，网页还在加载 Vue.js ，而导致 Vue 来不及渲染，<br>          这时页面就会显示出 Vue 源代码。 --&gt;<br>    &lt;h2 v-cloak&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>setTimeout(<span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span><br>&#125;<br>&#125;)<br>&#125;,1000)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h2 id="三-动态绑定属性"><a href="#三-动态绑定属性" class="headerlink" title="三.动态绑定属性"></a>三.动态绑定属性</h2><h3 id="3-0-v-bind的基本使用"><a href="#3-0-v-bind的基本使用" class="headerlink" title="3.0 v-bind的基本使用"></a>3.0 v-bind的基本使用</h3><p><strong>v-bind:就是用于绑定数据和元素属性的</strong></p><p>==v-bind语法糖形式==:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!-- 语法糖的写法 --&gt;<br>&lt;img :src=<span class="hljs-string">&quot;imgURL&quot;</span>&gt;<br>&lt;a :href=<span class="hljs-string">&quot;aHref&quot;</span>&gt;百度一下&lt;/a&gt;<br></code></pre></td></tr></table></figure><p><font color="red">完整示例:</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;img v-bind:src=<span class="hljs-string">&quot;imgURL&quot;</span>&gt;<br>&lt;a v-bind:href=<span class="hljs-string">&quot;aHref&quot;</span>&gt;百度一下&lt;/a&gt;<br><br>&lt;!-- 语法糖的写法 --&gt;<br>&lt;img :src=<span class="hljs-string">&quot;imgURL&quot;</span>&gt;<br>&lt;a :href=<span class="hljs-string">&quot;aHref&quot;</span>&gt;百度一下&lt;/a&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span>,<br>imgURL: <span class="hljs-string">&#x27;https://img-blog.csdnimg.cn/20200309131046844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbGlfamFja3Nvbg==,size_16,color_FFFFFF,t_70&#x27;</span>,<br>aHref: <span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span><br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：v-bind 我的理解是表示绑定这个属性，绑定之后，对应的值回去vue实例寻找。相同的，我们还可以绑定图片src属性、超链接的class等属性。</p><h3 id="3-1-v-bind动态绑定class-对象语法"><a href="#3-1-v-bind动态绑定class-对象语法" class="headerlink" title="3.1 v-bind动态绑定class(对象语法)"></a>3.1 v-bind动态绑定class(对象语法)</h3><ul><li>1.在标签中绑定class属性动态获取里面的值,通过判断绑定的class里属性的boolean值来是否展示显示的属性样式<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;style&gt; .active &#123;color: red;&#125; &lt;/style&gt;<br><br>&lt;h2 class=<span class="hljs-string">&quot;title&quot;</span> v-bind:class=<span class="hljs-string">&quot;getClass()&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>&lt;button @click=<span class="hljs-string">&quot;btnClick&quot;</span>&gt;按钮&lt;/button&gt;<br></code></pre></td></tr></table></figure></li><li>2.实现getClass()、btnClick方法通过本方法来实现是否展示当前class绑定的属性<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">   methods: &#123;<br>btnClick: <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br>this.isActive = !this.isActive<br>&#125;,<br>getClass: <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br><span class="hljs-built_in">return</span> &#123;active: this.isActive, line: this.isLine&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><font color="#999AAA"><strong>完整示例</strong>:</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;style&gt;<br>.active &#123;<br>color: red;<br>&#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;!--class属性固定  v-bind:class为后加属性 --&gt;<br>&lt;!-- 对象 v-bind:class=<span class="hljs-string">&quot;&#123;active: isActive, line: isLine&#125; --&gt;</span><br><span class="hljs-string">&lt;!-- &lt;h2 class=&quot;</span>title<span class="hljs-string">&quot; v-bind:class=&quot;</span>&#123;active: isActive, line: isLine&#125;<span class="hljs-string">&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="hljs-string">&lt;!-- 了解 --&gt;</span><br><span class="hljs-string">&lt;h2 class=&quot;</span>title<span class="hljs-string">&quot; v-bind:class=&quot;</span>getClass()<span class="hljs-string">&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="hljs-string">&lt;button @click=&quot;</span>btnClick<span class="hljs-string">&quot;&gt;按钮&lt;/button&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string">&lt;script src=&quot;</span>../js/vue.js<span class="hljs-string">&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">&lt;script&gt; </span><br><span class="hljs-string">const app = new Vue(&#123;</span><br><span class="hljs-string">el: &#x27;#app&#x27;,</span><br><span class="hljs-string">data: &#123;</span><br><span class="hljs-string">message: &#x27;你好啊&#x27;,</span><br><span class="hljs-string">isActive: true,</span><br><span class="hljs-string">isLine: true</span><br><span class="hljs-string">&#125;,</span><br><span class="hljs-string">methods: &#123;</span><br><span class="hljs-string">btnClick: function()&#123;</span><br><span class="hljs-string">this.isActive = !this.isActive</span><br><span class="hljs-string">&#125;,</span><br><span class="hljs-string">getClass: function()&#123;</span><br><span class="hljs-string">return &#123;active: this.isActive, line: this.isLine&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string">&lt;/script&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p><font color="red">演示效果：<br><img src="https://img.wenhairu.com/images/2021/05/06/aIe9C.png" alt="result3.1"></font></p><h3 id="3-2-v-bind动态绑定class-数组语法"><a href="#3-2-v-bind动态绑定class-数组语法" class="headerlink" title="3.2 v-bind动态绑定class(数组语法)"></a>3.2 v-bind动态绑定class(数组语法)</h3><ul><li>数组语法的含义是:class后面跟的是一个数组<br><img src="https://img.wenhairu.com/images/2021/05/10/aT6IS.png" alt="result3.2"></li><li><strong>对象语法</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;h2 class=<span class="hljs-string">&quot;title&quot;</span> :class=<span class="hljs-string">&quot;[active,line]&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>&lt;!-- 如果过于复杂，可以放在一个methods或者computed中 注：getClass是一个计算属性 --&gt;<br>&lt;h2 class=<span class="hljs-string">&quot;title&quot;</span> :class=<span class="hljs-string">&quot;getClass()&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span>,<br>active: <span class="hljs-string">&#x27;aaa&#x27;</span>,<br>line: <span class="hljs-string">&#x27;bbb&#x27;</span><br>&#125;,<br>methods: &#123;<br>getClass: <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br><span class="hljs-built_in">return</span> [this.active,this.line]<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-3-案例作业"><a href="#3-3-案例作业" class="headerlink" title="3.3 案例作业"></a>3.3 案例作业</h3><ul><li>实现列表展示点击相应列表里的元素高亮</li><li><strong>步骤</strong><blockquote><p>1.在vue实例中的data创建一个数组<br>2.在vue范围内使用v-for实现数组的基本展示<br>3.在data中创建一个cuerys属性并赋一个初始值,实现与索引值的比较<br>4.style中创建class元素.active，并赋值一个颜色，在循环元素标签内使用v-bind动态绑定.active获取cuerys并与index索引比较<br>5.在元素中绑定点击事件方法，传入索引参数<br>6.实现点击事件方法，将索引参数赋值给cuerys属性</p></blockquote></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;style&gt;<br>.active&#123;<br>color: <span class="hljs-comment">#FF0000;</span><br>&#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;ul&gt;<br>&lt;li v-for=<span class="hljs-string">&quot;(item,index) in movies&quot;</span> :class=<span class="hljs-string">&quot;&#123;active:cuerys===index&#125;&quot;</span> <br>@click=<span class="hljs-string">&quot;changeStyle(index)&quot;</span> &gt;&#123;&#123;index&#125;&#125;-&#123;&#123;item&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>cuerys:0,<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span>,<br>movies: [<span class="hljs-string">&#x27;海贼王&#x27;</span>,<span class="hljs-string">&#x27;奥特曼&#x27;</span>,<span class="hljs-string">&#x27;狐狸哇&#x27;</span>]<br>&#125;,<br>methods: &#123;<br>changeStyle :<span class="hljs-keyword">function</span>(index)&#123;<br>this.cuerys = index; <br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h3 id="3-4-v-bind动态绑定style"><a href="#3-4-v-bind动态绑定style" class="headerlink" title="3.4 v-bind动态绑定style"></a>3.4 v-bind动态绑定style</h3><p><font color="orange">完整案例</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;!-- <span class="hljs-string">&#x27;50px&#x27;</span>必须加上单引号，否则是当作变量去解析 --&gt;<br>   &lt;h2 :style=<span class="hljs-string">&quot;&#123;fontSize:&#x27;50px&#x27;&#125;&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>   &lt;!-- 数组用法 --&gt;<br>   &lt;h2 :style=<span class="hljs-string">&quot;[getstyle]&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span>,<br>getstyle: &#123;fontSize:<span class="hljs-string">&#x27;100px&#x27;</span>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h2 id="四-计算属性"><a href="#四-计算属性" class="headerlink" title="四.计算属性"></a>四.计算属性</h2><ul><li>计算属性就是当其依赖属性的值发生变化时，这个属性的值会自动更新，与之相关的DOM部分也会同步自动更新。</li></ul><h3 id="4-0-计算属性的基本使用"><a href="#4-0-计算属性的基本使用" class="headerlink" title="4.0 计算属性的基本使用"></a>4.0 计算属性的基本使用</h3><ul><li>vue中通过computed 选项定义计算属性，计算属性 类似于 methods 选项中定义的函数，计算属性 会进行缓存，只在相关响应式依赖发生改变时它们才会重新求值。函数每次都会执行函数体进行计算。</li></ul><p><font color="orange">完整案例</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>   &lt;!-- mustache写法 --&gt;<br>   &lt;h2&gt;&#123;&#123;firstName + <span class="hljs-string">&#x27; &#x27;</span> + lastName&#125;&#125;&lt;/h2&gt;<br>   &lt;h2&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;&lt;/h2&gt;<br>   <br>   &lt;!-- 普通方法写法 --&gt;<br>   &lt;h2&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;<br>   &lt;!-- 计算属性写法 --&gt;<br>   &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span>,<br>firstName: <span class="hljs-string">&#x27;haha&#x27;</span>,<br>lastName: <span class="hljs-string">&#x27;heihei&#x27;</span><br>&#125;,<br>computed: &#123; //计算属性<br>//当computed中的函数所依赖的属性没有发生改变，那么调用当前函数的时候会从缓存中读取(不会再次计算)<br>fullName: <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br><span class="hljs-built_in">return</span> this.firstName + <span class="hljs-string">&#x27; &#x27;</span> + this.lastName<br>&#125;<br>&#125;,<br>methods: &#123;<br>getFullName: <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br><span class="hljs-built_in">return</span> this.firstName + <span class="hljs-string">&#x27; &#x27;</span> + this.lastName<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p><em>所有的计算属性都以函数的形式写在 Vue 实例内的 comput 选项内，最终返回计算后的结果，即我们可以把一些计算的过程写到一个计算属性——comput 选项内中去，然后让它动态地计算</em></p><h3 id="4-1-计算属性的复杂操作"><a href="#4-1-计算属性的复杂操作" class="headerlink" title="4.1 计算属性的复杂操作"></a>4.1 计算属性的复杂操作</h3><ul><li>当我们创建数组对象并想操作某个对象里的某个元素的和时候，我们要用计算属性来实现要怎么做呢?<br><font color="orange">完整案例</font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;!-- 计算属性拿到总价格 --&gt;<br>    &lt;h2&gt;总价格:&#123;&#123;totalPrice&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span>,<br>books: [<br>&#123;id: 110,name: <span class="hljs-string">&#x27;haha&#x27;</span>,price: 113&#125;,<br>&#123;id: 111,name: <span class="hljs-string">&#x27;heihei&#x27;</span>,price: 114&#125;,<br>&#123;id: 112,name: <span class="hljs-string">&#x27;oo&#x27;</span>,price: 115&#125;<br>]<br>&#125;,<br>computed: &#123;<br>totalPrice: <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br>    &lt;!-- 计算总价格 --&gt;<br><span class="hljs-built_in">let</span> result = 0<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">let</span> i = 0;i&lt;this.books.length;i++)&#123;<br>result += this.books[0].price<br>&#125;<br><span class="hljs-built_in">return</span> result<br><br>&lt;!-- es6语法 --&gt;<br>/* <span class="hljs-keyword">for</span>(<span class="hljs-built_in">let</span> i <span class="hljs-keyword">in</span> this.books)&#123;<br><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">let</span> book of this.books)&#123;<br><br>&#125; */<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-2-原生-setter和getter"><a href="#4-2-原生-setter和getter" class="headerlink" title="4.2 (原生)setter和getter"></a>4.2 (原生)setter和getter</h3><ul><li>概述<blockquote><p>1.一般方法有 getter(取值)和 setter(赋值)两种，计算属性默认只有 getter；<br>2.不过，如果你要强行设置，自然也可以让其拥有 setter 功能；</p></blockquote></li><li>手动创建setter和getter方法，接下来让我们看看<font color="orange">完整案例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>   &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>firstName: <span class="hljs-string">&#x27;haha&#x27;</span>,<br>lastName: <span class="hljs-string">&#x27;heihei&#x27;</span><br>&#125;,<br>computed: &#123;<br>fullName: &#123;<br>//计算属性一般是没有<span class="hljs-built_in">set</span>方法的，只读属性<br><span class="hljs-built_in">set</span>: <span class="hljs-keyword">function</span>(newValue)&#123;<br>const name = newValue.split(<span class="hljs-string">&#x27; &#x27;</span>);<br>this.firstName = name[0];<br>this.lastName = name[1];<br>&#125;,<br>get: <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br><span class="hljs-built_in">return</span> this.firstName + <span class="hljs-string">&#x27; &#x27;</span> + this.lastName<br>&#125;<br>&#125;<br>//简单写法<br>/* fullName: <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br><span class="hljs-built_in">return</span> this.firstName + <span class="hljs-string">&#x27; &#x27;</span> + this.lastName<br>&#125; */<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></font></li></ul><h3 id="4-3-computed和methods区别"><a href="#4-3-computed和methods区别" class="headerlink" title="4.3 computed和methods区别"></a>4.3 computed和methods区别</h3><ul><li><strong>区别</strong><blockquote><p>1.计算属性一般就是用来通过其他的数据计算出一个新数据，而且它有一个好处就是它把新的数据缓存下来了<br>2.如果data中相关的数据没有发生改变，那么再次调用它的时候会返回它的缓存的数据，这就极大的提高了我们程序的性能<br>3.如果写在methods里，每次调用都会重新计算，都是一次新的调用，不会缓存，所以用计算属性比较好，因为有缓存</p></blockquote></li></ul><p><font color="orange">完整案例</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;!-- 1.直接拼接 --&gt;<br>&lt;h2&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;&lt;/h2&gt;<br>&lt;!-- 2.通过定义methods --&gt;<br>&lt;h2&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;<br>&lt;!-- 3.通过定义computed --&gt;<br>&lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>firstName: <span class="hljs-string">&#x27;haha&#x27;</span>,<br>lastName: <span class="hljs-string">&#x27;heihei&#x27;</span><br>&#125;,methods: &#123;<br>getFullName: <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br><span class="hljs-built_in">return</span> this.firstName + <span class="hljs-string">&#x27; &#x27;</span> + this.lastName<br>&#125; <br>&#125;,<br>computed: &#123;<br>fullName: <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br><span class="hljs-built_in">return</span> this.firstName + <span class="hljs-string">&#x27; &#x27;</span> + this.lastName<br>&#125; <br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h2 id="五-ES6补充"><a href="#五-ES6补充" class="headerlink" title="五.ES6补充"></a>五.ES6补充</h2><p><strong>JS中作用域有：全局作用域、函数作用域。没有块作用域的概念。ECMAScript 6(简称ES6)中新增了块级作用域。块作用域由 { } 包括，if语句和for语句里面的{ }也属于块作用域。</strong></p><h3 id="5-0-块级作用域"><a href="#5-0-块级作用域" class="headerlink" title="5.0 块级作用域"></a>5.0 块级作用域</h3><ul><li>var、let、const的区别<blockquote><p>1.var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问<br>2.let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问<br>3.const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改</p></blockquote></li><li><font color="orange">完整案例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;button&gt;按钮1&lt;/button&gt;<br>&lt;button&gt;按钮2&lt;/button&gt;<br>&lt;button&gt;按钮3&lt;/button&gt;<br>&lt;button&gt;按钮4&lt;/button&gt;<br>&lt;button&gt;按钮5&lt;/button&gt;<br>&lt;script&gt;<br>//ES5之前因为<span class="hljs-keyword">if</span>和<span class="hljs-keyword">for</span>没有块级作用域的概念，所以在很多时候，<br>//我们都必须借助于<span class="hljs-keyword">function</span>的作用域来解决应用外面变量的问题<br>//ES6中加入了<span class="hljs-built_in">let</span>他是有<span class="hljs-keyword">if</span> <span class="hljs-keyword">for</span>的作用域<br>var name = <span class="hljs-string">&#x27;why&#x27;</span>;<br><span class="hljs-keyword">function</span> abc(bbb)&#123;<br>console.log(bbb);<br>&#125;<br>abc(name);<br>name = <span class="hljs-string">&#x27;haha&#x27;</span>;<br><br>/* var btns = document.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>);<br><span class="hljs-keyword">for</span>(var i=0;i&lt;btns.length;i++)&#123;<br>(<span class="hljs-keyword">function</span>(num)&#123;<br>btns[i].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br>console.log(<span class="hljs-string">&#x27;第&#x27;</span> + num + <span class="hljs-string">&#x27;个按钮被点击&#x27;</span>);<br>&#125;)<br>&#125;)(i)<br>&#125; */<br><br>var btns = document.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">let</span> i=0;i&lt;btns.length;i++)&#123;<br>(<span class="hljs-keyword">function</span>(num)&#123;<br>btns[i].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br>console.log(<span class="hljs-string">&#x27;第&#x27;</span> + num + <span class="hljs-string">&#x27;个按钮被点击&#x27;</span>);<br>&#125;)<br>&#125;)(i)<br>&#125;<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></font></li></ul><h3 id="5-1-const的使用"><a href="#5-1-const的使用" class="headerlink" title="5.1 const的使用"></a>5.1 const的使用</h3><ul><li><font color="orange">完整案例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;script&gt;<br>//1.注意一:一但给const修饰的标识符被赋值后，不能修改<br>/* const name = <span class="hljs-string">&#x27;why&#x27;</span>;<br>name = <span class="hljs-string">&#x27;haha&#x27;</span>; */<br><br>//2.注意二:在使用const定义标识符，必须进行赋值<br>//const name;<br><br>//3.注意三:常量的含义是指向的对象不能修改，但是可以改变对象内部的属性<br>const obj = &#123;<br>name: <span class="hljs-string">&#x27;haha&#x27;</span>,<br>age: 18<br>&#125;<br><br>obj.name = <span class="hljs-string">&#x27;heihei&#x27;</span>;<br>obj.age = 12<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></font></li></ul><h3 id="5-2-对象字面量增强写法"><a href="#5-2-对象字面量增强写法" class="headerlink" title="5.2 对象字面量增强写法"></a>5.2 对象字面量增强写法</h3><ul><li>当我们想用ES6的增强写法时候<blockquote><p>在定义属性时候可以省略value，需要注意的是key、value的名字必须一致<br>在定义方法的时候可以直接省略function关键字</p></blockquote></li><li><font color="orange">完整案例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>   &lt;script&gt;<br>   /* const obj = new Object();<br>   <br>   const obj = &#123;<br>   name: <span class="hljs-string">&#x27;why&#x27;</span>,<br>   age: 18,<br>   run: <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br>   console.log(<span class="hljs-string">&#x27;在奔跑&#x27;</span>);<br>   &#125;<br>   &#125; */<br>   <br>   //1.属性的增强写法<br>   const name = <span class="hljs-string">&#x27;why&#x27;</span>;<br>   const age = 18;<br>   const height = 1.88;<br>   <br>   //ES5写法<br>   /* const obj = &#123;<br>   name: name,<br>   age: age,<br>   height: height<br>   &#125; */<br>   <br>   //ES6<br>   /* const obj = &#123;<br>   name,<br>   age,<br>   height<br>   &#125; */<br>   <br>   //ES6 函数增强写法<br>   const obj = &#123;<br>   <span class="hljs-function"><span class="hljs-title">run</span></span>() &#123;<br>   <br>   &#125;<br>   &#125;<br>   &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></font></li></ul><h3 id="5-3-箭头函数的使用"><a href="#5-3-箭头函数的使用" class="headerlink" title="5.3 箭头函数的使用"></a>5.3 箭头函数的使用</h3><ul><li><p>1.箭头函数：也是一种定义函数的方式</p><blockquote><p>1.定义函数的方式：function</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">const aaa = <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2.对象字面量中定义函数</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">const bbb = &#123;<br>bbb:<span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;&#125;,<br>ccc:<span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;&#125;<br>&#125;<br>```  <br>  &gt; 3.ES6中的箭头函数(const ddd = (参数列表) =&gt; &#123;&#125;)<br>``` bash<br>const ddd = () =&gt; &#123;<br><br>&#125; <br></code></pre></td></tr></table></figure></li><li><p>2.参数问题</p><blockquote><p>1.放入两个参数</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">const sum = (num1,num2) =&gt; &#123;<br><span class="hljs-built_in">return</span> num1 + num2<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2.放入一个参数</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">const power = num1 =&gt; &#123;<br><span class="hljs-built_in">return</span> num1 * num1 <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>3.函数代码块中有多行代码时</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">const <span class="hljs-built_in">test</span> = () =&gt; &#123;<br>//1.打印hello world<br>console.log(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>//2.打印 hello vuejs<br>console.log(<span class="hljs-string">&#x27;hello vuejs&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>4.函数代码块中只有一行代码 const  mul = (num1,num2) =&gt; { return num1 + num2 }</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">const mul = (num1,num2) =&gt; num1 + num2 <br></code></pre></td></tr></table></figure></li></ul><h2 id="六-事件监听"><a href="#六-事件监听" class="headerlink" title="六.事件监听"></a>六.事件监听</h2><h3 id="6-0-v-on的基本使用"><a href="#6-0-v-on的基本使用" class="headerlink" title="6.0 v-on的基本使用"></a>6.0 v-on的基本使用</h3><ul><li>用法：v-on是用来给目标元素绑定事件的，事件的类型由参数决定。接下来，将举一个v-on用法的小例子。代码如下。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>   &lt;h2&gt;&#123;&#123;counter&#125;&#125;&lt;/h2&gt;<br>   //绑定click事件，当点击button时，会执行counter属性相应改变<br>   &lt;button v-on:click=<span class="hljs-string">&quot;counter++&quot;</span>&gt;+&lt;/button&gt;<br>   &lt;button v-on:click=<span class="hljs-string">&quot;counter--&quot;</span>&gt;-&lt;/button&gt;<br>   <br>   //@click 语法糖的写法<br>   //点击button触发increment方法执行方法<br>   &lt;button @click=<span class="hljs-string">&quot;increment&quot;</span>&gt;+&lt;/button&gt;<br>   &lt;button @click=<span class="hljs-string">&quot;decrement&quot;</span>&gt;-&lt;/button&gt;<br>   <br>   &lt;!-- 方法定义时，我们需要event对象，同时又需要其他参数 --&gt;<br>   &lt;!-- 在调用方式，如何手动的获取浏览器参数的event对象: <span class="hljs-variable">$event</span> --&gt;<br>   &lt;button @click=<span class="hljs-string">&quot;btnClick(&#x27;123&#x27;,<span class="hljs-variable">$event</span>)&quot;</span>&gt;按钮&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>    //定义counter属性<br>counter: 0<br>&#125;,methods: &#123;<br><span class="hljs-function"><span class="hljs-title">increment</span></span>()&#123;<br>    //当前counter方法+1<br>this.counter++<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">decrement</span></span>()&#123;<br>    //当前counter方法-1<br>this.counter--<br>&#125;,<br>btnClick(abc,event)&#123;<br>console.log(abc,event)<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="6-1-v-on的修饰符"><a href="#6-1-v-on的修饰符" class="headerlink" title="6.1 v-on的修饰符"></a>6.1 v-on的修饰符</h3><ul><li>概述：<blockquote><p>@click.stop 修饰符用于阻止事件的冒泡传递<br>@click.prevent 阻止事件的默认行为<br>@click.once 只触发一次回调<br>@keyup 监听某个键盘的键帽</p></blockquote></li><li><font color="orange">完整示例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;!-- 1. .stop修饰符的使用 --&gt;<br>&lt;div @click=<span class="hljs-string">&quot;divClick&quot;</span>&gt;<br>aaa<br>       &lt;button @click.stop=<span class="hljs-string">&quot;btnClick&quot;</span>&gt;按钮&lt;/button&gt;<br>&lt;/div&gt;<br><br>   &lt;!-- 2. .prevent修饰符的使用（阻止默认事件） --&gt;<br>   &lt;form action=<span class="hljs-string">&quot;baidu&quot;</span>&gt;<br>   &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span> @click.prevent=<span class="hljs-string">&quot;submitClick&quot;</span>/&gt;<br>   &lt;/form&gt;<br>   <br>   &lt;!-- 3. 监听某个键盘的键帽 --&gt;<br>   &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> @keyup=<span class="hljs-string">&quot;keyUp&quot;</span>/&gt;<br>   <br>   &lt;!-- 4. .once修饰符的使用 只触发一次回调 --&gt;<br>   &lt;button @click.once=<span class="hljs-string">&quot;btn2Click&quot;</span>&gt;按钮2&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span><br>&#125;,<br>methods: &#123;<br><span class="hljs-function"><span class="hljs-title">divClick</span></span>()&#123;<br>console.log(<span class="hljs-string">&quot;divClick&quot;</span>);<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">btnClick</span></span>()&#123;<br>console.log(<span class="hljs-string">&quot;btnClick&quot;</span>);<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">submitClick</span></span>()&#123;<br>console.log(<span class="hljs-string">&quot;submitClick&quot;</span>);<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">keyUp</span></span>()&#123;<br>console.log(<span class="hljs-string">&quot;keyUp&quot;</span>);<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">btn2Click</span></span>()&#123;<br>console.log(<span class="hljs-string">&quot;btn2Click&quot;</span>);<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></font></li></ul><h2 id="七-条件判断"><a href="#七-条件判断" class="headerlink" title="七.条件判断"></a>七.条件判断</h2><h3 id="7-0-v-if的使用"><a href="#7-0-v-if的使用" class="headerlink" title="7.0 v-if的使用"></a>7.0 v-if的使用</h3><ul><li><strong>v-if的用法</strong>：v-if根据判断条件的值来有条件的渲染元素。如果条件的值为真，则元素出现在页面中。反之则不会出现。</li><li><strong>v-else的用法</strong>：v-else不需要判断条件，但是它的前一个兄弟元素必需是v-if或者v-else-if。它为v-if或v-else-if添加了else块。</li><li><strong>v-else-if的用法</strong>：v-else-if的前一兄弟元素必须有 v-if 或 v-else-if。</li><li><font color="orange">完整示例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;!-- 判断是否为<span class="hljs-literal">true</span> --&gt;<br>&lt;h2 v-if=<span class="hljs-string">&quot;isShow&quot;</span>&gt;<br>&lt;div&gt;aa&lt;/div&gt;<br>&lt;/h2&gt;<br>&lt;h1 v-else&gt;heihei&lt;/h1&gt;<br><br>&lt;!-- 判断score是否&gt;=90 --&gt;<br>&lt;h2 v-if=<span class="hljs-string">&quot;score&gt;=90&quot;</span>&gt;优秀&lt;/h2&gt;<br>&lt;!-- 判断score是否&gt;=80 --&gt;<br>&lt;h2 v-else-if=<span class="hljs-string">&quot;score&gt;=80&quot;</span>&gt;良好&lt;/h2&gt;<br>&lt;!-- 否则 --&gt;<br>&lt;h2 v-else&gt;不及格&lt;/h2&gt;<br><br>&lt;!-- 计算属性:封装写法 --&gt;<br>&lt;h1&gt;&#123;&#123;result&#125;&#125;&lt;/h1&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>isShow: <span class="hljs-literal">true</span>,<br>score: 80<br>&#125;,<br>computed: &#123;<br><span class="hljs-function"><span class="hljs-title">result</span></span>()&#123;<br><span class="hljs-built_in">let</span> showMessage = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span>(this.score&gt;=90)&#123;<br>showMessage = <span class="hljs-string">&#x27;优秀&#x27;</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(this.score&gt;=80)&#123;<br>showMessage = <span class="hljs-string">&#x27;良好&#x27;</span>;<br>&#125;<br><span class="hljs-built_in">return</span> showMessage<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></font></li></ul><h3 id="7-1-用户登录切换案例"><a href="#7-1-用户登录切换案例" class="headerlink" title="7.1 用户登录切换案例"></a>7.1 用户登录切换案例</h3><ul><li><p>概述</p><blockquote><p>label <strong>for</strong>=”username”：实现点击“密码”光标也能锁定输入框<br>key=”email”：可以实现当前input的唯一性</p></blockquote></li><li><p><font color="orange">完整示例</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;span v-if=<span class="hljs-string">&quot;isUser&quot;</span>&gt;<br>&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;用户账号&lt;/label&gt;&lt;!-- key不同时可以阻止输入框切换时复用 --&gt;<br>&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;username&quot;</span> placeholder=<span class="hljs-string">&quot;用户账号&quot;</span> key=<span class="hljs-string">&quot;username&quot;</span>/&gt;<br>&lt;/span&gt;<br>&lt;span v-else&gt;<br>&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;邮箱&lt;/label&gt;<br>&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;email&quot;</span> placeholder=<span class="hljs-string">&quot;邮箱&quot;</span> key=<span class="hljs-string">&quot;email&quot;</span>/&gt;<br>&lt;/span&gt;<br>&lt;button @click=<span class="hljs-string">&quot;isUser = !isUser&quot;</span>&gt;切换&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>isUser: <span class="hljs-literal">true</span><br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="7-2-v-show的使用"><a href="#7-2-v-show的使用" class="headerlink" title="7.2 v-show的使用"></a>7.2 v-show的使用</h3><ul><li><strong>v-show用法</strong>：判断谋个元素是否显示或隐藏，原理是修改元素的的CSS属性(display)来决定实现显示还是隐藏</li><li><font color="orange">完整示例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;!-- v-if:当条件为<span class="hljs-literal">false</span>时,包含v-if指令的元素，根本就不会存在dom中 --&gt;<br>&lt;h2 v-if=<span class="hljs-string">&quot;isShow&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>&lt;!-- v-show: 当条件为<span class="hljs-literal">false</span>时，v-show只是给我们的元素添加一个行内样式：display:none --&gt;<br>&lt;h2 v-show=<span class="hljs-string">&quot;isShow&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span>,<br>isShow: <span class="hljs-literal">true</span><br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></font></li></ul><h2 id="八-遍历循环"><a href="#八-遍历循环" class="headerlink" title="八.遍历循环"></a>八.遍历循环</h2><h3 id="8-0-v-for的遍历"><a href="#8-0-v-for的遍历" class="headerlink" title="8.0 v-for的遍历"></a>8.0 v-for的遍历</h3><ul><li>我们用 v-for 指令根据一组数组的选项列表进行渲染。v-for 指令需要使用 item in items 形式的特殊语法，items 是源数据数组并且 item 是数组元素迭代的别名。</li><li><font color="orange">完整示例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;!-- 1.在遍历过程中获取索引值(数组) --&gt;<br>&lt;ul&gt;<br>&lt;li v-for=<span class="hljs-string">&quot;(item,index) in names&quot;</span>&gt;&#123;&#123;index&#125;&#125;-&#123;&#123;item&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br><br>&lt;!-- 2.在遍历对象的过程中，如果只是获取一个值，那么获取到的是value --&gt;<br>&lt;ul&gt;<br>&lt;li v-for=<span class="hljs-string">&quot;item in info&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br><br>&lt;!-- 获取key和value 格式: (value,key) --&gt;<br>&lt;ul&gt;<br>&lt;li v-for=<span class="hljs-string">&quot;(value,key) in info&quot;</span>&gt;&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br><br>&lt;!-- 获取key和value,index 格式: (value,key,index) --&gt;<br>&lt;ul&gt;<br>&lt;li v-for=<span class="hljs-string">&quot;(value,key,index) in info&quot;</span>&gt;&#123;&#123;index&#125;&#125;-&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>names: [<span class="hljs-string">&#x27;haha&#x27;</span>,<span class="hljs-string">&#x27;heihei&#x27;</span>,<span class="hljs-string">&#x27;oo&#x27;</span>],<br>info: &#123;<br>name: <span class="hljs-string">&#x27;why&#x27;</span>,<br>age: 18,<br>height: 1.88<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></font></li></ul><h3 id="8-1-有无响应式数组方法使用"><a href="#8-1-有无响应式数组方法使用" class="headerlink" title="8.1 有无响应式数组方法使用"></a>8.1 有无响应式数组方法使用</h3><ul><li><font color="orange">完整示例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;ul&gt;<br>&lt;!-- 绑定属性key,可以提高性能(key绑定的属性要和输出的一一对应) --&gt;<br>&lt;!-- &lt;li v-for=<span class="hljs-string">&quot;item in letters&quot;</span> :key=<span class="hljs-string">&quot;item&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt; --&gt;<br>&lt;li v-for=<span class="hljs-string">&quot;item in letters&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;button @click=<span class="hljs-string">&quot;btnClick&quot;</span>&gt;按钮&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>letters: [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>]<br>&#125;,<br>methods: &#123;<br><span class="hljs-function"><span class="hljs-title">btnClick</span></span>()&#123;<br>//1.push方法<br>//this.letters.push(<span class="hljs-string">&#x27;aaa&#x27;</span>);<br><br>//2.通过索引值修改数组中的元素(无响应式)<br>//this.letters[0] = <span class="hljs-string">&#x27;bbb&#x27;</span>;<br><br>//3.pop()删除数组中最后一个元素  <span class="hljs-built_in">shift</span>()删除数组中第一个元素   unshift()在数组最前面添加元素<br><br>//4. splice作用:删除元素/插入元素/替换元素<br>//删除元素：第二个参数传入你要删除几个元素(如果没有传，就删除后面所有元素)<br>//替换元素：第二个参数，表示我们要替换几个元素<br>//插入元素：第二个参数传入0，并且后面跟上要插入的元素<br><br>//5. sort()排序  reverse()反转<br>//<span class="hljs-built_in">set</span>(要修改的对象,索引值,修改后的值)<br>Vue.set(this.letters,0,<span class="hljs-string">&#x27;bbbbb&#x27;</span>)<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></font></li></ul><h3 id="8-2-书籍购买案例"><a href="#8-2-书籍购买案例" class="headerlink" title="8.2 书籍购买案例"></a>8.2 书籍购买案例</h3><p><img src="https://img.wenhairu.com/images/2021/05/10/aT8lC.png" alt="result8.2"></p><ul><li><font color="orange">完整示例</font></li><li>1.创建style.css样式文件，实现table以及子元素的基本样式<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">table &#123;<br>border: 1px solid <span class="hljs-comment">#e9e9e9;</span><br>border-collapse: collapse;<br>border-spacing: 0;<br>&#125;<br><br>th,td &#123;<br>padding: 8px 16px;<br>border: 1px solid <span class="hljs-comment">#e9e9e9;</span><br>text-align: center;<br>&#125;<br><br>th &#123;<br>background-color: <span class="hljs-comment">#f7f7f7;</span><br>color: <span class="hljs-comment">#5c6b77;</span><br>font-weight: 600;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>2.创建main.js文件，实现vue实例基本属性的编写<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs bash">const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>//基本数组数据<br>books: [<br>&#123;<br>id: 1,<br>name: <span class="hljs-string">&#x27;《算法导论》&#x27;</span>,<br>date: <span class="hljs-string">&#x27;2006-9&#x27;</span>,<br>price: 85.00,<br>count: 1<br>&#125;,&#123;<br>id: 2,<br>name: <span class="hljs-string">&#x27;《UNIX编程艺术》&#x27;</span>,<br>date: <span class="hljs-string">&#x27;2006-2&#x27;</span>,<br>price: 59.00,<br>count: 1<br>&#125;,&#123;<br>id: 3,<br>name: <span class="hljs-string">&#x27;《编程珠玑》&#x27;</span>,<br>date: <span class="hljs-string">&#x27;2008-10&#x27;</span>,<br>price: 39.00,<br>count: 1<br>&#125;,&#123;<br>id: 4,<br>name: <span class="hljs-string">&#x27;《代码大全》&#x27;</span>,<br>date: <span class="hljs-string">&#x27;2006-3&#x27;</span>,<br>price: 128.00,<br>count: 1<br>&#125;<br>]<br>&#125;,<br>methods: &#123;<br>//实现购买书籍数量加减方法<br>decrement(index)&#123;<br>this.books[index].count--<br>&#125;,<br>increment(index)&#123;<br>this.books[index].count++<br>&#125;,<br>//实现书籍移除方法<br>removeHandle(index)&#123;<br>this.books.splice(index,1)<br>&#125;<br>&#125;,<br>computed: &#123;<br>//实现书籍购买总价格<br><span class="hljs-function"><span class="hljs-title">totalPrice</span></span>()&#123;<br>/* <span class="hljs-built_in">let</span> totalPrice = 0;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">let</span> i = 0;i&lt;this.books.length;i++)&#123;<br>totalPrice += this.books[i].price * this.books[i].count<br>&#125;<br><span class="hljs-built_in">return</span> totalPrice */<br><br><span class="hljs-built_in">return</span> this.books.reduce(<span class="hljs-keyword">function</span>(preValue,book)&#123;<br><span class="hljs-built_in">return</span> preValue + book.price * book.count<br>&#125;,0)<br>&#125;<br>&#125;,<br>filters: &#123;<br>//实现价格的显示<br>showPrice(price)&#123;<br><span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;￥&#x27;</span> + price.toFixed(2)<br>&#125;<br>&#125;<br>&#125;)<br><br>//js的高阶函数(filter/map/reduce)<br>//filter中的回调函数有一个要求:必须返回一个boolean值 返回<span class="hljs-literal">true</span>时，函数内部会自动将这次回调的n加入新的数组中，否则过滤掉<br>const nums = [10,20,111,222,444,40,50]<br><br><span class="hljs-built_in">let</span> newNums = nums.filter(n =&gt; n&lt;100).map(n =&gt; n * 2).reduce((pre,n) =&gt; pre + n);<br>console.log(newNums)<br><br>/* <span class="hljs-built_in">let</span> newNums = nums.filter(<span class="hljs-keyword">function</span>(n)&#123;<br><span class="hljs-built_in">return</span> n &lt; 100<br>&#125;).map(<span class="hljs-keyword">function</span>(n)&#123;<br><span class="hljs-built_in">return</span> n * 2<br>&#125;).reduce(<span class="hljs-keyword">function</span>(preValue,n)&#123;<br><span class="hljs-built_in">return</span> preValue + n<br>&#125;,0)<br>console.log(newNums) */<br><br>/* <span class="hljs-built_in">let</span> newNums = nums.filter(<span class="hljs-keyword">function</span>(n)&#123;<br><span class="hljs-built_in">return</span> n &lt; 100;<br>&#125;)<br>console.log(newNums) //newNums 10,20,40,50<br><br>//map函数的使用<br><span class="hljs-built_in">let</span> num2Nums = newNums.map(<span class="hljs-keyword">function</span>(n)&#123;<br><span class="hljs-built_in">return</span> num2Nums * 2;<br>&#125;)<br>console.log(num2Nums)<br><br>//reduce函数的使用(作用对数组中所有内容进行汇总)<br>num2Nums.reduce(<span class="hljs-keyword">function</span>(preValue,n)&#123;<br><span class="hljs-built_in">return</span> preValue + n<br>&#125;,0) */<br></code></pre></td></tr></table></figure></li><li>3.实现index.html页面展示的实现<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;style.css&quot;</span>/&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;div v-if=<span class="hljs-string">&quot;books.length&gt;0&quot;</span>&gt;<br>&lt;table&gt;<br>&lt;thead&gt;<br>&lt;tr&gt;<br>&lt;th&gt;&lt;/th&gt;<br>&lt;th&gt;书籍名称&lt;/th&gt;<br>&lt;th&gt;出版日期&lt;/th&gt;<br>&lt;th&gt;价格&lt;/th&gt;<br>&lt;th&gt;购买数量&lt;/th&gt;<br>&lt;th&gt;操作&lt;/th&gt;<br>&lt;/tr&gt;<br>&lt;/thead&gt;<br>&lt;tbody&gt;<br>&lt;tr v-for=<span class="hljs-string">&quot;(item,index) in books&quot;</span>&gt;<br>&lt;th&gt;&#123;&#123;item.id&#125;&#125;&lt;/th&gt;<br>&lt;th&gt;&#123;&#123;item.name&#125;&#125;&lt;/th&gt;<br>&lt;th&gt;&#123;&#123;item.date&#125;&#125;&lt;/th&gt;<br>&lt;th&gt;&#123;&#123;item.price | showPrice&#125;&#125;&lt;/th&gt;<br>&lt;th&gt;<br>&lt;button @click=<span class="hljs-string">&quot;decrement(index)&quot;</span> :disabled=<span class="hljs-string">&quot;item.count &lt;= 1&quot;</span>&gt;-&lt;/button&gt;<br>    &#123;&#123;item.count&#125;&#125;<br>&lt;button @click=<span class="hljs-string">&quot;increment(index)&quot;</span>&gt;+&lt;/button&gt;<br>&lt;/th&gt;<br>&lt;th&gt;<br>&lt;button @click=<span class="hljs-string">&quot;removeHandle(index)&quot;</span>&gt;移除&lt;/button&gt;<br>&lt;/th&gt;<br>&lt;/tr&gt;<br>&lt;/tbody&gt;<br>&lt;/table&gt;<br>&lt;h2&gt;总价格:&#123;&#123;totalPrice | showPrice&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;h2 v-else&gt;购物车为空&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script src=<span class="hljs-string">&quot;main.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="九-v-model的使用"><a href="#九-v-model的使用" class="headerlink" title="九.v-model的使用"></a>九.v-model的使用</h2><h3 id="9-0-v-model的基本使用"><a href="#9-0-v-model的基本使用" class="headerlink" title="9.0 v-model的基本使用"></a>9.0 v-model的基本使用</h3><ul><li>概念<blockquote><p>1.v-model可以看成是value+input方法的语法糖。<br>2.组件的v-model就是value+input方法的语法糖。<br>3.可以绑定v-model的有：input，checkbox，select，textarea，radio </p></blockquote></li><li><font color="orange">完整示例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;!-- v-model双向绑定 --&gt;<br>&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;message&quot;</span>/&gt;<br>    &#123;&#123;message&#125;&#125;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span><br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></font></li></ul><h3 id="9-1-v-model结合radio"><a href="#9-1-v-model结合radio" class="headerlink" title="9.1 v-model结合radio"></a>9.1 v-model结合radio</h3><p><font color="orange">完整案例</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;<br>&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;radio&quot;</span> id=<span class="hljs-string">&quot;male&quot;</span> name=<span class="hljs-string">&quot;sex&quot;</span> v-model=<span class="hljs-string">&quot;sex&quot;</span>/&gt;男<br>&lt;/label&gt;<br>&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;<br>&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;radio&quot;</span> id=<span class="hljs-string">&quot;female&quot;</span> name=<span class="hljs-string">&quot;sex&quot;</span> v-model=<span class="hljs-string">&quot;sex&quot;</span>/&gt;女<br>&lt;/label&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span>,<br>sex: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h3 id="9-2-v-model结合checkbox"><a href="#9-2-v-model结合checkbox" class="headerlink" title="9.2 v-model结合checkbox"></a>9.2 v-model结合checkbox</h3><p><font color="orange">完整案例</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;!-- 1.checkbox单选框 --&gt;<br>&lt;!-- &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;agree&quot;</span>&gt;<br>&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;agree&quot;</span> v-model=<span class="hljs-string">&quot;isAgree&quot;</span>/&gt;同意协议<br>&lt;/label&gt;<br>&lt;h2&gt;你选择的是：&#123;&#123;isAgree&#125;&#125;&lt;/h2&gt;<br>            &lt;button :disabled=<span class="hljs-string">&quot;!isAgree&quot;</span>&gt;下一步&lt;/button&gt; --&gt;<br><br>            &lt;!-- 2.checkbox多选 --&gt;<br>            &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;<br>&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> value=<span class="hljs-string">&quot;篮球&quot;</span> v-model=<span class="hljs-string">&quot;hobbies&quot;</span>/&gt;篮球<br>&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> value=<span class="hljs-string">&quot;乒乓球&quot;</span> v-model=<span class="hljs-string">&quot;hobbies&quot;</span>/&gt;乒乓球<br>&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> value=<span class="hljs-string">&quot;网球&quot;</span> v-model=<span class="hljs-string">&quot;hobbies&quot;</span>/&gt;网球<br>&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> value=<span class="hljs-string">&quot;羽毛球&quot;</span> v-model=<span class="hljs-string">&quot;hobbies&quot;</span>/&gt;羽毛球<br>&lt;/label&gt;<br>&lt;h2&gt;你选择的爱好:&#123;&#123;hobbies&#125;&#125;&lt;/h2&gt;<br><br>&lt;!-- 值绑定(通过服务器动态显示数据) --&gt;<br>&lt;label v-for=<span class="hljs-string">&quot;item in originHobbies&quot;</span> :<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;<br>&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> :value=<span class="hljs-string">&quot;item&quot;</span> :id=<span class="hljs-string">&quot;item&quot;</span> v-model=<span class="hljs-string">&quot;hobbies&quot;</span>/&gt;&#123;&#123;item&#125;&#125;<br>&lt;/label&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>isAgree: <span class="hljs-literal">false</span>,//单选框<br>hobbies: [], //多选框<br>originHobbies: [<span class="hljs-string">&#x27;篮球&#x27;</span>,<span class="hljs-string">&#x27;足球&#x27;</span>,<span class="hljs-string">&#x27;羽毛球&#x27;</span>]<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h3 id="9-3-v-model结合select"><a href="#9-3-v-model结合select" class="headerlink" title="9.3 v-model结合select"></a>9.3 v-model结合select</h3><p><font color="orange">完整案例</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;!-- select选择一个 --&gt;<br>&lt;select  name=<span class="hljs-string">&quot;abc&quot;</span> v-model=<span class="hljs-string">&quot;fruit&quot;</span>&gt;<br>&lt;option value=<span class="hljs-string">&quot;aaa&quot;</span>&gt;aaa&lt;/option&gt;<br>&lt;option value=<span class="hljs-string">&quot;bbb&quot;</span>&gt;bbb&lt;/option&gt;<br>&lt;option value=<span class="hljs-string">&quot;ccc&quot;</span>&gt;ccc&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;h2&gt;你选择的是:&#123;&#123;fruit&#125;&#125;&lt;/h2&gt;<br><br>&lt;!-- select选择多个 --&gt;<br>&lt;select  name=<span class="hljs-string">&quot;abc&quot;</span> v-model=<span class="hljs-string">&quot;fruits&quot;</span> multiple&gt;<br>&lt;option value=<span class="hljs-string">&quot;aaa&quot;</span>&gt;aaa&lt;/option&gt;<br>&lt;option value=<span class="hljs-string">&quot;bbb&quot;</span>&gt;bbb&lt;/option&gt;<br>&lt;option value=<span class="hljs-string">&quot;ccc&quot;</span>&gt;ccc&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;h2&gt;你选择的是:&#123;&#123;fruits&#125;&#125;&lt;/h2&gt;<br><br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>fruit: <span class="hljs-string">&#x27;bbb&#x27;</span>,<br>fruits: <span class="hljs-string">&#x27;aaa&#x27;</span><br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h3 id="9-4-v-model修饰符使用"><a href="#9-4-v-model修饰符使用" class="headerlink" title="9.4 v-model修饰符使用"></a>9.4 v-model修饰符使用</h3><ul><li>废话不多说，直接上代码<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;!-- 1.修饰符:lazy 失去焦点或回车时进行数据绑定 --&gt;<br>&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> v-model.lazy=<span class="hljs-string">&quot;message&quot;</span>/&gt;<br>&lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br><br>&lt;!-- 2.修饰符: number v-model默认绑定是string，可以使用number进行转换 --&gt;<br>&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;number&quot;</span> v-model.number=<span class="hljs-string">&quot;age&quot;</span> /&gt;<br>&lt;h2&gt;&#123;&#123;age&#125;&#125;-&#123;&#123;typeof age&#125;&#125;&lt;/h2&gt;<br><br>&lt;!-- 3.修饰符: trim去除空格 --&gt;<br>&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> v-model.trim=<span class="hljs-string">&quot;name&quot;</span> /&gt;<br><br>&lt;/div&gt;<br><br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span>,<br>age: 0,<br>name: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="十-组件化开发"><a href="#十-组件化开发" class="headerlink" title="十.组件化开发"></a>十.组件化开发</h2><p><strong>所谓组件化，就是把页面拆分成多个组件，每个组件依赖的 CSS、JS、模板、图片等资源放在一起开发和维护。</strong></p><h3 id="10-0-组件的基本使用"><a href="#10-0-组件的基本使用" class="headerlink" title="10.0 组件的基本使用"></a>10.0 组件的基本使用</h3><ul><li>步骤<blockquote><p>1.创建组件构造器对象</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">   const cpnC = Vue.extend(&#123;<br>template: `<br>&lt;div&gt;<br>&lt;h2&gt;我是标题&lt;/h2&gt;<br>&lt;p&gt;我是内容&lt;/p&gt;<br>&lt;/div&gt;`<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>2.注册组件(不支持驼峰名)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Vue.component(<span class="hljs-string">&#x27;my_cpn&#x27;</span>,cpnC)<br></code></pre></td></tr></table></figure><font color="orange">完整案例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;my_cpn&gt;&lt;/my_cpn&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>//1.创建组件构造器对象<br>const cpnC = Vue.extend(&#123;<br>template: `<br>    &lt;div&gt;<br>    &lt;h2&gt;我是标题&lt;/h2&gt;<br>&lt;p&gt;我是内容&lt;/p&gt;<br>&lt;/div&gt;`<br>&#125;)<br>//2.注册组件(不支持驼峰名)<br>Vue.component(<span class="hljs-string">&#x27;my_cpn&#x27;</span>,cpnC)<br><br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span><br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></font></li></ul><h3 id="10-1-全局和局部组件"><a href="#10-1-全局和局部组件" class="headerlink" title="10.1 全局和局部组件"></a>10.1 全局和局部组件</h3><ul><li><strong>创建组件构造器</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">const cpnC = Vue.extend(&#123;<br>template: `<br>&lt;div&gt;<br>&lt;h2&gt;我是标题&lt;/h2&gt;<br>&lt;p&gt;我是内容&lt;/p&gt;<br>&lt;/div&gt;`<br>&#125;)<br></code></pre></td></tr></table></figure></li><li>注册全局组件(全局组件,意味着可以在多个组件下使用)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Vue.component(<span class="hljs-string">&#x27;mu_cpn&#x27;</span>,cpnC)<br></code></pre></td></tr></table></figure></li><li>注册局部组件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span><br>&#125;,<br>//在vue示例内创建components局部组件<br>components: &#123;<br>//cpn使用组件时的标签名<br>cpn: cpnC<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h3 id="10-2-父组件和子组件"><a href="#10-2-父组件和子组件" class="headerlink" title="10.2 父组件和子组件"></a>10.2 父组件和子组件</h3><ul><li>我们可以把vue示例看作一个父组件，注册的components组件可以看作一个子组件，下面可以看我子父组件的基本演示<blockquote><p>1.我们可以创建两个组件构造器cnpC1(子组件)、cnpC2(父组件)，使cnpC2父组件注册子组件cnpC1</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">   //1.创建第一个组件构造器(子组件)<br>const cpnC1 = Vue.extend(&#123;<br>template:`<br>&lt;div&gt;<br>&lt;h2&gt;我是标题&lt;/h2&gt;<br>&lt;p&gt;我是内容,哈哈哈&lt;/p&gt;<br>&lt;/div&gt;`<br>&#125;)<br><br>//2.创建第二个组件构造器(父组件)<br>const cpnC2 = Vue.extend(&#123;<br>template:`<br>&lt;div&gt;<br>&lt;h2&gt;我是标题&lt;/h2&gt;<br>&lt;p&gt;我是内容,呵呵呵&lt;/p&gt;<br>&lt;cpn1&gt;&lt;/cpn1&gt;<br>&lt;/div&gt;`,<br>components:&#123;<br>cpn1:cpnC1<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>2.在vue实例中的components组件中注册cnpC2</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span><br>&#125;,<br>components:&#123;<br>cpn2: cpnC2<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><strong>注意</strong>：由于cpnC2在vue实例中注册，cpnC1在cpnC2中注册的时候已经把模板中的内容替换成了样式，所以cpnC1和vue实例并没有直接联系。</li></ul><h3 id="10-3-语法糖注册方式"><a href="#10-3-语法糖注册方式" class="headerlink" title="10.3 语法糖注册方式"></a>10.3 语法糖注册方式</h3><ul><li>我们通常注册组件时为局部组件，局部组件可以具备复用性，组件中的数据是被当前组件独享，而不会被其他同样的组件共享。下面看我步骤<blockquote><p>1.我们在vue实例中创建components组件，并定义一个组件cpn</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">components:&#123;<br>   //es6写法<br>cpn<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2.创建cpn组件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">const cpn = &#123;<br>template:<span class="hljs-string">&#x27;#cpn&#x27;</span>,<br><span class="hljs-function"><span class="hljs-title">data</span></span>()&#123;<br><span class="hljs-built_in">return</span> &#123;<br>titlt: <span class="hljs-string">&#x27;我是标题&#x27;</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>3.创建template标签模板</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;template id=<span class="hljs-string">&quot;cpn&quot;</span>&gt;<br>&lt;div&gt;<br>&lt;h2&gt;&#123;&#123;titlt&#125;&#125;&lt;/h2&gt;<br>&lt;p&gt;我是内容,哈哈哈&lt;/p&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><blockquote><p>4.在vue势力范围内引用cpn标签</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;cpn&gt;&lt;/cpn&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></li><li>为了更好的明白，直接上图<br><img src="https://img.wenhairu.com/images/2021/05/12/aTddn.png" alt="result10.3"></li></ul><h3 id="10-4-组件通信-父传子数据"><a href="#10-4-组件通信-父传子数据" class="headerlink" title="10.4 组件通信-父传子数据"></a>10.4 组件通信-父传子数据</h3><ul><li>在vue实例中创建data，并创建一个数组，实现components组件并创建子组件，我们需要将data中的数组传递给子组件进行展示，看我步骤：<blockquote><p>1.创建组件cpn</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">const cpn = &#123;<br>template:<span class="hljs-string">&#x27;#cpn&#x27;</span>,<br>//props:[<span class="hljs-string">&#x27;cmovies&#x27;</span>,<span class="hljs-string">&#x27;cmessage&#x27;</span>],<br>props:&#123;<br>//1.类型限制<br>/* cmovies: Array,<br>cmessage: String */<br><br>//2.提供一些默认值<br>cmessage:&#123;<br><span class="hljs-built_in">type</span>:String,<br>default: <span class="hljs-string">&#x27;aaaaaa&#x27;</span><br>&#125;,<br>//类型是对象或者数组时,默认值必须是一个函数<br>cmovies:&#123;<br><span class="hljs-built_in">type</span>:Array,<br><span class="hljs-function"><span class="hljs-title">default</span></span>()&#123;<br><span class="hljs-built_in">return</span> []<br>&#125;<br>&#125;<br><br>&#125;,<br><span class="hljs-function"><span class="hljs-title">data</span></span>()&#123;<span class="hljs-built_in">return</span>&#123;&#125;&#125;,<br>methods:&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2.并实现template模板，prpos(父组件通过props向下传递数据给子组件。注：组件中的数据共有三种形式：data、props、computed)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;template id=<span class="hljs-string">&quot;cpn&quot;</span>&gt;<br>&lt;div&gt;<br>&lt;ul&gt;<br>&lt;li v-for=<span class="hljs-string">&quot;item in cmovies&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>&#123;&#123;cmessage&#125;&#125;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><blockquote><p>3.在vue实例范围内引用cpn组件，并绑定vue的data中数组实现父组件数据传递到子组件展示</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;cpn v-bind:cmovies=<span class="hljs-string">&quot;movies&quot;</span>&gt;&lt;/cpn&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="10-5-组件通信-父传子数据"><a href="#10-5-组件通信-父传子数据" class="headerlink" title="10.5 组件通信-父传子数据"></a>10.5 组件通信-父传子数据</h3><ul><li><p>接下来我们通过一个例子，说明子组件如何向父组件传递值：我有四个组件按钮，点击将当前按钮信息传递到父实例方法中打印<br><img src="https://img.wenhairu.com/images/2021/05/12/aTsFA.png" alt="result10.4"></p><blockquote><p>1.vue实例中创建components组件并实现cpn组件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">components: &#123;<br>   cpn<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2.实现cpn组件，创建data并返回一个数组</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">const cpn = &#123;<br>  template: <span class="hljs-string">&#x27;#cpn&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">data</span></span>() &#123;<br> <span class="hljs-built_in">return</span> &#123;<br>categories:[<br>&#123;id: <span class="hljs-string">&#x27;aaa&#x27;</span>,name: <span class="hljs-string">&#x27;热门推荐&#x27;</span>&#125;,<br>&#123;id: <span class="hljs-string">&#x27;bbb&#x27;</span>,name: <span class="hljs-string">&#x27;手机数码&#x27;</span>&#125;,<br>&#123;id: <span class="hljs-string">&#x27;ccc&#x27;</span>,name: <span class="hljs-string">&#x27;家用家电&#x27;</span>&#125;,<br>&#123;id: <span class="hljs-string">&#x27;ddd&#x27;</span>,name: <span class="hljs-string">&#x27;电脑办公&#x27;</span>&#125;,<br>]<br> &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>3.实现template模板，v-for循环数组按钮，并绑定click点击事件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;template id=<span class="hljs-string">&quot;cpn&quot;</span>&gt;<br>  &lt;div&gt;<br> &lt;button v-for=<span class="hljs-string">&quot;item in categories&quot;</span> @click=<span class="hljs-string">&quot;btnClick(item)&quot;</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><blockquote><p>4.cpn中创建methods实现btnClick(item)方法，通过this.$emit发射当前按钮信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">methods:&#123;<br>//子组件向父组件传递数据需要通过(this.<span class="hljs-variable">$emit</span>)发射数据，父组件监听数据<br>btnClick(item)&#123;<br>//发射组件(自定义事件)<br>this.<span class="hljs-variable">$emit</span>(<span class="hljs-string">&#x27;itemclick&#x27;</span>,item)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>5.引用cpn组件，绑定点击事件@itemclick=”cpnClick”</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  &lt;cpn @itemclick=<span class="hljs-string">&#x27;cpnClick&#x27;</span>&gt;&lt;/cpn&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><blockquote><p>6.在vue实例中的methods方法中实现cpnClick方法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">methods:&#123;<br>   cpnClick(item)&#123;<br>  console.log(<span class="hljs-string">&#x27;cpnClick&#x27;</span>,item)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><font color="orange">完整案例</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;cpn @itemclick=<span class="hljs-string">&#x27;cpnClick&#x27;</span>&gt;&lt;/cpn&gt;<br>&lt;/div&gt;<br><br>&lt;template id=<span class="hljs-string">&quot;cpn&quot;</span>&gt;<br>&lt;div&gt;<br>&lt;button v-for=<span class="hljs-string">&quot;item in categories&quot;</span> @click=<span class="hljs-string">&quot;btnClick(item)&quot;</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br><br>&lt;script&gt;<br>const cpn = &#123;<br>template: <span class="hljs-string">&#x27;#cpn&#x27;</span>,<br><span class="hljs-function"><span class="hljs-title">data</span></span>() &#123;<br><span class="hljs-built_in">return</span> &#123;<br>categories:[<br>&#123;id: <span class="hljs-string">&#x27;aaa&#x27;</span>,name: <span class="hljs-string">&#x27;热门推荐&#x27;</span>&#125;,<br>&#123;id: <span class="hljs-string">&#x27;bbb&#x27;</span>,name: <span class="hljs-string">&#x27;手机数码&#x27;</span>&#125;,<br>&#123;id: <span class="hljs-string">&#x27;ccc&#x27;</span>,name: <span class="hljs-string">&#x27;家用家电&#x27;</span>&#125;,<br>&#123;id: <span class="hljs-string">&#x27;ddd&#x27;</span>,name: <span class="hljs-string">&#x27;电脑办公&#x27;</span>&#125;,<br>]<br>&#125;<br>&#125;,<br>methods:&#123;<br>//子组件向父组件传递数据需要通过(this.<span class="hljs-variable">$emit</span>)发射数据，父组件监听数据<br>btnClick(item)&#123;<br>//发射组件(自定义事件)<br>this.<span class="hljs-variable">$emit</span>(<span class="hljs-string">&#x27;itemclick&#x27;</span>,item)<br>&#125;<br>&#125;<br>&#125; <br><br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span><br>&#125;,<br>components: &#123;<br>cpn<br>&#125;,<br>methods:&#123;<br>cpnClick(item)&#123;<br>console.log(<span class="hljs-string">&#x27;cpnClick&#x27;</span>,item)<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h3 id="10-6-组件访问-父访问子"><a href="#10-6-组件访问-父访问子" class="headerlink" title="10.6 组件访问-父访问子"></a>10.6 组件访问-父访问子</h3><ul><li>案例：vue父组件访问子组件cpn数据，两种实现方法，一种<font color="orange">$children</font>实现，一种<font color="orange">$refs</font>实现components组件并创建子组件，我们需要将data中的数组传递给子组件进行展示，看我步骤：<br><img src="https://img.wenhairu.com/images/2021/05/12/aT3TG.png" alt="result10.6"> </li><li>$children(父组件访问子组件,这个拿所有的子组件信息)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">console.log(this.<span class="hljs-variable">$children</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">let</span> c of this.<span class="hljs-variable">$children</span>)&#123;<br>console.log(c.name);<br>c.showMessage();<br>&#125;<br></code></pre></td></tr></table></figure></li><li>$refs(对象类型，默认是一个空的对象,在标签上加入ref=’aaa’)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">console.log(this.<span class="hljs-variable">$refs</span>.aaa.name)<br></code></pre></td></tr></table></figure><img src="https://img.wenhairu.com/images/2021/05/12/aTrvv.png" alt="result10.6.0"></li></ul><h3 id="10-7-组件访问-子访问父-了解"><a href="#10-7-组件访问-子访问父-了解" class="headerlink" title="10.7 组件访问-子访问父(了解)"></a>10.7 组件访问-子访问父(了解)</h3><ul><li>$parent(访问父组件)，在vue实例创建子组件，子组件通过$parent访问父组件信息</li><li>this.$root(访问根元素)，直接访问vue实例信息<br><img src="https://img.wenhairu.com/images/2021/05/13/aVgjU.png" alt="result10.7"></li></ul><h2 id="十一-组件化高级-slot"><a href="#十一-组件化高级-slot" class="headerlink" title="十一.组件化高级(slot)"></a>十一.组件化高级(slot)</h2><h3 id="11-0-插槽基本使用"><a href="#11-0-插槽基本使用" class="headerlink" title="11.0 插槽基本使用"></a>11.0 插槽基本使用</h3><ul><li><p><strong>个人理解：</strong><br>组件插槽的目的是为了让我们封装的组件更加具有扩展性。</p></li><li><p>接下来我们注册一个组件，通过组件扩展其他功能。<br><img src="https://img.wenhairu.com/images/2021/05/13/aVsS6.png" alt="result11.0"></p></li><li><p><font color="orange">完整案例</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 组件插槽的目的是为了让我们封装的组件更加具有扩展性 --&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;cpn&gt;&lt;button&gt;按钮&lt;/button&gt;&lt;/cpn&gt;<br>&lt;cpn&gt;&lt;li&gt;haha&lt;/li&gt;&lt;/cpn&gt;<br>&lt;cpn&gt;&lt;/cpn&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br><br>&lt;template id=<span class="hljs-string">&quot;cpn&quot;</span>&gt;<br>&lt;div&gt;<br>&lt;h2&gt;我是组件&lt;/h2&gt;<br>&lt;p&gt;我是组件哈哈哈&lt;/p&gt;<br>&lt;!-- 在&lt;slot&gt;中放入默认值，如果&lt;cpn&gt;标签中有其他标签时则会覆盖&lt;slot&gt;中的标签 --&gt;<br>&lt;!-- 如果有多个值，同时放入到组件进行替换时,一起作为替换元素 --&gt;<br>&lt;slot&gt;&lt;button&gt;按钮&lt;/button&gt;&lt;/slot&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span><br>&#125;,<br>components:&#123;<br>cpn:&#123;<br>template:<span class="hljs-string">&#x27;#cpn&#x27;</span><br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="11-1-具名插槽的使用"><a href="#11-1-具名插槽的使用" class="headerlink" title="11.1 具名插槽的使用"></a>11.1 具名插槽的使用</h3><ul><li><p>简单理解就是 给每一个slot一个name属性，引用组件时通过slot=”name”来替换组件中的某个slot。</p></li><li><p><font color="orange">完整案例</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;!-- 后面推荐使用v-slot --&gt;<br>&lt;cpn&gt;&lt;span slot=<span class="hljs-string">&quot;center&quot;</span>&gt;标题&lt;/span&gt;&lt;/cpn&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br><br>&lt;template id=<span class="hljs-string">&quot;cpn&quot;</span>&gt;<br>&lt;div&gt;<br>&lt;slot name=<span class="hljs-string">&quot;left&quot;</span>&gt;&lt;span&gt;左边&lt;/span&gt;&lt;/slot&gt;<br>&lt;slot name=<span class="hljs-string">&quot;center&quot;</span>&gt;&lt;span&gt;中间&lt;/span&gt;&lt;/slot&gt;<br>&lt;slot name=<span class="hljs-string">&quot;right&quot;</span>&gt;&lt;span&gt;右边&lt;/span&gt;&lt;/slot&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span><br>&#125;,<br>components:&#123;<br>cpn:&#123;<br>template:<span class="hljs-string">&#x27;#cpn&#x27;</span><br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="11-2-编译作用域"><a href="#11-2-编译作用域" class="headerlink" title="11.2 编译作用域"></a>11.2 编译作用域</h3><ul><li>我们通过v-show指令来进行作用域的演示<blockquote><p>v-show=”isShow”整体在vue模板写的，作用域在vue实例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;!-- v-show=<span class="hljs-string">&quot;isShow&quot;</span>整体在vue模板写的，作用域在vue实例 --&gt;<br>&lt;cpn v-show=<span class="hljs-string">&quot;isShow&quot;</span>&gt;&lt;/cpn&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><blockquote><p>v-show作用域在template中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;template id=<span class="hljs-string">&quot;cpn&quot;</span>&gt;<br>&lt;div&gt;<br>&lt;h2&gt;hahaha&lt;/h2&gt;<br>&lt;!-- 作用域在组件 --&gt;<br>&lt;button v-show=<span class="hljs-string">&quot;isShow&quot;</span>&gt;按钮&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><strong>注意：</strong>由于cpn作用域在vue实例中，所以isShow属性是在vue实例中拿的<br><img src="https://img.wenhairu.com/images/2021/05/13/aVrYu.png" alt="result11.2"></li></ul><h3 id="11-3-作用于插槽的案例"><a href="#11-3-作用于插槽的案例" class="headerlink" title="11.3 作用于插槽的案例"></a>11.3 作用于插槽的案例</h3><ul><li><p>组件中定义一个数组，在对数组遍历中对每个元素添加 ‘-‘ 拼接起来<br><img src="https://img.wenhairu.com/images/2021/05/13/aVtyh.png" alt="result11.3"></p></li><li><p><strong>slot-scope：</strong>目的是获取自组件中的pLanguages<br><img src="https://img.wenhairu.com/images/2021/05/13/aVL8D.png" alt="result11.3.1"></p></li><li><p><font color="orange">完整案例</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;cpn&gt;&lt;/cpn&gt;<br>&lt;cpn&gt;<br>&lt;!-- 目的是获取自组件中的pLanguages --&gt;<br>&lt;!-- slot-scope写法已过时需要修改 --&gt;<br>&lt;template slot-scope=<span class="hljs-string">&quot;slot&quot;</span>&gt;<br>&lt;!-- &lt;span v-for=<span class="hljs-string">&quot;item in slot.data&quot;</span>&gt;&#123;&#123;item&#125;&#125; -&lt;/span&gt; --&gt;<br>&lt;span&gt;&#123;&#123;slot.data.join(<span class="hljs-string">&#x27; - &#x27;</span>)&#125;&#125;&lt;/span&gt;<br>&lt;/template&gt;<br>&lt;/cpn&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br><br>&lt;template id=<span class="hljs-string">&quot;cpn&quot;</span>&gt;<br>&lt;div&gt;<br>&lt;!-- :data可以定义名字 --&gt;<br>&lt;slot :data=<span class="hljs-string">&#x27;pLanguages&#x27;</span>&gt;<br>&lt;ul&gt;<br>&lt;li v-for=<span class="hljs-string">&quot;item in pLanguages&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/slot&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>const app = new Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>message: <span class="hljs-string">&#x27;你好啊&#x27;</span><br>&#125;,<br>components:&#123;<br>cpn:&#123;<br>template:<span class="hljs-string">&#x27;#cpn&#x27;</span>,<br><span class="hljs-function"><span class="hljs-title">data</span></span>()&#123;<br><span class="hljs-built_in">return</span> &#123;<br>pLanguages:[<span class="hljs-string">&#x27;java&#x27;</span>,<span class="hljs-string">&#x27;c++&#x27;</span>,<span class="hljs-string">&#x27;python&#x27;</span>]<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="十三-webpack的使用"><a href="#十三-webpack的使用" class="headerlink" title="十三.webpack的使用"></a>十三.webpack的使用</h2><ul><li><p><font color="orange">什么是webpack?</font><br>webpack是一个模块打包器。webpack把模块(s)连同它的依赖一起打包生成包含这些模块的静态资源。</p></li><li><p><font color="orange">为什么使用webpack?</font><br>模块系统风格有很多种，例如： CommonJS、 AMD、ES6，浏览器支持ES6语法，我们可以使用webpack进行多种风格规范处理成浏览器认识的方式，而webpack其中一个核心就是让我们可能进行模块化开发，并且会帮助我们处理模块之间的依赖。我们的javascript文件，CSS、图片、json文件等在webpack中都可以当作模块来使用。</p></li><li><p><font color="orange">什么时候用grunt/gulp(打包工具)</font><br>如果你的工程模块依赖非常简单，甚至是没有用到模块话的概念。</p></li><li><p><font color="orange">grunt/gulp和webpack的区别</font></p><blockquote><p>grunt/gulp更加强调的是前端流程的自动化，模块化不是他的核心<br>webpack更加强调模块化开发管理，而文件压缩合并、预处理等功能，是他附带的功能。</p></blockquote></li></ul><h3 id="13-0-webpack安装"><a href="#13-0-webpack安装" class="headerlink" title="13.0 webpack安装"></a>13.0 webpack安装</h3><ul><li>注意：安装webpack首先需要安装Node.js,Node自带了软件包管理工具npm</li><li>我安装的是版本号是3.6.0(因为vue cli2脚手架依赖该版本)</li><li>全局安装webpack</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install webpack@3.6.0 -g<br></code></pre></td></tr></table></figure><ul><li>我的默认安装路径(C:\Users\15205\AppData\Roaming\npm\node_modules\webpack)</li></ul><p> 1.创建项目目录：<br>  <img src="https://img.wenhairu.com/images/2021/05/07/aOFHf.png" alt="result13.0"></p><p> 2.创建main.js和mathUtils.js文件(commonjs规范，将当前js代码打包成浏览器认识的代码)<br>   <font color="orange">main.js</font><br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">const &#123;add,mul&#125; = require(<span class="hljs-string">&#x27;./mathUtils.js&#x27;</span>)<br><br>console.log(add(30,20))<br>console.log(mul(30,20))<br></code></pre></td></tr></table></figure></p><p>   <font color="orange">mathUtils.js</font><br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> add(num1, num2)&#123;<br> <span class="hljs-built_in">return</span> num1 + num2<br>&#125;<br><br><span class="hljs-keyword">function</span> mul(num1, num2)&#123;<br> <span class="hljs-built_in">return</span> num1 * num2<br>&#125;<br><br>//使用commonjs规范导出<br>module.exports = &#123;<br> add,<br> mul<br>&#125;<br></code></pre></td></tr></table></figure><br> 3.打包main.js,他所依赖的文件也会被打包,在当前目录下进行打包<br>   <img src="https://img.wenhairu.com/images/2021/05/07/aONXd.png" alt="result13.0"><br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">webpack ./src/main.js ./dist/bundle.js<br></code></pre></td></tr></table></figure><br> 4.创建index.html文件，引入bundle.js<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;script src=<span class="hljs-string">&quot;./dist/bundle.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure></p><h3 id="13-1-webpack的一些配置"><a href="#13-1-webpack的一些配置" class="headerlink" title="13.1 webpack的一些配置"></a>13.1 webpack的一些配置</h3><ul><li>在当前项目目录下进行 npm init 指令，他会帮你初始化一些node的包，手动创建webpack.config.js文件，输入名字后可以一路回车<br>之后生成package.json文件。<br><font color="orange">webpack.config.js</font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">   const path = require(<span class="hljs-string">&#x27;path&#x27;</span>)//全局寻找依赖node的包<br><br>module.exports = &#123;<br>entry: <span class="hljs-string">&#x27;./src/main.js&#x27;</span>,<br>output: &#123;<br>path: path.resolve(__dirname,<span class="hljs-string">&#x27;dist&#x27;</span>),<br>filename: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure> 之后直接输入webpack命令就可以啦!</li><li>也可以使用 npm run build 和webpack对应起来以后可以直接使用npm来打包了，直接看步骤:打开package.json，在script中创建<strong>build</strong>元素<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"> &#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;meetwebpack&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;webpack.config.js&quot;</span>,<br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,<br><span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>本地安装webpack,cd 到当前项目目录下执行命令，如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install webpack@3.6.0 --save-dev<br></code></pre></td></tr></table></figure>之前已经绑定了脚本，所以直接执行webpack会优先在本地寻找。</li></ul><h3 id="13-2-webpack的loader"><a href="#13-2-webpack的loader" class="headerlink" title="13.2 webpack的loader"></a>13.2 webpack的loader</h3><ul><li><p>在上一个项目的基础上创建css、js包，整理相关的文件，创建normal.css文件，我们也需要把当前css文件当成模块来放入main.js主文件中来打包，这时我们会安装loader。</p><p><font color="orange">normal.css文件</font>：body {background-color: red;}</p></li><li><p>loader的使用过程，可以查看官网 <a href="https://webpack.js.org/loaders/css-loader/">loader</a></p><blockquote><p>步骤一：通过npm安装需要使用的loader<br>步骤二：在webpack.config.js中module关键字下进行配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save-dev css-loader<br><br>npm install --save-dev style-loader<br></code></pre></td></tr></table></figure><p>如果你想指定版本的话可以这样做：<br><img src="https://img.wenhairu.com/images/2021/05/07/aOf8H.png" alt="result13.3"><br>配置webpack.config.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">module.exports = &#123;<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        <span class="hljs-built_in">test</span>: /\.css$/i,<br>//css-loader只负责将css文件加载<br>//style-loader负责将样式添加到DOM中<br>//使用多个loader时，是从右向左的<br>        use: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行命令npm run build就可以啦!</p></li></ul><h3 id="13-3-less文件的打包配置"><a href="#13-3-less文件的打包配置" class="headerlink" title="13.3 less文件的打包配置"></a>13.3 less文件的打包配置</h3><ul><li><p>1.创建一个special.less文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">@fontsize: 50px;<br>@fontColor: orange;<br><br>body &#123;<br>font-size: @fontsize;<br>color: @fontColor;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>2.在main.js中导入依赖</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&#x27;./css/special.less&#x27;</span>)</span></span><br><br></code></pre></td></tr></table></figure></li><li><p>3.安装less和less-loader：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install less less-loader --save-dev<br><br>//为了导致这个错误建议降低less版本(this.getOptions is not a <span class="hljs-keyword">function</span>)<br>npm install less less-loader@4.1.0 --save-dev<br></code></pre></td></tr></table></figure></li><li><p>4.在webpack.config.js配置以下属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">module: &#123;<br>    rules: [<br>      &#123;<br>        <span class="hljs-built_in">test</span>: /\.less$/i,<br>        loader: [<br>          // compiles Less to CSS<br>          <span class="hljs-string">&quot;style-loader&quot;</span>,<br>          <span class="hljs-string">&quot;css-loader&quot;</span>,<br>          <span class="hljs-string">&quot;less-loader&quot;</span>,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br></code></pre></td></tr></table></figure></li></ul><h3 id="13-4-安装url-loader-处理图片"><a href="#13-4-安装url-loader-处理图片" class="headerlink" title="13.4 安装url-loader(处理图片)"></a>13.4 安装url-loader(处理图片)</h3><ul><li><p>1.项目目录创建img文件夹，放入相对较小的图片,css中引入图片依赖</p></li><li><p>2.安装url-loader</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install url-loader@1.1.2 --save-dev<br></code></pre></td></tr></table></figure></li><li><p>3.在webpack.config.js配置属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">rules: [<br>      &#123;<br>        <span class="hljs-built_in">test</span>: /\.(png|jpg|gif)$/i,<br>        use: [<br>          &#123;<br>            loader: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>// 当加载图片小于<span class="hljs-built_in">limit</span>时，会将图片编译成base64字符串形式<br>// 当加载图片大于<span class="hljs-built_in">limit</span>时，需要使用file-loader模块进行加载，之后会在dist生成图片<br>            options: &#123;<br>              <span class="hljs-built_in">limit</span>: 8192,<br>            &#125;,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br></code></pre></td></tr></table></figure></li><li><p>4.<strong>注意</strong>：当我们的图片大于limit定义的大小时需要我们手动安装<font color="red">file-loader</font>。由于图片路径默认在源代码路径寻找，并没有在打包的dist中寻找我们的图片，所以我们要在webpack.config.js中的output中添加(publicPath: ‘dist/‘),这样只要涉及到url的路径都会去dist下寻找。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install file-loader@3.0.1 --save-dev<br></code></pre></td></tr></table></figure><p> 如果你还想在的打包的时候使用自己定义的图片名字可以进行配置：webpack.config.js -&gt; rules -&gt; use -&gt; options下添加 name: ‘img/[name].[hash:8].[ext]’ (图片原名字.hash8位.图片类型)</p></li></ul><h3 id="13-5-babel使用"><a href="#13-5-babel使用" class="headerlink" title="13.5 babel使用"></a>13.5 babel使用</h3><ul><li>如果仔细阅读webpack打包的js文件，发现写的ES6的语法并没有转成ES5，意味有可能ES6浏览器不支持，那么就需要使用babel。<br><font color="orange">安装</font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save-dev babel-loader@7 babel-core@6.26.3 babel-presets-es2015<br></code></pre></td></tr></table></figure></li><li>配置：webpack.config.js -&gt; module]<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">rules: [<br>    &#123;<br>      <span class="hljs-built_in">test</span>: /\.m?js$/,<br>  // exclude: 排除<br>  // include: 包含<br>      exclude: /(node_modules|bower_components)/,<br>      use: &#123;<br>        loader: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>        options: &#123;<br>          presets: [<span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>]<br>        &#125;<br>      &#125;<br>    &#125;<br>  ]<br></code></pre></td></tr></table></figure></li></ul><h3 id="13-6-webpack配置vue"><a href="#13-6-webpack配置vue" class="headerlink" title="13.6 webpack配置vue"></a>13.6 webpack配置vue</h3><ul><li>1.<font color="orange">npm安装vue</font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install vue --save<br></code></pre></td></tr></table></figure></li><li>2.可以在入口函数(main.js)引入Vue<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">import Vue from <span class="hljs-string">&#x27;vue&#x27;</span><br><br>const app = new Vue(&#123;<br>el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>data:&#123;<br>message:<span class="hljs-string">&#x27;你好啊&#x27;</span><br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li>案例:<br><img src="https://img.wenhairu.com/images/2021/05/08/aOnLs.md.png" alt="13.6.0"><br><img src="https://img.wenhairu.com/images/2021/05/08/aOHDR.png" alt="13.6.1"><br><font color="orange">注意</font>：现在我们正在使用vue的运行runtime-only并没有runtime-compiler环境无法进行编译template,我们需要对webpack进行一些配置 <strong>webpack.config.js -&gt; module.exports</strong> 下配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">resolve: &#123;<br>   <span class="hljs-built_in">alias</span>: &#123;<br>      <span class="hljs-string">&#x27;vue$&#x27;</span> : <span class="hljs-string">&#x27;vue/dist/vue.esm.js&#x27;</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><font color="orange">当vue实例中有el和template挂载时会把template模板中的代码替换到页面中去。直接上流程图：<br><img src="https://img.wenhairu.com/images/2021/05/08/aOQcN.png" alt="13.6.2"></font></li><li>简化<br><img src="https://img.wenhairu.com/images/2021/05/08/aOR2B.png" alt="13.6.3"></li><li>再简化(把模板代码放入vue文件夹中)<br><img src="https://img.wenhairu.com/images/2021/05/08/aOofn.png" alt="13.6.4"></li><li>我们还需要进一步分离抽取，创建vue文件夹添加.vue文件，因为webpack无法识别.vue文件.我们需要安装一些配置：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">//如果你想提高/降低版本的话，可以在package.json中修改你想要的版本，然后执行命令 npm install<br>npm install --save-dev vue-loader@13.0.0 vue-template-compiler@2.5.21<br></code></pre></td></tr></table></figure>在<strong>webpack.config.js -&gt; module.exports -&gt; module -&gt; rules</strong>下进行以下配置：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br><span class="hljs-built_in">test</span>: /\.vue$/,<br>use: [<span class="hljs-string">&#x27;vue-loader&#x27;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://img.wenhairu.com/images/2021/05/08/aO7QA.png" alt="13.6.5"></li><li>如果你想定义组件在vue组件中使用的话可以这样做：在vue文件夹中创建一个新的Cpn.vue，在vue实例中引入并定义就可以实现了，下面来看我步骤<br><img src="https://img.wenhairu.com/images/2021/05/08/aOSeT.png" alt="13.6.6"></li></ul><h3 id="13-7-横幅Plugin的使用"><a href="#13-7-横幅Plugin的使用" class="headerlink" title="13.7 横幅Plugin的使用"></a>13.7 横幅Plugin的使用</h3><ul><li>plugin是什么?<blockquote><p>plugin是插件的意思，通常是用于对某个现有的架构进行扩展<br>webpack中的插件，就是对webpack现有的功能各种扩展，比如打包优化，文件压缩等。</p></blockquote></li><li>loader和plugin的区别?<blockquote><p>loader主要用于转换某些类型的模块，他是一个转换器。<br>plugin是插件，他对webpack本身的扩展，是一个扩展器。</p></blockquote></li><li>plugin的使用过程<blockquote><p>步骤一：通过npm安装需要使用的plugins(某些webpack已经内置的插件不需要安装)<br>步骤二：在webpack.config.js中的plugins中配置插件。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">//他会去node_modules中去找(在开头配置)<br>const webpack = require(<span class="hljs-string">&#x27;webpack&#x27;</span>)<br><br>//在module.exports中配置plugins<br>plugins:[<br>    new webpack.BannerPlugin(<span class="hljs-string">&#x27;最终版权归...所有&#x27;</span>)<br>]<br></code></pre></td></tr></table></figure>重新打包后，打包的文件就会有自己的版权了</li></ul><h3 id="13-6-打包html的plugin"><a href="#13-6-打包html的plugin" class="headerlink" title="13.6 打包html的plugin"></a>13.6 打包html的plugin</h3><ul><li>目前，我们的index.html文件是存放在项目的根目录下。<blockquote><p>我们知道，在真实项目发布时，发布的是dist文件夹中的内容，但是dist文件夹中如果没有index.html文件，那么打包的js等文件就没有意义了。<br>所以，我们需要将index.html文件打包到dist文件夹中，这个时候就可以使用HtmlWebpackPlugin</p></blockquote></li><li>HtmlWebpackPlugin插件可以为我们做这些事情：<blockquote><p>自动生成一个index.html文件(可以指定模板来生成)<br>将打包的js文件，自动通过script标签插入到body中</p></blockquote></li></ul><p>1.安装HtmlWebpackPlugin插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install html-webpack-plugin@3.2.0 --save-dev<br></code></pre></td></tr></table></figure><p>2.在webpack.config.js的开头引入当前插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">//他会去node_modules中去找<br>const HtmlWebpackPlugin = require(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br>//在module.exports中的plugins中配置，并指定index模板<br>new HtmlWebpackPlugin(&#123;<br>   template: <span class="hljs-string">&#x27;index.html&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>打包后会在dist下生成一个index.html</p><h3 id="13-7-js压缩的plugin"><a href="#13-7-js压缩的plugin" class="headerlink" title="13.7 js压缩的plugin"></a>13.7 js压缩的plugin</h3><ul><li>在项目发布之前，我们必然要对js等文件进行压缩处理<blockquote><p>这里，我们就要对打包的js进行压缩<br>我们使用第三方的插件uglifyjs-webpack-plugin,并且指定版本号1.1.1，和cli2脚手架保持一致</p></blockquote></li></ul><p>1.安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install uglifyjs-webpack-plugin@1.1.1 --save-dev<br></code></pre></td></tr></table></figure><p>2.修改webpack.config.js文件<br><img src="https://img.wenhairu.com/images/2021/05/10/aObAd.png" alt="13.7"><br>3.打包，丑化完毕!</p><h3 id="13-7-webpack-dev-server搭建"><a href="#13-7-webpack-dev-server搭建" class="headerlink" title="13.7 webpack-dev-server搭建"></a>13.7 webpack-dev-server搭建</h3><ul><li>webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，可以实现我们想要的让浏览器自动刷新显示我们修改后的结果</li><li>不过他是一个单独的模块，在webpack中使用之前需要先安装他<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save-dev-server@2.9.1<br></code></pre></td></tr></table></figure></li><li>在webpack.config.js —&gt; module.exports 下配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">devServer: &#123;<br>   contentBase: <span class="hljs-string">&#x27;./dist&#x27;</span>, //为哪一个文件夹提供服务，默认是根文件夹，我们这里填写./dist<br>   inline: <span class="hljs-literal">true</span>  //页面实时刷新<br>&#125;<br></code></pre></td></tr></table></figure></li><li>在package.json中script下配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server&quot;</span><br></code></pre></td></tr></table></figure>执行 <font color="orange">npm run dev</font> 优先会在本地找，现在一个基本的本地服务器就搭建好了。</li></ul><h2 id="十四-Vue-CLI使用"><a href="#十四-Vue-CLI使用" class="headerlink" title="十四.Vue CLI使用"></a>十四.Vue CLI使用</h2><ul><li>我本地安装的位置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\15205\AppData\Roaming\npm\node_modules<br></code></pre></td></tr></table></figure></li><li>我本地安装的是vuecli4.5.13，我们可以拉取一下cli2版本(前提必须安装node环境)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g @vue/cli-init<br></code></pre></td></tr></table></figure>这样的话我们既可以用cli2又可以使用cli4</li><li>vuecli2初始化项目<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vue init webpack my-project<br></code></pre></td></tr></table></figure></li><li>vuecli4初始化项目<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vue create 项目名称<br></code></pre></td></tr></table></figure></li></ul><h3 id="14-0-vuecli2脚手架的创建"><a href="#14-0-vuecli2脚手架的创建" class="headerlink" title="14.0 vuecli2脚手架的创建"></a>14.0 vuecli2脚手架的创建</h3><ul><li><p>1.创建一个测试的vue脚手架，我现在拉取的是vuecli2，在项目路径下输入以下创建命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vue init webpack my-project<br></code></pre></td></tr></table></figure><p><img src="https://img.wenhairu.com/images/2021/05/12/aTXtR.png" alt="14.0.4"><br><img src="https://img.wenhairu.com/images/2021/05/12/aTBJN.png" alt="14.0.2"></p></li><li><p><strong>1.注意</strong>：有的时候我们安装脚手架会出一些错误导致我们安装失败，我们可以清理一下npm-cache的缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">//我的默认缓存路径 C:\Users\15205\AppData\Roaming\npm-cache<br>npm clean cache --force<br></code></pre></td></tr></table></figure></li><li><p><strong>2.注意</strong>：如果你不小心在创建脚手架时选择了ESLint代码规范，我们可以手动关闭，找到当前目录config -&gt; index.js 中有一个useEslint:true选项，改为false，这样就成功地关闭了代码规范。</p></li><li><p><font color="orange"><strong>runtime+complie/only</strong></font>区别：<br><img src="https://img.wenhairu.com/images/2021/05/13/aV9uS.png" alt="result14.0.5"><br><img src="https://img.wenhairu.com/images/2021/05/13/aVGZC.png" alt="result14.0.6"></p></li><li><p><strong>render函数</strong>的演变<br><img src="https://img.wenhairu.com/images/2021/05/13/aV1zs.png" alt="result14.0.7"></p></li><li><p><strong>3.注意</strong>：vue在引用加载Components子组件时，子组件中的template已经被complie编译渲染过了，就是说用了runtime-only这种方式会把所有导入的vue组件都会变成一个对象，并且对象里没有template相关的东西。</p></li></ul><h3 id="14-1-vuecli3-4脚手架的创建"><a href="#14-1-vuecli3-4脚手架的创建" class="headerlink" title="14.1 vuecli3/4脚手架的创建"></a>14.1 vuecli3/4脚手架的创建</h3><ul><li>1.选择手动或自动安装<br><img src="https://img.wenhairu.com/images/2021/05/13/aVn7N.png" alt="result14.1.0"></li><li>2.手动安装界面，用上下箭头移动、空格键确认选项，我选择的是前两个<br><img src="https://img.wenhairu.com/images/2021/05/13/aVyiB.png" alt="result14.1.1"></li><li>3.选择vue版本，我个人选择vue2x<br><img src="https://img.wenhairu.com/images/2021/05/13/aVQNn.png" alt="result14.1.2"></li><li>4.对应的配置单独生成文件还是放在package.json<br><img src="https://img.wenhairu.com/images/2021/05/13/aVRyA.png" alt="result14.1.3"></li><li>5.要不要把刚才的配置保存下来<br><img src="https://img.wenhairu.com/images/2021/05/13/aVkVT.png" alt="result14.1.4"><br><img src="https://img.wenhairu.com/images/2021/05/13/aV76G.png" alt="result14.1.5"></li><li>6.vuecli4默认没有npm/yarn的选择，他自己默认npm，到这里vuecli4就创建完成啦!!!<br><img src="https://img.wenhairu.com/images/2021/05/14/aXpGd.png" alt="result14.1.6"></li><li>7.将vuecli4在本地启动<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run serve<br></code></pre></td></tr></table></figure></li></ul><h3 id="14-2-配置文件的查看和修改"><a href="#14-2-配置文件的查看和修改" class="headerlink" title="14.2 配置文件的查看和修改"></a>14.2 配置文件的查看和修改</h3><ul><li>vuecli3/4版本配置已经隐藏了，在我们安装脚手架的时候除了创建vue脚手架的命令还有一个<strong>UI方面的配置</strong><blockquote><p>启动配置服务器(当前命令可以在任何终端目录下运行)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vue ui<br></code></pre></td></tr></table></figure><blockquote><p>运行当前命令后，会启动一个运行在本地的界面UI<br><img src="https://img.wenhairu.com/images/2021/05/14/aX54H.png" alt="result14.2"><br><img src="https://img.wenhairu.com/images/2021/05/14/aXxpf.png" alt="result14.2.0"><br><img src="https://img.wenhairu.com/images/2021/05/14/ae6Id.png" alt="result14.2.1"></p></blockquote></li></ul><h2 id="十五-v-router路由"><a href="#十五-v-router路由" class="headerlink" title="十五.v-router路由"></a>十五.v-router路由</h2><p><strong>1.路由就是通过互联的网络把信息从源地址传输到目的地址的活动 –维基百科</strong><br><strong>2.路由提供了两种机制：路由和传送</strong><br>    &gt; 路由是决定数据包从<strong>来源</strong>到<strong>目的地</strong>的路径<br>    &gt; 转送将<strong>输入端</strong>的数据转移到合适的<strong>输出端</strong><br><strong>3.路由中有一个非常重要的概念叫路由表：路由表本质上就是一个映射表，决定了数据包的指向。</strong></p><h3 id="15-0-前端路由和后端路由"><a href="#15-0-前端路由和后端路由" class="headerlink" title="15.0 前端路由和后端路由"></a>15.0 前端路由和后端路由</h3><p>1.什么是路由：<strong>路由是根据不同的url展示不同的内容或页面</strong><br>2.什么是前端路由：<strong>不向后台发送请求，不刷新页面，前后端分离</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前端路由即响应页面内容的任务是由前端来做的，通过请求路径到静态资源服务器请求到资源(html+css+js)进行渲染，通过前端路由实现页面的切换，并不会向后台发送请求，而是根据路由在虚拟DOM中加载所需要的数据，实现页面内容的改变。<br>3.什么是后端路由？<strong>向服务器发送请求，会刷新页面，前后端不能分离</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过后端路由分配请求映射路径，在后台完成数据的请求和渲染在浏览器进行展示。</p><h3 id="15-1-url的hash和html5的history"><a href="#15-1-url的hash和html5的history" class="headerlink" title="15.1 url的hash和html5的history"></a>15.1 url的hash和html5的history</h3><ul><li>我们首先创建项目，选择路由<br><img src="https://img.wenhairu.com/images/2021/05/15/aBTXn.png" alt="result15.1.0"><br>启动项目</li><li><strong>URL的hsah</strong><br>URL的hash也就是锚点（#），本质上是改变window.location的href属性，可以通过直接赋值location.hash来改变href,但是页面不发生刷新<br><img src="https://img.wenhairu.com/images/2021/05/15/aBX8A.png" alt="result15.1.1"></li><li><strong>HTML5的history模式：pushState</strong><br>类似于一个栈结构，先进后出的原理，把push进去的值放在一个栈里面，可以调用返回的方法，就相当于弹栈和入栈，pushState也可以改变URL但是页面不发生刷新<br><img src="https://img.wenhairu.com/images/2021/05/15/aBe9T.png" alt="result15.1.2"></li><li><strong>HTML5的history模式：replaceState</strong><br>replaceState方法是直接替换<br><img src="https://img.wenhairu.com/images/2021/05/15/aBB0G.png" alt="result15.1.3"></li><li><strong>HTML5的history模式：go</strong><br><img src="https://img.wenhairu.com/images/2021/05/15/aBbjv.png" alt="result15.1.4"></li></ul><p><strong>注意：</strong>history.back()等价于history.go(-1)，history.forward()则等价于history.go(1)，这三个接口等同于浏览器界面的前进后退。</p><h3 id="15-2-安装使用vue-router"><a href="#15-2-安装使用vue-router" class="headerlink" title="15.2 安装使用vue-router"></a>15.2 安装使用vue-router</h3><ul><li><p>步骤一：安装vue-router</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install vue-router --save<br></code></pre></td></tr></table></figure></li><li><p>步骤二：在模块化工程中使用它(因为是一个插件，所以可以使用vue.use()来安装路由功能)</p><blockquote><p>第一步：导入路由对象，并且调用Vue.use(VueRouter)<br><img src="https://img.wenhairu.com/images/2021/05/16/abA2p.png" alt="result15.2.0"><br>第二部：创建路由实例，并且传入路由映射配置<br><img src="https://img.wenhairu.com/images/2021/05/16/abqf6.png" alt="result15.2.1"><br>第三步：在Vue实例中挂载创建的路由实例<br><img src="https://img.wenhairu.com/images/2021/05/16/abFHI.png" alt="result15.2.2"></p></blockquote></li><li><p>使用vue-router的步骤</p><blockquote><p>第一步：创建路由组件<br><img src="https://img.wenhairu.com/images/2021/05/16/abNeu.png" alt="result15.2.3"><br>第二部：配置路由映射；组件和路由映射关系<br><img src="https://img.wenhairu.com/images/2021/05/16/abf8h.png" alt="result15.2.4"><br>第三步：使用路由：通过&lt;router-link&gt;和&lt;router-view&gt;<br><img src="https://img.wenhairu.com/images/2021/05/16/abwGP.png" alt="result15.2.5"></p></blockquote></li><li><p><font color="orange">&lt;router-link&gt;</font>：该标签是一个vue-router中已经内置的组件，它会被渲染成一个&lt;a&gt;标签</p><blockquote><p>tag属性：可以指定&lt;router-link&gt;之后渲染成什么组件<br>replace：replace不会留下history记录，所以指定replace的情况下，后退键返回不能返回到上一个页面中<br>active-calss：当<router-link>对应的路由匹配成功时，会自动给当前元素设置一个router-link-active的class，设置active-calss可以修改默认的名称<br>  默认当前路径点击时的class会处于一个活跃状态，我们可以通过它来使选中的标签换一些样式<br>  <img src="https://img.wenhairu.com/images/2021/05/16/abWDS.png" alt="result15.2.8"><br>  <img src="https://img.wenhairu.com/images/2021/05/16/abDcC.png" alt="result15.2.9"><br>  我们也可以直接在路由同意修改默认名称<br>  <img src="https://img.wenhairu.com/images/2021/05/16/abE2s.png" alt="result15.2.10"></router-link></p></blockquote></li><li><p><font color="orange">&lt;router-view&gt;</font>：该标签会根据当前的路径，动态渲染出不同的组件</p></li><li><p>网页的其他内容，比如顶部标题/导航，或者底部的一些版权信息等会和&lt;router-view&gt;处于同一个等级。</p></li><li><p>在路由切换时，切换的是&lt;router-view&gt;挂载的组件，其他内容不会发生改变。</p></li><li><p>路由的默认路径<br>默认情况下，进入网站的首页，我们希望&lt;router-view&gt;渲染首页的内容<br>配置解析：我们在routes中又配置了一个映射，path配置的是根路径：/，redirect是重定向，也就是我们将根据重定向到/home的路径下<br><img src="https://img.wenhairu.com/images/2021/05/16/abC4D.png" alt="result15.2.6"></p></li><li><p>如何将默认的hash模式改成history模式<br><img src="https://img.wenhairu.com/images/2021/05/16/abJLt.png" alt="result15.2.7"></p></li></ul><h3 id="15-3-代码跳转路由"><a href="#15-3-代码跳转路由" class="headerlink" title="15.3 代码跳转路由"></a>15.3 代码跳转路由</h3><ul><li>通常我们可以通过&lt;router-link&gt;来跳转路由，我们也可以通过标签方式来绑定事件方法来跳转路由，看我示例<blockquote><p>创建&lt;button&gt;并绑定事件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;button @click=<span class="hljs-string">&quot;homeClick&quot;</span>&gt;首页&lt;/button&gt;<br>&lt;button @click=<span class="hljs-string">&quot;aboutClick&quot;</span>&gt;关于&lt;/button&gt;<br>&lt;router-view&gt;&lt;/router-view&gt;<br></code></pre></td></tr></table></figure><blockquote><p>通过this.$router实现绑定事件方法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">methods:&#123;<br>    //通过代码的方式修改路由 vue-router<br>    <span class="hljs-function"><span class="hljs-title">homeClick</span></span>()&#123;<br>      this.<span class="hljs-variable">$router</span>.push(<span class="hljs-string">&#x27;/home&#x27;</span>)<br>      console.log(<span class="hljs-string">&#x27;homeClick&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">aboutClick</span></span>()&#123;<br>      this.<span class="hljs-variable">$router</span>.push(<span class="hljs-string">&#x27;/about&#x27;</span>)<br>      console.log(<span class="hljs-string">&#x27;aboutClick&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="15-4-动态路由的使用"><a href="#15-4-动态路由的使用" class="headerlink" title="15.4 动态路由的使用"></a>15.4 动态路由的使用</h3><ul><li><p>我们在开发时候可能访问用户时的链接可能是这样的<br><img src="https://img.wenhairu.com/images/2021/05/17/a3TXj.png" alt="15.4.0"></p></li><li><p>步骤：</p><blockquote><p>创建一个User.vue组件，在路由index中进行注册</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">import User from <span class="hljs-string">&#x27;../components/User&#x27;</span><br>&#123;<br>   path: <span class="hljs-string">&#x27;/user/:userId&#x27;</span>,<br>   component: User<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在App.vue创建data模拟动态信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">data</span></span>()&#123;<br><span class="hljs-built_in">return</span> &#123;<br>  userId:<span class="hljs-string">&#x27;lisi&#x27;</span><br>&#125;<br>&#125;,<br></code></pre></td></tr></table></figure><blockquote><p>在App.vue绑定to元素动态获取当前用户名字</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;router-link :to=<span class="hljs-string">&quot;&#x27;/user&#x27;+userId&quot;</span>&gt;用户&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li><li><p>我们也可以在点击用户按钮时的链接中动态获取的用户名字信息在当前用户组件中获取并显示，我们可以用this.$route(当前处于活跃的路由)来获取<br><img src="https://img.wenhairu.com/images/2021/05/17/arE3G.png" alt="15.4.1"></p></li></ul><h3 id="15-5-路由的懒加载"><a href="#15-5-路由的懒加载" class="headerlink" title="15.5 路由的懒加载"></a>15.5 路由的懒加载</h3><ul><li>我们在npm run build项目打包时会生成一个dist文件夹，它将我们的css、js代码单独分离到不同文件夹了，但当我们构建项目的时候会导致代码量越来越大，会导致用户在访问时会出现短暂空白，导致极差体验感<br><img src="https://img.wenhairu.com/images/2021/05/19/uqmat.png" alt="15.5.0"></li><li>如果我们能把不同的路由对用的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了，在路由index.js中通过ES6中更加简单的写法来组织Vue异步组件和Webpack的代码分割<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">const Home = () =&gt; import(<span class="hljs-string">&#x27;../components/Home&#x27;</span>)<br>const About = () =&gt; import(<span class="hljs-string">&#x27;../components/About&#x27;</span>)<br>const User = () =&gt; import(<span class="hljs-string">&#x27;../components/User&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li>路由懒加载的效果<br><img src="https://img.wenhairu.com/images/2021/05/19/uqqPS.png" alt="15.5.1"></li></ul><h3 id="15-6-路由的嵌套"><a href="#15-6-路由的嵌套" class="headerlink" title="15.6 路由的嵌套"></a>15.6 路由的嵌套</h3><ul><li>嵌套路由是一个很常见的功能<blockquote><p>比如在home页面中，我们希望通过/home/news和/home/message访问一些内容<br>一个路径映射一个组件，访问这两个路径也会分别渲染两个组件<br><img src="https://img.wenhairu.com/images/2021/05/19/uqFzC.png" alt="15.6.0"></p></blockquote></li><li>实现嵌套路由有两个步骤：<blockquote><p>创建对应的子组件，并且在路由映射中配置对应的子路由<br>在组件内部使用<router-view>标签<br><img src="https://img.wenhairu.com/images/2021/05/19/uqYJs.png" alt="15.6.1"></router-view></p></blockquote></li></ul><h3 id="15-7-vue-router-参数传递"><a href="#15-7-vue-router-参数传递" class="headerlink" title="15.7 vue-router(参数传递)"></a>15.7 vue-router(参数传递)</h3><ul><li><p><strong>传递参数的方式</strong></p><ul><li>params的类型(当前方式在15.4有教程)<blockquote><p>1.配置路由格式：/router/:id<br>2.传递的方式：在path后面跟上对应的值<br>3.传递后形成的路径：/router/123,/router/abc</p></blockquote></li><li>query的类型<blockquote><p>1.配置路由格式：/router，也就是普通配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;router-link :to=<span class="hljs-string">&quot;&#123;path:&#x27;/profile&#x27;,query: &#123;name: &#x27;why&#x27;,age: 18&#125;&#125;&quot;</span>&gt;档案&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><blockquote><p>2.传递的方式：对象中使用query的key作为传递方式</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;div&gt;<br>&lt;h2&gt;我是Profile组件&lt;/h2&gt;<br>&lt;h2&gt;&#123;&#123;<span class="hljs-variable">$route</span>.query.name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;&#123;&#123;<span class="hljs-variable">$route</span>.query.age&#125;&#125;&lt;/h2&gt;<br>   &lt;/div&gt;<br></code></pre></td></tr></table></figure><blockquote><p>3.传递后形成的路径：/router?id=123,/router?id=abc<br><img src="https://img.wenhairu.com/images/2021/05/19/uqMs6.png" alt="15.7.0"></p></blockquote></li></ul></li><li><p>我们也可以在不使用router-link时使用button跳转的同时实现两种参数的传递</p></li></ul><h3 id="15-7-全局导航守卫"><a href="#15-7-全局导航守卫" class="headerlink" title="15.7 全局导航守卫"></a>15.7 全局导航守卫</h3><ul><li>案例：当我们想点击相应按钮时我们可以使标题相应的改变<br><img src="https://img.wenhairu.com/images/2021/05/20/uNRtq.png" alt="15.7.0"><blockquote><p>在路由配置中创建相应的title</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">meta:&#123;<br>  title: <span class="hljs-string">&#x27;档案&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>router.beforeEach路由导航方法实现</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">router.beforeEach((to,from,next) =&gt;&#123;<br>//从from跳转到to<br>document.title = to.matched[0].meta.title<br>next();<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_io流</title>
    <link href="/2021/04/29/java-io/"/>
    <url>/2021/04/29/java-io/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-基于io的总结"><a href="#1-基于io的总结" class="headerlink" title="1 基于io的总结"></a>1 基于io的总结</h2><h3 id="1-0-编解码的基本使用"><a href="#1-0-编解码的基本使用" class="headerlink" title="1.0 编解码的基本使用"></a>1.0 编解码的基本使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.UnsupportedEncodingException;<br><br>//编码、解码<br>public class Test04 &#123;<br>public static void main(String[] args) throws UnsupportedEncodingException &#123;<br>//编码  字符到字节<br>String msg = <span class="hljs-string">&quot;性命生命使命a&quot;</span>;<br>//默认使用工程的字符集<br>byte[] datas = msg.getBytes();<br>System.out.println(datas.length);<br><br>//指定其他字符集<br>datas = msg.getBytes(<span class="hljs-string">&quot;UTF-16LE&quot;</span>);<br>System.out.println(datas.length);<br>datas = msg.getBytes(<span class="hljs-string">&quot;GBK&quot;</span>);<br>System.out.println(datas.length);<br><br><br>//解码 字节到字符<br>msg = new String(datas,0, datas.length,<span class="hljs-string">&quot;GBK&quot;</span>);<br>System.out.println(msg);<br>//乱码 1、字节数不够  2、字节数不统一<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-1-InputStream基本使用"><a href="#1-1-InputStream基本使用" class="headerlink" title="1.1 InputStream基本使用"></a>1.1 InputStream基本使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br>//InputStream<br>public class Test05 &#123;<br>public static void main(String[] args) &#123;<br>//创建源<br>File file = new File(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>);<br>InputStream is = null;<br>//选择流<br>try &#123;<br>is = new FileInputStream(file);<br>//操作(读取)<br>int temp;<br><span class="hljs-keyword">while</span> ((temp = is.read() )!= -1)&#123;<br>System.out.println((char) temp);<br>&#125;<br><br>&#125; catch (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;finally &#123;<br>//释放资源<br>try &#123;<br><span class="hljs-keyword">if</span>(null!=is)&#123;<br>is.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-2-InputStream-分段读取文件字节输入流"><a href="#1-2-InputStream-分段读取文件字节输入流" class="headerlink" title="1.2 InputStream(分段读取文件字节输入流)"></a>1.2 InputStream(分段读取文件字节输入流)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br>//InputStream 分段读取文件字节输入流<br>public class Test06 &#123;<br>public static void main(String[] args) &#123;<br>//创建源<br>File file = new File(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>);<br>InputStream is = null;<br>//选择流<br>try &#123;<br>is = new FileInputStream(file);<br>//操作(读取)<br>byte[] bytes = new byte[3]; //缓冲容器<br>int len = -1; //接受长度<br><span class="hljs-keyword">while</span> ((len = is.read(bytes) )!= -1)&#123;<br>String str = new String(bytes,0,len);<br>System.out.println(str);<br>&#125;<br><br>&#125; catch (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;finally &#123;<br>//释放资源<br>try &#123;<br><span class="hljs-keyword">if</span>(null!=is)&#123;<br>is.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-3-FileOutputStream-分段读取文件字节输出流"><a href="#1-3-FileOutputStream-分段读取文件字节输出流" class="headerlink" title="1.3 FileOutputStream(分段读取文件字节输出流)"></a>1.3 FileOutputStream(分段读取文件字节输出流)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br><br>//分段读取文件字节输出流<br>public class Test07 &#123;<br>public static void main(String[] args) &#123;<br>//创建源<br>File file = new File(<span class="hljs-string">&quot;met/src/Io/dest&quot;</span>);<br>//选择流<br>OutputStream os =null;<br>try &#123;<br>//<span class="hljs-literal">true</span>追加元素 默认<span class="hljs-literal">false</span>覆盖元素<br>os = new FileOutputStream(file,<span class="hljs-literal">true</span>);<br>//操作(写出)<br>String str = <span class="hljs-string">&quot;io is so easy&quot;</span>;<br>//字符串--&gt;字节数组(编码)<br>byte[] datas = str.getBytes();<br>os.write(datas,0, datas.length);<br>os.flush();<br>&#125; catch (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;finally &#123;<br>//释放资源<br>try &#123;<br><span class="hljs-keyword">if</span>(null != os)&#123;<br>  os.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-4-文件拷贝-文件字节输入、输出流"><a href="#1-4-文件拷贝-文件字节输入、输出流" class="headerlink" title="1.4 文件拷贝:文件字节输入、输出流"></a>1.4 文件拷贝:文件字节输入、输出流</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br><br>//文件拷贝:文件字节输入、输出流<br>public class Test08 &#123;<br>public static void main(String[] args) &#123;<br>copy(<span class="hljs-string">&quot;met/src/img/io.jpg&quot;</span>,<span class="hljs-string">&quot;met/src/img/ios.jpg&quot;</span>);<br>&#125;<br><br>public static void copy(String srcPath,String destPath)&#123;<br>//创建源<br>File file = new File(srcPath);<br>File file1 = new File(destPath);<br>InputStream is = null;<br>OutputStream os =null;<br>//选择流<br>try &#123;<br>is = new FileInputStream(file);<br>os = new FileOutputStream(file1);<br>//操作(读取)<br>byte[] bytes = new byte[1024]; //缓冲容器<br>int len = -1; //接受长度<br><span class="hljs-keyword">while</span> ((len = is.read(bytes) )!= -1)&#123;<br>//操作(写出)<br>os.write(bytes,0, len);<br>&#125;<br>os.flush();<br>&#125; catch (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;finally &#123;<br>//释放资源<br>try &#123;<br><span class="hljs-keyword">if</span>(null != os)&#123;<br>os.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>try &#123;<br><span class="hljs-keyword">if</span>(null!=is)&#123;<br>is.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br><br>//放入声明自动释放资源<br>/*<br>public static void copy1(String srcPath,String destPath)&#123;<br>//创建源<br>File file = new File(srcPath);<br>File file1 = new File(destPath);<br><br>//选择流<br>try(InputStream is = new FileInputStream(file);OutputStream os = new FileOutputStream(file1);) &#123;<br><br>//操作(读取)<br>byte[] bytes = new byte[1024]; //缓冲容器<br>int len = -1; //接受长度<br><span class="hljs-keyword">while</span> ((len = is.read(bytes) )!= -1)&#123;<br>//操作(写出)<br>os.write(bytes,0, len);<br>&#125;<br>os.flush();<br>&#125; catch (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>*/<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-5-FileReader-文件字符输入流-分段读取"><a href="#1-5-FileReader-文件字符输入流-分段读取" class="headerlink" title="1.5 FileReader(文件字符输入流,分段读取)"></a>1.5 FileReader(文件字符输入流,分段读取)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br><br>//分段读取,文件字符输入流<br>public class Test09 &#123;<br>public static void main(String[] args) &#123;<br>//创建源<br>File file = new File(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>);<br>Reader reader = null;<br>//选择流<br>try &#123;<br>reader = new FileReader(file);<br>//操作(读取)<br>char[] bytes = new char[2]; //缓冲容器<br>int len = -1; //接受长度<br><span class="hljs-keyword">while</span> ((len = reader.read(bytes) )!= -1)&#123;<br>//字符数组--&gt;字符串<br>String str = new String(bytes,0,len);<br>System.out.println(str);<br>&#125;<br><br>&#125; catch (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;finally &#123;<br>//释放资源<br>try &#123;<br><span class="hljs-keyword">if</span>(null!=reader)&#123;<br>reader.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-6-FileWriter-文件字符输出流-分段读取"><a href="#1-6-FileWriter-文件字符输出流-分段读取" class="headerlink" title="1.6 FileWriter(文件字符输出流:分段读取)"></a>1.6 FileWriter(文件字符输出流:分段读取)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br><br>//分段读取：文件字符输出流<br>public class Test10 &#123;<br>public static void main(String[] args) &#123;<br>//创建源<br>File file = new File(<span class="hljs-string">&quot;met/src/Io/dest&quot;</span>);<br>//选择流<br>Writer writer =null;<br>try &#123;<br>//<span class="hljs-literal">true</span>追加元素 默认<span class="hljs-literal">false</span>覆盖元素<br>writer = new FileWriter(file,<span class="hljs-literal">true</span>);<br>//操作(写出)<br><br>String str = <span class="hljs-string">&quot;io is so easy\n哈哈哈&quot;</span>;<br>//字符串-&gt;字符数组<br>char[] datas = str.toCharArray();<br>writer.write(datas,0, datas.length);<br>writer.flush();<br>//方法二<br><br>&#125; catch (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;finally &#123;<br>//释放资源<br>try &#123;<br><span class="hljs-keyword">if</span>(null != writer)&#123;<br>writer.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-7-ByteArrayInputStream-字节数组输入流"><a href="#1-7-ByteArrayInputStream-字节数组输入流" class="headerlink" title="1.7 ByteArrayInputStream(字节数组输入流)"></a>1.7 ByteArrayInputStream(字节数组输入流)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br><br>public class Test11 &#123;<br>public static void main(String[] args) &#123;<br>//创建源<br>byte[] src = <span class="hljs-string">&quot;talk is cheap show me the code&quot;</span>.getBytes();<br>//选择流<br>InputStream is = null;<br>try &#123;<br>//字节数组输入流<br>//创建源:字节数组 不要太大<br>is = new ByteArrayInputStream(src);<br>byte[] bytes = new byte[5];<br>int len = -1;<br><span class="hljs-keyword">while</span> ((len = is.read(bytes))!=-1)&#123;<br>String str = new String(bytes,0,len);<br>System.out.println(str);<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;finally &#123;<br> //释放资源可以不用处理 close()空方法<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-8-ByteArrayOutputStream-字节数组输出流"><a href="#1-8-ByteArrayOutputStream-字节数组输出流" class="headerlink" title="1.8 ByteArrayOutputStream(字节数组输出流)"></a>1.8 ByteArrayOutputStream(字节数组输出流)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br><br>public class Test12 &#123;<br>public static void main(String[] args) &#123;<br>//创建源<br>byte[] bytes = null;<br>//选择流<br>ByteArrayOutputStream baos =null;<br>try &#123;<br>//<br>baos = new ByteArrayOutputStream();<br>//操作(写出)<br>String str = <span class="hljs-string">&quot;io is so easy&quot;</span>;<br>//字符串--&gt;字节数组(编码)<br>byte[] datas = str.getBytes();<br>baos.write(datas,0, datas.length);<br>baos.flush();<br>//获取数据<br>bytes = baos.toByteArray();<br>System.out.println(bytes.length + <span class="hljs-string">&quot;--&gt;&quot;</span> + new String(bytes,0,baos.size()));<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;finally &#123;<br>//释放资源<br>try &#123;<br><span class="hljs-keyword">if</span>(null != baos)&#123;<br>baos.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-9-图片读到字符数组中"><a href="#1-9-图片读到字符数组中" class="headerlink" title="1.9 图片读到字符数组中"></a>1.9 图片读到字符数组中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br><br>//1.将图片读取到字符数组中<br>//2.字符数组写到图片<br>public class Test13 &#123;<br>public static void main(String[] args) &#123;<br>byte[] bytes = fileToByteArray(<span class="hljs-string">&quot;met/src/img/io.jpg&quot;</span>);<br>System.out.println(bytes.length);<br>byteArrayToFile(bytes,<span class="hljs-string">&quot;met/src/img/p-byte.jpg&quot;</span>);<br>&#125;<br><br>//1.将图片读取到字符数组中<br>public static byte[] fileToByteArray(String filePath)&#123;<br>//创建源<br>File file = new File(filePath);<br>byte[] dest = null;<br>InputStream is = null;<br>ByteArrayOutputStream baos = null;<br>//选择流<br>try &#123;<br>is = new FileInputStream(file);<br>baos = new ByteArrayOutputStream();<br>//操作(读取)<br>byte[] bytes = new byte[3]; //缓冲容器<br>int len = -1; //接受长度<br><span class="hljs-keyword">while</span> ((len = is.read(bytes) )!= -1)&#123;<br>baos.write(bytes,0,len);<br>&#125;<br>baos.flush();<br><span class="hljs-built_in">return</span> baos.toByteArray();<br>&#125; catch (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;finally &#123;<br>//释放资源<br>try &#123;<br><span class="hljs-keyword">if</span>(null!=is)&#123;<br>is.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">return</span> null;<br>&#125;<br><br>//2.字符数组写到图片<br>public static void byteArrayToFile(byte[] src,String filePath )&#123;<br> File file = new File(filePath);<br> OutputStream os =null;<br> ByteArrayInputStream bais = null;<br> try &#123;<br>//<span class="hljs-literal">true</span>追加元素 默认<span class="hljs-literal">false</span>覆盖元素<br>os = new FileOutputStream(file);<br>bais = new ByteArrayInputStream(src);<br>byte[] bytes = new byte[5];<br>int len = -1;<br><span class="hljs-keyword">while</span>((len = bais.read(bytes)) != -1)&#123;<br>os.write(bytes,0,len);<br>&#125;<br>os.flush();<br>&#125; catch (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;finally &#123;<br>//释放资源<br>try &#123;<br><span class="hljs-keyword">if</span>(null != os)&#123;<br>os.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="2-0-封装-图片读到字符数组"><a href="#2-0-封装-图片读到字符数组" class="headerlink" title="2.0 (封装)图片读到字符数组"></a>2.0 (封装)图片读到字符数组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import javax.imageio.IIOException;<br>import java.io.*;<br><br>//封装<br>public class Test14 &#123;<br>public static void main(String[] args) &#123;<br> //文件到字节数组<br>byte[] tatas = null;<br>try &#123;<br>InputStream is = new FileInputStream(<span class="hljs-string">&quot;met/src/img/io.jpg&quot;</span>);<br>ByteArrayOutputStream baos = new ByteArrayOutputStream();<br>copy(is,baos);<br>tatas = baos.toByteArray();<br><br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br>//字节数组到文件<br><br>try &#123;<br>InputStream bais = new ByteArrayInputStream(tatas);<br>OutputStream os = new FileOutputStream(<span class="hljs-string">&quot;met/src/img/p1-byte.jpg&quot;</span>);<br>copy(bais,os);<br><br><br>&#125; catch (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>public static void copy(InputStream is, OutputStream os)&#123;<br><br>try &#123;<br>byte[] temps = new byte[1024];<br>int len = -1;<br><span class="hljs-keyword">while</span> ((len = is.read(temps)) != -1)&#123;<br>os.write(temps,0,len);<br>&#125;<br>os.flush();<br>&#125;catch (IOException e)&#123;<br>e.printStackTrace();<br>&#125;finally &#123;<br>close(is,os);<br>&#125;<br>&#125;<br><br>//释放资源 1.<br>public static void close(InputStream is,OutputStream os)&#123;<br>try &#123;<br><span class="hljs-keyword">if</span>(is != null)&#123;<br>is.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>try &#123;<br><span class="hljs-keyword">if</span>(os != null)&#123;<br>os.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>//2.多态实现父接口<br>public static void close(Closeable... ca)&#123;<br><span class="hljs-keyword">for</span> (Closeable io:ca)&#123;<br>try &#123;<br><span class="hljs-keyword">if</span>(io != null)&#123;<br>io.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br>//3.丢弃finally，加入try参数自动释放<br>public static void copy1(InputStream is, OutputStream os)&#123;<br><br>try(is;os) &#123;<br>byte[] temps = new byte[1024];<br>int len = -1;<br><span class="hljs-keyword">while</span> ((len = is.read(temps)) != -1)&#123;<br>os.write(temps,0,len);<br>&#125;<br>os.flush();<br>&#125;catch (IOException e)&#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-1-BufferedInput-Output-字节缓冲流"><a href="#2-1-BufferedInput-Output-字节缓冲流" class="headerlink" title="2.1 (BufferedInput/Output)字节缓冲流"></a>2.1 (BufferedInput/Output)字节缓冲流</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br><br>//字节缓冲流<br>public class Test17 &#123;<br>public static void main(String[] args) &#123;<br>bis();<br>bos();<br>&#125;<br><br>public static void <span class="hljs-function"><span class="hljs-title">bis</span></span>()&#123;<br>//创建源<br>File file = new File(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>);<br>InputStream bis = null;<br>//选择流<br>try &#123;<br>bis = new BufferedInputStream(new FileInputStream(file));<br>//操作(读取)<br>byte[] bytes = new byte[1024]; //缓冲容器<br>int len = -1; //接受长度<br><span class="hljs-keyword">while</span> ((len = bis.read(bytes) )!= -1)&#123;<br>String str = new String(bytes,0,len);<br>System.out.println(str);<br>&#125;<br><br>&#125; catch (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;finally &#123;<br>//释放资源<br>try &#123;<br><span class="hljs-keyword">if</span>(null!=bis)&#123;<br>bis.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br>public static void <span class="hljs-function"><span class="hljs-title">bos</span></span>()&#123;<br>//创建源<br>File file = new File(<span class="hljs-string">&quot;met/src/Io/dest&quot;</span>);<br>//选择流<br>OutputStream bos =null;<br>try &#123;<br>//<span class="hljs-literal">true</span>追加元素 默认<span class="hljs-literal">false</span>覆盖元素<br>bos = new BufferedOutputStream(new FileOutputStream(file));<br>//操作(写出)<br>String str = <span class="hljs-string">&quot;io is so easy&quot;</span>;<br>//字符串--&gt;字节数组(编码)<br>byte[] datas = str.getBytes();<br>bos.write(datas,0, datas.length);<br>bos.flush();<br>&#125; catch (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;finally &#123;<br>//释放资源<br>try &#123;<br><span class="hljs-keyword">if</span>(null != bos)&#123;<br>bos.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-2-BufferedReader-Writer"><a href="#2-2-BufferedReader-Writer" class="headerlink" title="2.2 BufferedReader/Writer"></a>2.2 BufferedReader/Writer</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br><br>//文件字节输入/输出流 加入缓冲流<br>//子类新增方法不能使用多态<br>public class Test18 &#123;<br>public static void main(String[] args) &#123;<br>br();<br>bw();<br>copy(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>,<span class="hljs-string">&quot;met/src/Io/dest&quot;</span>);<br>&#125;<br><br>public static void <span class="hljs-function"><span class="hljs-title">br</span></span>()&#123;<br>//创建源<br>File file = new File(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>);<br>//只能处理纯文本<br>BufferedReader reader = null;<br>//选择流<br>try &#123;<br>reader = new BufferedReader(new FileReader(file));<br>String line = null;<br><span class="hljs-keyword">while</span> ((line = reader.readLine() )!= null)&#123;<br>System.out.println(line);<br>&#125;<br><br>&#125; catch (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;finally &#123;<br>//释放资源<br>try &#123;<br><span class="hljs-keyword">if</span>(null!=reader)&#123;<br>reader.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br>public static void <span class="hljs-function"><span class="hljs-title">bw</span></span>()&#123;<br>//创建源<br>File file = new File(<span class="hljs-string">&quot;met/src/Io/dest&quot;</span>);<br>//选择流<br>BufferedWriter writer =null;<br>try &#123;<br>//<span class="hljs-literal">true</span>追加元素 默认<span class="hljs-literal">false</span>覆盖元素<br>writer = new BufferedWriter(new FileWriter(file,<span class="hljs-literal">true</span>));<br>//操作(写出)<br><br>String str = <span class="hljs-string">&quot;io is so easy&quot;</span>;<br>writer.append(<span class="hljs-string">&quot;io is so easy&quot;</span>);<br>writer.newLine();<br>writer.append(<span class="hljs-string">&quot;哈哈&quot;</span>);<br>writer.flush();<br><br>//方法二<br><br>&#125; catch (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;finally &#123;<br>//释放资源<br>try &#123;<br><span class="hljs-keyword">if</span>(null != writer)&#123;<br>writer.close();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br>public static void copy(String srcPath,String destPath) &#123;<br>//创建源<br>File file = new File(srcPath);<br>File file1 = new File(destPath);<br><br>//选择流<br>try (BufferedReader br = new BufferedReader(new FileReader(file));<br> BufferedWriter bw = new BufferedWriter(new FileWriter(file1))) &#123;<br><br>//操作(读取)<br>String line = null;<br><span class="hljs-keyword">while</span> ((line = br.readLine()) != null) &#123;<br>//操作(逐行写出)<br>bw.write(line);<br>bw.newLine();<br>&#125;<br>bw.flush();<br>&#125; catch (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; catch (IOException e) &#123;<br>e.printStackTrace();<br>&#125; finally &#123;<br><br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-3-InputStreamReader-转换流"><a href="#2-3-InputStreamReader-转换流" class="headerlink" title="2.3 InputStreamReader(转换流)"></a>2.3 InputStreamReader(转换流)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br><br>//转换流<br>//1.以字符流的形式操作字节流(纯文本)<br>//2.指定字符集<br>public class Test19 &#123;<br>public static void main(String[] args) &#123;<br>//操作System.in和System.out<br>try(<br>BufferedReader br = new BufferedReader(new InputStreamReader(System.in));<br>BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out)))&#123;<br>//循环获取键盘的输入(<span class="hljs-built_in">exit</span>退出),输出此内容<br>String msg = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">while</span> (!msg.equals(<span class="hljs-string">&quot;exit&quot;</span>))&#123;<br>msg = br.readLine();<br>bw.write(msg);<br>bw.newLine();<br>bw.flush(); //缓冲容器,需要强制刷新<br>&#125;<br>&#125; catch (IOException e)&#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-4-操作网络流-下载百度源码"><a href="#2-4-操作网络流-下载百度源码" class="headerlink" title="2.4 操作网络流(下载百度源码)"></a>2.4 操作网络流(下载百度源码)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br>import java.net.URL;<br><br>//操作网络流 下载百度源代码<br>public class Test20 &#123;<br>public static void main(String[] args) &#123;<br>try(BufferedReader isr =<br>new BufferedReader(<br>new InputStreamReader(<br>new URL(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>).openStream(),<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>BufferedWriter bw =<br>new BufferedWriter(<br>new OutputStreamWriter(<br>new FileOutputStream(<span class="hljs-string">&quot;met/src/Io/baidu.html&quot;</span>),<span class="hljs-string">&quot;UTF-8&quot;</span>))) &#123;<br>String temp;<br><br><span class="hljs-keyword">while</span>((temp = isr.readLine()) != null)&#123;<br>bw.write(temp); //乱码原因:字符集不统一<br>bw.newLine();<br>&#125;<br>bw.flush();<br>&#125;catch (IOException e)&#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-5-DataOutputStream-数据流"><a href="#2-5-DataOutputStream-数据流" class="headerlink" title="2.5 DataOutputStream(数据流)"></a>2.5 DataOutputStream(数据流)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br>import java.util.Date;<br>/**<br> *数据流<br> * 1.写出后读取<br> * 2.读取的顺序与写的顺序保持一致<br> */<br>public class Test21 &#123;<br>public static void main(String[] args) throws IOException &#123;<br>//写出<br>ByteArrayOutputStream baos = new ByteArrayOutputStream();<br>DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(baos));<br>dos.writeUTF(<span class="hljs-string">&quot;编码辛酸泪&quot;</span>);<br>dos.writeInt( 18);<br>dos.writeChar(<span class="hljs-string">&#x27;a&#x27;</span>);<br>dos.writeBoolean(<span class="hljs-literal">false</span>);<br>dos.flush();<br>byte[] datas = baos.toByteArray();<br>//读取<br>DataInputStream dis = new DataInputStream(new BufferedInputStream(new ByteArrayInputStream(datas)));<br>//顺序与写出一致<br>String msg = dis.readUTF();<br>int age = dis.readInt();<br>char c = dis.readChar();<br>boolean flag = dis.readBoolean();<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-6-ObjectOutputStream-对象流"><a href="#2-6-ObjectOutputStream-对象流" class="headerlink" title="2.6 ObjectOutputStream(对象流)"></a>2.6 ObjectOutputStream(对象流)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br>import java.util.Date;<br>/**<br> * 对象流<br> * 1.写出后读取<br> * 2.读取的顺序与写的顺序保持一致<br> * 3.不是所有的对象都可以序列化 Serializable<br> */<br>public class Test22 &#123;<br>public static void main(String[] args) throws IOException, ClassNotFoundException &#123;<br>//写出 --&gt; 序列化<br>ByteArrayOutputStream baos = new ByteArrayOutputStream();<br>ObjectOutputStream dos = new ObjectOutputStream(new BufferedOutputStream(baos));<br>dos.writeUTF(<span class="hljs-string">&quot;编码辛酸泪&quot;</span>);<br>dos.writeInt( 18);<br>dos.writeChar(<span class="hljs-string">&#x27;a&#x27;</span>);<br>dos.writeBoolean(<span class="hljs-literal">false</span>);<br>//写对象 内部都实现了Serializable接口<br>dos.writeObject(<span class="hljs-string">&quot;其中味&quot;</span>);<br>dos.writeObject(new Date());<br>dos.flush();<br>byte[] datas = baos.toByteArray();<br>//读取 --&gt; 反序列化<br>ObjectInputStream dis = new ObjectInputStream(new BufferedInputStream(new ByteArrayInputStream(datas)));<br>//顺序与写出一致<br>String msg = dis.readUTF();<br>int age = dis.readInt();<br>char c = dis.readChar();<br>boolean flag = dis.readBoolean();<br>Object str = dis.readObject();<br>Object date = dis.readObject();<br><br><span class="hljs-keyword">if</span> (str instanceof String)&#123;<br>String strObj = (String)str;<br>System.out.println(strObj);<br>&#125;<br><span class="hljs-keyword">if</span> (date instanceof Date)&#123;<br>Date dateObj = (Date)date;<br>System.out.println(dateObj);<br>&#125;<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-7-打印流"><a href="#2-7-打印流" class="headerlink" title="2.7 打印流"></a>2.7 打印流</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br>/**<br> *打印流<br> */<br>public class Test23 &#123;<br>public static void main(String[] args) &#123;<br><br>&#125;<br><br>//打印流 PrintStream<br>public static void printStr() throws FileNotFoundException &#123;<br>PrintStream ps = System.out;<br>ps.println(<span class="hljs-string">&quot;打印流&quot;</span>);<br>ps.println(<span class="hljs-literal">true</span>);<br>//<span class="hljs-literal">true</span> 自动刷新<br>ps = new PrintStream(new BufferedOutputStream(new FileOutputStream(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>)),<span class="hljs-literal">true</span>);<br>ps.println(<span class="hljs-string">&quot;haha&quot;</span>);<br>ps.flush();<br>ps.close();<br>//重定向输出端<br>System.setOut(ps);<br>System.out.println(<span class="hljs-string">&quot;haha&quot;</span>);<br>//重定向到控制台<br>System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream(FileDescriptor.out))));<br>&#125;<br><br>// PrintWriter<br>public static void printWri() throws FileNotFoundException &#123;<br><br>PrintWriter pw = new PrintWriter(new BufferedOutputStream(new FileOutputStream(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>)),<span class="hljs-literal">true</span>);<br>pw.println(<span class="hljs-string">&quot;haha&quot;</span>);<br>pw.flush();<br>pw.close();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-8-RandomAccessFile"><a href="#2-8-RandomAccessFile" class="headerlink" title="2.8 RandomAccessFile"></a>2.8 RandomAccessFile</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.File;<br>import java.io.FileNotFoundException;<br>import java.io.IOException;<br>import java.io.RandomAccessFile;<br><br>/**<br> * 随机读取和写入流 RandomAccessFile<br> */<br>public class Test24 &#123;<br>public static void main(String[] args) throws IOException &#123;<br> test3();<br>&#125;<br><br>//指定起始位置,读取剩余所有内容<br>public static void test1() throws IOException &#123;<br>RandomAccessFile raf = new RandomAccessFile(new File(<span class="hljs-string">&quot;met/src/Io/Test09.java&quot;</span>),<span class="hljs-string">&quot;r&quot;</span>);<br>//随机读取<br>raf.seek(2);<br>//读取操作<br>byte[] data = new byte[1024];<br>int len = -1;<br><span class="hljs-keyword">while</span> ((len = raf.read(data)) != -1)&#123;<br>System.out.println(new String(data,0,len));<br>&#125;<br>raf.close();<br>&#125;<br><br>//指定起始位置和读取大小<br>public static void test2() throws IOException &#123;<br>RandomAccessFile raf = new RandomAccessFile(new File(<span class="hljs-string">&quot;met/src/Io/Test09.java&quot;</span>),<span class="hljs-string">&quot;r&quot;</span>);<br>//起始位置<br>int beginPos = 2;<br>//文件大小<br>int actualSize = 1026;<br>//随机读取<br>raf.seek(beginPos);<br>//读取操作<br>byte[] data = new byte[1024];<br>int len = -1;<br><span class="hljs-keyword">while</span> ((len = raf.read(data)) != -1)&#123;<br><br><span class="hljs-keyword">if</span>(actualSize &gt; len)&#123; //获取本次读取的所有内容·<br>System.out.println(new String(data,0,len));<br>actualSize-=len;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.println(new String(data,0,actualSize));<br><span class="hljs-built_in">break</span>;<br>&#125;<br><br>&#125;<br>raf.close();<br>&#125;<br><br>public static void test3() throws IOException &#123;<br>//分多少块<br>File file = new File(<span class="hljs-string">&quot;met/src/Io/Test09.java&quot;</span>);<br>RandomAccessFile raf = new RandomAccessFile(file,<span class="hljs-string">&quot;r&quot;</span>);<br>//总长度<br>long len = file.length();<br>//每块大小<br>int blockSize = 1024;<br>//块数:多少块<br>int size = (int)Math.ceil(len*1.0/blockSize);<br>//起始位置和大小<br>int beginPos = 0;<br>//实际长度<br>int actualSize = (int)(blockSize&gt;len?len:blockSize);<br><span class="hljs-keyword">for</span>(int i=0;i&lt;size;i++)&#123;<br>beginPos = i*actualSize;<br><span class="hljs-keyword">if</span>(i == size-1)&#123; //最后一块<br>actualSize = (int)len;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>actualSize = blockSize;<br>len-=actualSize;<br>&#125;<br>System.out.println(i + <span class="hljs-string">&quot;--&gt;&quot;</span> + beginPos + <span class="hljs-string">&quot;--&gt;&quot;</span> + actualSize);<br>//随机读取<br>raf.seek(beginPos);<br>//读取操作<br>byte[] data = new byte[1024];<br>int lens = -1;<br><span class="hljs-keyword">while</span> ((lens = raf.read(data)) != -1)&#123;<br><span class="hljs-keyword">if</span>(actualSize &gt; lens)&#123; //获取本次读取的所有内容<br>System.out.println(new String(data,0,lens));<br>actualSize-=lens;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.println(new String(data,0,actualSize));<br><span class="hljs-built_in">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br>raf.close();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-9-面向对象思想封装-分割-案例"><a href="#2-9-面向对象思想封装-分割-案例" class="headerlink" title="2.9 面向对象思想封装 分割(案例)"></a>2.9 面向对象思想封装 分割(案例)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import java.io.*;<br>import java.util.ArrayList;<br>import java.util.List;<br>import java.util.Vector;<br>/**<br> * 面向对象思想封装 分割<br> */<br>public class Test25 &#123;<br>//源头<br>private File src;<br>//目的地(文件夹)<br>private String destDir;<br>//所有分割后的文件存储路径<br>private List&lt;String&gt; destPaths;<br>//每块大小<br>private int blockSize;<br>//块数<br>private int size;<br><br>public Test25(String srcPath,String destDir, int blockSize) &#123;<br>this.src = new File(srcPath);<br>this.destDir = destDir;<br>this.blockSize = blockSize;<br>this.destPaths = new ArrayList&lt;&gt;();<br><br>init();<br>&#125;<br><br>private void <span class="hljs-function"><span class="hljs-title">init</span></span>()&#123;<br>//总长度<br>long len = this.src.length();<br>//块数:多少块<br>this.size = (int)Math.ceil(len*1.0/blockSize);<br>//路径<br><span class="hljs-keyword">for</span> (int i=0;i&lt;size;i++)&#123;<br>this.destPaths.add(this.destDir + <span class="hljs-string">&quot;/&quot;</span> + i + <span class="hljs-string">&quot;-&quot;</span> + this.src.getName());<br>&#125;<br>&#125;<br><br>public void split() throws IOException &#123;<br>//总长度<br>long len = this.src.length();<br>//起始位置和大小<br>int beginPos = 0;<br>//实际长度<br>int actualSize = (int)(blockSize&gt;len?len:blockSize);<br><span class="hljs-keyword">for</span>(int i = 0;i &lt; size;i++)&#123;<br>beginPos = i * actualSize;<br><span class="hljs-keyword">if</span>(i == size-1)&#123; //最后一块<br>actualSize = (int)len;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>actualSize = blockSize;<br>len-=actualSize;<br>&#125;<br>splitDetail(i,beginPos,actualSize);<br>&#125;<br>&#125;<br><br>private void splitDetail(int i,int beginPos,int actualSize) throws IOException &#123;<br>RandomAccessFile raf = new RandomAccessFile(this.src,<span class="hljs-string">&quot;r&quot;</span>);<br>RandomAccessFile raf2 = new RandomAccessFile(this.destPaths.get(i),<span class="hljs-string">&quot;rw&quot;</span>);<br>//随机读取<br>raf.seek(beginPos);<br>//读取操作<br>byte[] data = new byte[1024];<br>int lens = -1;<br><span class="hljs-keyword">while</span> ((lens = raf.read(data)) != -1)&#123;<br><span class="hljs-keyword">if</span>(actualSize &gt; lens)&#123; //获取本次读取的所有内容<br>System.out.println(new String(data,0,lens));<br>raf2.write(data,0,lens);<br>actualSize-=lens;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.println(new String(data,0,actualSize));<br>raf2.write(data,0,actualSize);<br><span class="hljs-built_in">break</span>;<br>&#125;<br>&#125;<br>raf2.close();<br>raf.close();<br>&#125;<br><br>public void merge(String destPath) throws IOException &#123;<br> //输出流<br>OutputStream bos = new BufferedOutputStream(new FileOutputStream(destPath,<span class="hljs-literal">true</span>));<br><span class="hljs-keyword">for</span>(int i = 0;i &lt; destPaths.size();i++)&#123;<br>InputStream bis = new BufferedInputStream(new FileInputStream(destPaths.get(i)));<br>byte[] datas = new byte[1024];<br>int len = -1;<br><span class="hljs-keyword">while</span> ((len=bis.read(datas))!=-1)&#123;<br>bos.write(datas,0,len);<br>&#125;<br>bos.flush();<br>bis.close();<br>&#125;<br>bos.close();<br>&#125;<br><br>//使用SequenceInputStream相当于容器<br>public void merge1(String destPath) throws IOException &#123;<br>//输出流<br>OutputStream bos = new BufferedOutputStream(new FileOutputStream(destPath,<span class="hljs-literal">true</span>));<br>Vector&lt;InputStream&gt; vi = new Vector&lt;&gt;();<br>SequenceInputStream sis = null;<br><span class="hljs-keyword">for</span>(int i = 0;i &lt; destPaths.size();i++)&#123;<br>vi.add(new BufferedInputStream(new FileInputStream(destPaths.get(i))));<br>&#125;<br>sis = new SequenceInputStream(vi.elements());<br>//拷贝<br>byte[] datas = new byte[1024];<br>int len = -1;<br><span class="hljs-keyword">while</span> ((len=sis.read(datas))!=-1)&#123;<br>bos.write(datas,0,len);<br>&#125;<br>bos.flush();<br>sis.close();<br>bos.close();<br>&#125;<br><br>public static void main(String[] args) throws IOException &#123;<br>Test25 sf = new Test25(<span class="hljs-string">&quot;met/src/img/io.jpg&quot;</span>,<span class="hljs-string">&quot;met/src/img&quot;</span>,1024*10);<br>sf.split();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-0-FileUtils-工具类"><a href="#3-0-FileUtils-工具类" class="headerlink" title="3.0 FileUtils(工具类)"></a>3.0 FileUtils(工具类)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>package Io;<br><br>import org.apache.commons.io.FileUtils;<br>import org.apache.commons.io.IOUtils;<br>import org.apache.commons.io.LineIterator;<br>import org.apache.commons.io.filefilter.*;<br><br>import java.io.File;<br>import java.io.IOException;<br>import java.net.URL;<br>import java.util.ArrayList;<br>import java.util.Collection;<br>import java.util.List;<br><br>//工具类 FileUtils<br>public class Test26 &#123;<br>public static void main(String[] args) throws IOException &#123;<br>//文件大小<br>long len = FileUtils.sizeOf(new File(<span class="hljs-string">&quot;met/src/img/io.jpg&quot;</span>));<br>System.out.println(len);<br>//目录大小<br>len = FileUtils.sizeOf(new File(<span class="hljs-string">&quot;met/src/img&quot;</span>));<br>System.out.println(len);<br><br>/**列出子孙集<br> * 1.参数1:文件路径<br> * 2.参数2:需要过滤的文件<br> * 3.参数3:需要过滤的目录<br> */<br>Collection&lt;File&gt; files = FileUtils.listFiles(new File(<span class="hljs-string">&quot;met/src/img&quot;</span>),<br>EmptyFileFilter.NOT_EMPTY, null);<br><span class="hljs-keyword">for</span>(File file:files)&#123;<br>System.out.println(file.getAbsolutePath());<br>&#125;<br><br>//DirectoryFileFilter.INSTANCE 文件的子孙集<br>files = FileUtils.listFiles(new File(<span class="hljs-string">&quot;met/src/img&quot;</span>),<br>EmptyFileFilter.NOT_EMPTY, DirectoryFileFilter.INSTANCE);<br><br>//只要java后缀的文件<br>files = FileUtils.listFiles(new File(<span class="hljs-string">&quot;met/src/img&quot;</span>),<br>new SuffixFileFilter(<span class="hljs-string">&quot;.java&quot;</span>), DirectoryFileFilter.INSTANCE);<br><br>//要java,class和空文件后缀的文件<br>files = FileUtils.listFiles(new File(<span class="hljs-string">&quot;met/src/img&quot;</span>),<br>FileFilterUtils.or(new SuffixFileFilter(<span class="hljs-string">&quot;java&quot;</span>),new SuffixFileFilter(<span class="hljs-string">&quot;class&quot;</span>),EmptyFileFilter.EMPTY), DirectoryFileFilter.INSTANCE);<br><br>System.out.println(<span class="hljs-string">&quot;---------------------------------------------&quot;</span>);<br><br>//读取文件<br>String str = FileUtils.readFileToString(new File(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>),<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>System.out.println(str);<br>byte[] datas = FileUtils.readFileToByteArray(new File(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>));<br><br>//逐行读取<br>List&lt;String&gt; lists = FileUtils.readLines(new File(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-keyword">for</span>(String list:lists)&#123;<br>System.out.println(list);<br>&#125;<br>LineIterator it = FileUtils.lineIterator(new File(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-keyword">while</span> (it.hasNext())&#123;<br>System.out.println(it.nextLine());<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;---------------------------------------------&quot;</span>);<br><br>//写出文件<br>FileUtils.write(new File(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>),<span class="hljs-string">&quot;学习时间伟大的事\r\n&quot;</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>,<span class="hljs-literal">true</span>);<br>FileUtils.writeStringToFile(new File(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>),<span class="hljs-string">&quot;学习时间伟大的事&quot;</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>FileUtils.writeByteArrayToFile(new File(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>),<span class="hljs-string">&quot;学习时间幸福的事&quot;</span>.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>),<span class="hljs-literal">true</span>);<br><br>//列表写文件<br>List&lt;String&gt; list = new ArrayList&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;哈哈&quot;</span>);<br>list.add(<span class="hljs-string">&quot;嘿嘿&quot;</span>);<br>list.add(<span class="hljs-string">&quot;哦哦&quot;</span>);<br>//参数3是连接符   <br>FileUtils.writeLines(new File(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>),list,<span class="hljs-string">&quot;....&quot;</span>,<span class="hljs-literal">true</span>);<br><br>System.out.println(<span class="hljs-string">&quot;---------------------------------------------&quot;</span>);<br><br>//拷贝 重点<br>//复制文件<br>FileUtils.copyFile(new File(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>),new File(<span class="hljs-string">&quot;met/src/Io/abcc&quot;</span>));<br>//发复制文件到目录<br>FileUtils.copyFileToDirectory(new File(<span class="hljs-string">&quot;met/src/Io/abc&quot;</span>),new File(<span class="hljs-string">&quot;met/src&quot;</span>));<br>//复制目录到目录<br>FileUtils.copyDirectoryToDirectory(new File(<span class="hljs-string">&quot;met/src/Io&quot;</span>),new File(<span class="hljs-string">&quot;met/src/Ios&quot;</span>));<br>//复制目录<br>FileUtils.copyDirectory(new File(<span class="hljs-string">&quot;met/src/Io&quot;</span>),new File(<span class="hljs-string">&quot;met/src/Ios&quot;</span>));<br>//拷贝URL内容<br>FileUtils.copyURLToFile(new URL(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>),new File(<span class="hljs-string">&quot;met/src/Io/abcc.html&quot;</span>));<br>String str1 = IOUtils.toString(new URL(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础</title>
    <link href="/2021/04/26/java%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/04/26/java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>java基础包含数据类型和集合的基本使用。</p><h2 id="1-基于SE的总结"><a href="#1-基于SE的总结" class="headerlink" title="1 基于SE的总结"></a>1 基于SE的总结</h2><h3 id="1-0-重载"><a href="#1-0-重载" class="headerlink" title="1.0 重载"></a>1.0 重载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//overload 重载</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n1,<span class="hljs-keyword">int</span> n2)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> n1+n2;<br>&#125;<br><br><span class="hljs-comment">//方法名相同，参数个数不同，构成重载</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n1,<span class="hljs-keyword">int</span> n2,<span class="hljs-keyword">int</span> n3)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> n1+n2+n3;<br>&#125;<br><span class="hljs-comment">//方法名相同，参数类型不同，构成重载</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">double</span> n1,<span class="hljs-keyword">int</span> n2)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> n1+n2;<br>&#125;<br><span class="hljs-comment">//方法名相同，参数顺序不同，构成重载</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n1,<span class="hljs-keyword">double</span> n2)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> n1+n2;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-1-和equals的区别"><a href="#1-1-和equals的区别" class="headerlink" title="1.1 ==和equals的区别"></a>1.1 ==和equals的区别</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;==&quot;</span>是判断两个变量或实例是不是指向同一个内存空间。<br><span class="hljs-string">&quot;equals&quot;</span>是判断两个变量或实例所指向的内存空间的值是不是相同。<br></code></pre></td></tr></table></figure><h3 id="1-2-抽象和接口"><a href="#1-2-抽象和接口" class="headerlink" title="1.2 抽象和接口"></a>1.2 抽象和接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象 意义：为子类提供统一的、规范的模板。子类必须实现相关的抽象方法</span><br><span class="hljs-comment">//1. 有抽象方法的类只能定义成抽象类</span><br><span class="hljs-comment">//2. 抽象类不能实例化，即不能用new来实例化抽象类。</span><br><span class="hljs-comment">//3. 抽象类可以包含属性、方法、构造方法。但是构造方法不能用来new实例，只能用来被子类调用。</span><br><span class="hljs-comment">//4. 抽象类只能用来被继承。</span><br><span class="hljs-comment">//5. 抽象方法必须被子类实现。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test10</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Test10 animal = <span class="hljs-keyword">new</span> Dogs();<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dogs</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Test10</span></span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;汪汪汪&quot;</span>);<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//接口</span><br><span class="hljs-comment">//1.extends：接口可以多继承。类只能单继承</span><br><span class="hljs-comment">//2.常量：接口中的属性只能是常量，总是：public static final 修饰。不写也是。</span><br><span class="hljs-comment">//3.方法：接口中的方法只能是：public abstract。 省略的话，也是public abstract。</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Test11</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">//接口的多继承</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">A</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testa</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">B</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testb</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span>,<span class="hljs-title">B</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testc</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">D</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testd</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tests</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">C</span>,<span class="hljs-title">D</span></span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testa</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testb</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testc</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testd</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-3-非静态、静态、匿名内部类"><a href="#1-3-非静态、静态、匿名内部类" class="headerlink" title="1.3 非静态、静态、匿名内部类"></a>1.3 非静态、静态、匿名内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//非静态内部类、静态内部类、匿名内部类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test12</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//创建非静态内部类对象</span><br>Other.Inner inner = <span class="hljs-keyword">new</span> Other().<span class="hljs-function">new <span class="hljs-title">Inner</span><span class="hljs-params">()</span></span>;<br>inner.show();<br><span class="hljs-comment">//创建静态内部类对象</span><br>Other.Inner1 inner2 = <span class="hljs-keyword">new</span> Other.Inner1();<br><span class="hljs-comment">//创建匿名内部类</span><br>Test12.test12(<span class="hljs-keyword">new</span> AA() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">aa</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;匿名内部类&quot;</span>);<br>&#125;<br>&#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test12</span><span class="hljs-params">(AA a)</span></span>&#123;<br>   a.aa();<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Other</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">12</span>;<br><br><span class="hljs-comment">//非静态内部类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span></span>&#123;<br><span class="hljs-keyword">int</span> age = <span class="hljs-number">13</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> age = <span class="hljs-number">14</span>;<br>System.out.println(<span class="hljs-string">&quot;外部类的成员变量age:&quot;</span>+Other.<span class="hljs-keyword">this</span>.age);<br>System.out.println(<span class="hljs-string">&quot;内部类的成员变量age:&quot;</span>+<span class="hljs-keyword">this</span>.age);<br>System.out.println(<span class="hljs-string">&quot;局部变量age:&quot;</span>+age);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//静态内部类</span><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner1</span></span>&#123;&#125;<br><br>&#125;<br><br><span class="hljs-comment">//匿名内部类</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AA</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">aa</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-数组的拷贝-arraycpoy"><a href="#1-4-数组的拷贝-arraycpoy" class="headerlink" title="1.4 数组的拷贝(arraycpoy)"></a>1.4 数组的拷贝(arraycpoy)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试数组的拷贝</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test13</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>String s[] = &#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>&#125;;<br>testArrayCopy1(s,<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//extendArray(s);</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testArrayCopy</span><span class="hljs-params">()</span></span>&#123;<br>String s1[] = &#123;<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>, <span class="hljs-string">&quot;dd&quot;</span>,<span class="hljs-string">&quot;ee&quot;</span>&#125;;<br>String s2[] = <span class="hljs-keyword">new</span> String[<span class="hljs-number">10</span>];<br><span class="hljs-comment">//参数1：需要拷贝的源文件  参数2：源文件拷贝的位置从0开始  参数3：被拷贝的现文件</span><br><span class="hljs-comment">//参数4：现文件开始存的位置  参数5：拷贝源文件的元素个数</span><br>System.arraycopy(s1, <span class="hljs-number">2</span>, s2, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt; s2.length;i++)&#123;<br>System.out.println(s2[i]);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//删除数组中的一个元素</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testArrayCopy1</span><span class="hljs-params">()</span></span>&#123;<br>String s1[] = &#123;<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>, <span class="hljs-string">&quot;dd&quot;</span>,<span class="hljs-string">&quot;ee&quot;</span>&#125;;<br><span class="hljs-comment">//String s2[] = new String[10];</span><br><br>System.arraycopy(s1, <span class="hljs-number">3</span>, s1, <span class="hljs-number">3</span>-<span class="hljs-number">1</span>, s1.length-<span class="hljs-number">3</span>);<br>s1[s1.length-<span class="hljs-number">1</span>] = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt; s1.length;i++)&#123;<br>System.out.println(s1[i]);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//删除数组中指定索引的位置，并将数组返回</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] testArrayCopy1(String[] s,<span class="hljs-keyword">int</span> index)&#123;<br><br>System.arraycopy(s, index+<span class="hljs-number">1</span>, s, index, s.length-index-<span class="hljs-number">1</span>);<br>s[s.length-<span class="hljs-number">1</span>] = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt; s.length;i++)&#123;<br>System.out.println(s[i]);<br>&#125;<br><span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-comment">//数组的扩容 (本质上：先定义一个更大的数组，然后将原数组的内容原封不动拷贝到新数组)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] extendArray(String[] s1)&#123;<br><span class="hljs-comment">//String[] s1 = &#123;&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;&#125;;</span><br>String[] s2 = <span class="hljs-keyword">new</span> String[s1.length+<span class="hljs-number">10</span>];<br>System.arraycopy(s1,<span class="hljs-number">0</span>,s2,<span class="hljs-number">0</span>,s1.length);<br><span class="hljs-keyword">for</span> (String n:s2)&#123;<br>System.out.println(n);<br>&#125;<br><span class="hljs-keyword">return</span> s2;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-5-冒泡、选择、二分"><a href="#1-5-冒泡、选择、二分" class="headerlink" title="1.5 冒泡、选择、二分"></a>1.5 冒泡、选择、二分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">//冒泡、排序、二分查找法选择排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test15</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span>[] values = &#123; <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span> &#125;;<br><span class="hljs-comment">//fun1(values);</span><br><span class="hljs-comment">//System.out.println(Arrays.toString(values));</span><br><br><span class="hljs-comment">//二分查找法</span><br><span class="hljs-comment">//System.out.println(fun2(values,6));</span><br><br><span class="hljs-comment">//选择排序</span><br>fun3(values);<br>System.out.println(Arrays.toString(values));<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] fun1(<span class="hljs-keyword">int</span>[] values)&#123;<br><span class="hljs-keyword">int</span> temp;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.length-<span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; values.length - <span class="hljs-number">1</span> - i; j++) &#123;<br><span class="hljs-keyword">if</span> (values[j] &gt; values[j + <span class="hljs-number">1</span>]) &#123;<br>temp = values[j];<br>values[j] = values[j + <span class="hljs-number">1</span>];<br>values[j + <span class="hljs-number">1</span>] = temp;<br>flag = <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(flag) <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> values;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fun2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] values,<span class="hljs-keyword">int</span> index)</span></span>&#123;<br><span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> length = values.length-<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">while</span> (low&lt;=length)&#123;<br><span class="hljs-keyword">int</span> mid = (low + length)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(index == values[mid]) <span class="hljs-keyword">return</span> mid;<br><span class="hljs-keyword">if</span>(index&gt;values[mid])&#123;<br>low = mid+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(index&lt;values[mid])&#123;<br>length = mid-<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] fun3(<span class="hljs-keyword">int</span>[] values)&#123;<br><span class="hljs-keyword">int</span> k,temp = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt; values.length-<span class="hljs-number">1</span>;i++)&#123;<br>k = i;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>;j &lt; values.length;j++)&#123;<br><span class="hljs-keyword">if</span>(values[k]&gt;values[j]) k = j;<br>&#125;<br><span class="hljs-keyword">if</span>(k!=i)&#123;<br>   temp = values[k];<br>   values[k] = values[i];<br>   values[i] = temp;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> values;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-6-包装类"><a href="#1-6-包装类" class="headerlink" title="1.6 包装类"></a>1.6 包装类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br>   <span class="hljs-comment">//包装类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test16</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//基本数据类型转成包装类对象</span><br>Integer n1 = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">3</span>);<br>Integer n2 = Integer.valueOf(<span class="hljs-number">6</span>);<br><br><span class="hljs-comment">//把包装类对象转成基本类型</span><br><span class="hljs-keyword">int</span> n3 = n1.intValue();<br><span class="hljs-keyword">double</span> n4 = n1.doubleValue();<br><br><span class="hljs-comment">//数字字符串转成包装类</span><br>Integer n5 = <span class="hljs-keyword">new</span> Integer(<span class="hljs-string">&quot;999999&quot;</span>);<br>Integer n6 = Integer.parseInt(<span class="hljs-string">&quot;999999&quot;</span>);<br><br><span class="hljs-comment">//把包装类转成字符串</span><br>String n7 = n6.toString();<br><br><span class="hljs-comment">//自动装箱 调用了Integer.valueOf()</span><br>Integer n8 = <span class="hljs-number">666</span>;<br><span class="hljs-comment">//自动拆箱  调用了 n8..intValue()</span><br><span class="hljs-keyword">int</span> n9 = n8;<br><br><span class="hljs-comment">//缓存[-128,127]的数字。实际就是系统初始化的时候，创建了[-128，127]之间的一个缓存数组</span><br><span class="hljs-comment">//当我们调用ValueOf()的时候，首先检查是否在[-128，127]之间，如果在这个范围则直接在缓存数组中拿出已经建好的对象</span><br><span class="hljs-comment">//如果不在这个范围内则创建新的Integer对象</span><br>Integer in1 = Integer.valueOf(-<span class="hljs-number">128</span>);<br>Integer in2 = -<span class="hljs-number">128</span>;<br>System.out.println(in1 == in2);<span class="hljs-comment">//true 因为123在缓存范围内</span><br>System.out.println(in1.equals(in2));<span class="hljs-comment">//true</span><br>Integer in3 = <span class="hljs-number">1234</span>;<br>Integer in4 = <span class="hljs-number">1234</span>;<br>System.out.println(in3 == in4);<span class="hljs-comment">//false 因为1234不在缓存范围内</span><br>System.out.println(in3.equals(in4));<span class="hljs-comment">//true</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-7-日期转换和日历类"><a href="#1-7-日期转换和日历类" class="headerlink" title="1.7 日期转换和日历类"></a>1.7 日期转换和日历类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.DateFormat;<br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Calendar;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.GregorianCalendar;<br><br><span class="hljs-comment">//日期转换和日历类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test18</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br><span class="hljs-comment">//把时间对象按照&quot;格式字符串指定的格式&quot;转成相应的字符串</span><br>DateFormat df = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);<br>String str = df.format(<span class="hljs-keyword">new</span> Date());<br>System.out.println(str);<br><br><span class="hljs-comment">//把字符串按照&quot;格式字符串指定的格式&quot;转成相应的时间对象</span><br>DateFormat df1 = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日 hh时mm分ss秒&quot;</span>);<br>Date date = df1.parse(<span class="hljs-string">&quot;2018年6月31日 12时21分26秒&quot;</span>);<br>System.out.println(date);<br><br><span class="hljs-comment">//测试其他格式字符   D 获取本时间是所处年份的第几天</span><br>DateFormat df2 = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;D&quot;</span>);<br>String str1 = df2.format(<span class="hljs-keyword">new</span> Date());<br>System.out.println(str1);<br><br><span class="hljs-comment">//设置日期的相关元素</span><br>Calendar ca = <span class="hljs-keyword">new</span> GregorianCalendar();<br>System.out.println(ca);<br>ca.set(Calendar.YEAR,<span class="hljs-number">2010</span>);<br>System.out.println(ca);<br>ca.add(Calendar.YEAR,-<span class="hljs-number">10</span>);<br><span class="hljs-keyword">int</span> year = ca.get(Calendar.YEAR);<br>System.out.println(year);<br><br><span class="hljs-comment">//日期对象和事件对象的转化</span><br>Date d = ca.getTime();<br>System.out.println(d);<span class="hljs-comment">//Wed Sep 20 16:36:02 CST 2000</span><br>ca.setTime(<span class="hljs-keyword">new</span> Date());<br><br><br><span class="hljs-comment">//-----------------------------------------</span><br>String ss = <span class="hljs-string">&quot;2018-4-12&quot;</span>;<br>DateFormat df3 = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>Date date1 = df3.parse(ss);<br>Calendar cal = <span class="hljs-keyword">new</span> GregorianCalendar();<br>cal.setTime(date1);<br>System.out.println(<span class="hljs-string">&quot;日\t一\t二\t三\t四\t五\t六&quot;</span>);<br>ca.set(Calendar.DAY_OF_MONTH,<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;ca.get(Calendar.DAY_OF_WEEK)-<span class="hljs-number">1</span>;i++)&#123;<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br><span class="hljs-comment">//获取当前月最大天数</span><br><span class="hljs-keyword">int</span> maxdays = ca.getActualMaximum(Calendar.DATE);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= maxdays;i++)&#123;<br>System.out.print(ca.get(Calendar.DAY_OF_MONTH)+<span class="hljs-string">&quot;\t&quot;</span>);<br><span class="hljs-comment">//DAY_OF_WEEK 这个时间是一周中的第几天</span><br><span class="hljs-keyword">if</span>(ca.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY)&#123;<br>System.out.println();<br>&#125;<br>ca.add(Calendar.DAY_OF_MONTH,<span class="hljs-number">1</span>); <span class="hljs-comment">//是nowDate+1天,一天后的日期</span><br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-集合的总结"><a href="#2-集合的总结" class="headerlink" title="2 集合的总结"></a>2 集合的总结</h2><h3 id="2-0-手动实现ArrayList"><a href="#2-0-手动实现ArrayList" class="headerlink" title="2.0 手动实现ArrayList"></a>2.0 手动实现ArrayList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.sound.midi.Soundbank;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">//手动实现ArrayList</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test23</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br><span class="hljs-keyword">private</span> Object[] elementData;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFALT_CAPACITY = <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Test23</span><span class="hljs-params">()</span></span>&#123;<br>elementData = <span class="hljs-keyword">new</span> Object[DEFALT_CAPACITY];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Test23</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity)</span></span>&#123;<br><span class="hljs-keyword">if</span>(capacity &lt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;索引不能为负数&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(capacity == <span class="hljs-number">0</span>)&#123;<br>elementData = <span class="hljs-keyword">new</span> Object[DEFALT_CAPACITY];<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>elementData = <span class="hljs-keyword">new</span> Object[capacity];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(E element)</span></span>&#123;<br><span class="hljs-comment">//扩容</span><br><span class="hljs-keyword">if</span>(elementData.length == size)&#123;<br>Object[] newArray = <span class="hljs-keyword">new</span> Object[elementData.length + (elementData.length&gt;&gt;<span class="hljs-number">1</span>)];<br>System.arraycopy(elementData,<span class="hljs-number">0</span>,newArray,<span class="hljs-number">0</span>,elementData.length);<br>elementData = newArray;<br>&#125;<br><br>elementData[size++] = element;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>checkRange(index);<br><span class="hljs-keyword">return</span> (E)elementData[index];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(E element,<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>checkRange(index);<br>elementData[index] = element;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkRange</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br><span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span> || index &gt; size-<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;索引不合法:&quot;</span>+index);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(E element)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; size;i++)&#123;<br> <span class="hljs-keyword">if</span>(element.equals(get(i)))&#123;<br> remove(i);<br> &#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br><span class="hljs-keyword">int</span> numMoved = elementData.length - index - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(numMoved &gt; <span class="hljs-number">0</span>) &#123;<br>System.arraycopy(elementData, index + <span class="hljs-number">1</span>, elementData, index, numMoved);<br>&#125;<br>elementData[--size] = <span class="hljs-keyword">null</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> size;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span> ? <span class="hljs-keyword">true</span>:<span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Test23&#123;&quot;</span> +<br><span class="hljs-string">&quot;elementData=&quot;</span> + Arrays.toString(elementData) +<br><span class="hljs-string">&quot;, size=&quot;</span> + size +<br><span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Test23 list = <span class="hljs-keyword">new</span> Test23(<span class="hljs-number">20</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">80</span>;i++)&#123;<br>list.add(<span class="hljs-string">&quot;haha&quot;</span>+i);<br>&#125;<br>list.set(<span class="hljs-string">&quot;666&quot;</span>,<span class="hljs-number">5</span>);<br>list.remove(<span class="hljs-string">&quot;haha5&quot;</span>);<br>list.remove(<span class="hljs-number">4</span>);<br>System.out.println(list);<br>System.out.println(list.get(<span class="hljs-number">10</span>));<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-1-手动实现双向链表"><a href="#2-1-手动实现双向链表" class="headerlink" title="2.1 手动实现双向链表"></a>2.1 手动实现双向链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//集合中接口和类的关系</span><br><span class="hljs-comment">//Collection接口是集合类的根接口，Java中没有提供这个接口的直接的实现类。但是却让其被继承产生了两个接口，</span><br>    <span class="hljs-comment">//就是Set和List。Set中不能包含重复的元素。List是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式。</span><br><span class="hljs-comment">//Map是Java.util包中的另一个接口，它和Collection接口没有关系，是相互独立的，但是都属于集合类的一部分。</span><br>    <span class="hljs-comment">//Map包含了key-value对。Map不能包含重复的key，但是可以包含相同的value。</span><br><br><span class="hljs-comment">//链表</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test24</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br><span class="hljs-keyword">private</span> Node first;<br><span class="hljs-keyword">private</span> Node last;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br><br><span class="hljs-comment">//[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(E element)</span></span>&#123;<br>Node node = <span class="hljs-keyword">new</span> Node(element);<br><span class="hljs-keyword">if</span>(first == <span class="hljs-keyword">null</span>)&#123;<br>first = node;<br>last = node;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>node.previous = last;<br>node.next = <span class="hljs-keyword">null</span>;<br><br>last.next = node;<br>last = node;<br>&#125;<br>size++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index,Object obj)</span></span>&#123;<br>Node newNode = <span class="hljs-keyword">new</span> Node(obj);<br>Node temp = getNode(index);<br><span class="hljs-keyword">if</span>(temp != <span class="hljs-keyword">null</span>)&#123;<br>Node up = temp.previous;<br>up.next = newNode;<br>newNode.previous = up;<br><br>newNode.next = temp;<br>temp.previous = up;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>Node node = getNode(index);<br><span class="hljs-keyword">if</span>(node != <span class="hljs-keyword">null</span>)&#123;<br>Node up = node.previous;<br>Node down = node.next;<br><span class="hljs-keyword">if</span>(up != <span class="hljs-keyword">null</span>)&#123;<br>up.next = down;<br>&#125;<br><span class="hljs-keyword">if</span>(down != <span class="hljs-keyword">null</span>)&#123;<br>down.previous = up;<br>&#125;<br><span class="hljs-keyword">if</span>(index == <span class="hljs-number">0</span>)&#123;<br>first = down;<br>&#125;<br><span class="hljs-keyword">if</span>(index == size - <span class="hljs-number">1</span>)&#123;<br>last = up;<br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br><span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span> || index &gt; size-<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;索引数字不符合:&quot;</span>+index);<br>&#125;<br><br>Node temp = getNode(index);<br><span class="hljs-keyword">return</span> (E)temp.element;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">getNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>Node temp = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">if</span>(index &lt; (size&gt;&gt;<span class="hljs-number">1</span>))&#123;<br>temp = first;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; index;i++)&#123;<br>temp = temp.next;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>temp = last;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = size -<span class="hljs-number">1</span>;i &gt; index;i--)&#123;<br>temp = temp.previous;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;[&quot;</span>);<br>Node lemp = first;<br><span class="hljs-keyword">while</span> (lemp != <span class="hljs-keyword">null</span>)&#123;<br>sb.append(lemp.element+<span class="hljs-string">&quot;,&quot;</span>);<br>lemp = lemp.next;<br>&#125;<br>sb.setCharAt(sb.length()-<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;]&#x27;</span>);<br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Test24&lt;String&gt; test = <span class="hljs-keyword">new</span> Test24&lt;&gt;();<br>test.add(<span class="hljs-string">&quot;aa&quot;</span>);<br>test.add(<span class="hljs-string">&quot;bb&quot;</span>);<br>test.add(<span class="hljs-string">&quot;cc&quot;</span>);<br>test.add(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;cc&quot;</span>);<br>test.remove(<span class="hljs-number">3</span>);<br>System.out.println(test);<br>System.out.println(test.get(<span class="hljs-number">1</span>));<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;<br>Node previous;<span class="hljs-comment">//上一个节点</span><br>Node next;<span class="hljs-comment">//下一个节点</span><br>Object element;<span class="hljs-comment">//元素数据</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object element)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.element = element;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Node previous, Node next, Object element)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.previous = previous;<br><span class="hljs-keyword">this</span>.next = next;<br><span class="hljs-keyword">this</span>.element = element;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-2-HashMap的基本使用"><a href="#2-2-HashMap的基本使用" class="headerlink" title="2.2 HashMap的基本使用"></a>2.2 HashMap的基本使用</h3><p> HashMap底层数据结构：Entry数组+链表+红黑树（JDK1.8版本） Entry+链表（JDK1.7版本）<br>  <img src="https://img.wenhairu.com/images/2021/05/06/aIPKI.png" alt="hash"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">//List(列表):元素有序,元素可以重复 (有索引)</span><br><span class="hljs-comment">//Set(集):元素无序,不可重复 (没有索引)。 遍历只能用Iterator迭代器和增强for, 不能使用普通for遍历</span><br><span class="hljs-comment">//ArrayList(数组列表): 查询快,增删慢。</span><br><span class="hljs-comment">//LinkedList(链表): 查询慢,增删快。</span><br><span class="hljs-comment">//HashSet(哈希表): 查询快,增删慢。 (底层其实就是Map)。存放的引用类型需重写hashCode()和equals()方法。</span><br><span class="hljs-comment">//LinkedHashSet(哈希链表): 查询慢,增删快。 有序的,存放顺序和取出顺序一致</span><br><span class="hljs-comment">//map</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test25</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//HashMap底层采用了哈希表,哈希表的基本结构是&quot;数组+链表&quot;</span><br>Map&lt;Integer,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>map.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;aa&quot;</span>);<br>map.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;bb&quot;</span>);<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;cc&quot;</span>);<br>System.out.println(map.get(<span class="hljs-number">1</span>));<br>System.out.println(map.isEmpty());<br>System.out.println(map.containsKey(<span class="hljs-number">2</span>));<br>System.out.println(map.containsValue(<span class="hljs-string">&quot;dd&quot;</span>));<br><br>Map&lt;Integer,String&gt; map1 = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>map1.put(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;dd&quot;</span>);<br>map1.put(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;ee&quot;</span>);<br>map.putAll(map1);<br>System.out.println(map);<br><br><span class="hljs-comment">//map键中不能重复（重复根据equals来判断），则新的重新覆盖</span><br>map1.put(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;ff&quot;</span>);<br>System.out.println(map1);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-3-手动实现HashMap"><a href="#2-3-手动实现HashMap" class="headerlink" title="2.3 手动实现HashMap"></a>2.3 手动实现HashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">//自定义一个HashMap</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test26</span>&lt;<span class="hljs-title">k</span>,<span class="hljs-title">v</span>&gt; </span>&#123;<br>Nodes[] table; <span class="hljs-comment">//位桶数组</span><br><span class="hljs-keyword">int</span> size;  <span class="hljs-comment">//存放键值对个数</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Test26</span><span class="hljs-params">()</span></span>&#123;<br>table = <span class="hljs-keyword">new</span> Nodes[<span class="hljs-number">16</span>]; <span class="hljs-comment">//长度一般定义成2的整数幂</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(k key,v values)</span></span>&#123;<br><span class="hljs-comment">//定义新的节点对象</span><br>Nodes newNode = <span class="hljs-keyword">new</span> Nodes();<br>newNode.hash = myHash(key.hashCode(), table.length);<br>newNode.key = key;<br>newNode.values = values;<br>newNode.next = <span class="hljs-keyword">null</span>;<br><br>Nodes leap = table[newNode.hash];<br>Nodes iterLast = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">if</span>(leap == <span class="hljs-keyword">null</span>)&#123;<br><span class="hljs-comment">//此处数组元素不为空，则直接将新新节点放进去</span><br>table[newNode.hash] = newNode;<br>size++;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><br><span class="hljs-comment">//此处数组元素不为空，则遍历对应链表</span><br><span class="hljs-keyword">while</span> (leap != <span class="hljs-keyword">null</span>)&#123;<br><span class="hljs-comment">//判断key如果重复则覆盖</span><br><span class="hljs-keyword">if</span>(leap.key.equals(key))&#123;<br><span class="hljs-comment">//System.out.println(&quot;key重复了&quot;);</span><br>leap.values = values;<br><span class="hljs-keyword">break</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//key不重复</span><br>iterLast = leap;<br>leap = leap.next;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(leap==<span class="hljs-keyword">null</span>)&#123;<br>iterLast.next = newNode;<br>size++;<br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> v <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span></span>&#123;<br>v values = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">int</span> hash = myHash(key.hashCode(), table.length);<br><br><span class="hljs-keyword">if</span>(table[hash] != <span class="hljs-keyword">null</span>)&#123;<br>Nodes node = table[hash];<br><span class="hljs-keyword">while</span> (node != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">if</span>(node.key.equals(key))&#123;<br>values = (v)node.values;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>node = node.next;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> values;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">myHash</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> length)</span></span>&#123;<br><span class="hljs-comment">//System.out.println(v&amp;(length-1));</span><br><span class="hljs-comment">//System.out.println(v%length);</span><br><span class="hljs-keyword">return</span> v&amp;(length-<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;&#123;&quot;</span>);<br><span class="hljs-comment">//遍历数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; table.length;i++)&#123;<br>Nodes temp = table[i];<br><span class="hljs-comment">//遍历链表</span><br><span class="hljs-keyword">while</span> (temp != <span class="hljs-keyword">null</span>)&#123;<br>sb.append(temp.key + <span class="hljs-string">&quot;:&quot;</span> + temp.values + <span class="hljs-string">&quot;,&quot;</span>);<br>temp = temp.next;<br>&#125;<br>&#125;<br>sb.setCharAt(sb.length()-<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>);<br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Test26&lt;Integer,String&gt; test = <span class="hljs-keyword">new</span> Test26&lt;&gt;();<br>test.put(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;aa&quot;</span>);<br>test.put(<span class="hljs-number">20</span>,<span class="hljs-string">&quot;bb&quot;</span>);<br>test.put(<span class="hljs-number">30</span>,<span class="hljs-string">&quot;cc&quot;</span>);<br>test.put(<span class="hljs-number">20</span>,<span class="hljs-string">&quot;ssss&quot;</span>);<br><br>test.put(<span class="hljs-number">53</span>,<span class="hljs-string">&quot;zzzzz&quot;</span>);<br>test.put(<span class="hljs-number">69</span>,<span class="hljs-string">&quot;xxxxx&quot;</span>);<br>test.put(<span class="hljs-number">85</span>,<span class="hljs-string">&quot;yyyyy&quot;</span>);<br>System.out.println(test);<br>System.out.println(test.get(<span class="hljs-number">84</span>));<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Nodes</span>&lt;<span class="hljs-title">k</span>,<span class="hljs-title">v</span>&gt; </span>&#123;<br><span class="hljs-keyword">int</span> hash;<br>k key;<br>v values;<br>Nodes next;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-4-TreeMap的基本使用"><a href="#2-4-TreeMap的基本使用" class="headerlink" title="2.4 TreeMap的基本使用"></a>2.4 TreeMap的基本使用</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//1. HashMap: 线程不安全，效率高。允许key或value为null。</span><br><span class="hljs-comment">//2. HashTable: 线程安全，效率低。不允许key或value为null。</span><br><br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><br><span class="hljs-comment">//测试TreeMap  一般用于排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test27</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Map&lt;Integer,String&gt; map = <span class="hljs-keyword">new</span> TreeMap&lt;&gt;();<br>map.put(<span class="hljs-number">20</span>,<span class="hljs-string">&quot;aa&quot;</span>);<br>map.put(<span class="hljs-number">30</span>,<span class="hljs-string">&quot;bb&quot;</span>);<br>map.put(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;cc&quot;</span>);<br><br><span class="hljs-comment">//KeySet():</span><br><span class="hljs-comment">//将Map中所有的键存入到set集合中。因为set具备迭代器。所有可以迭代方式取出所有的键，再根据get方法。获取每一个键对应的值。</span><br><span class="hljs-comment">//keySet():迭代后只能通过get()取key</span><br><span class="hljs-keyword">for</span>(Integer key:map.keySet())&#123;<br>System.out.println(key + <span class="hljs-string">&quot;----&quot;</span> + map.get(key));<br>&#125;<br><br><span class="hljs-comment">//</span><br>Map&lt;Emp,String&gt; map1 = <span class="hljs-keyword">new</span> TreeMap&lt;&gt;();<br>map1.put(<span class="hljs-keyword">new</span> Emp(<span class="hljs-number">100</span>,<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-number">50000</span>),<span class="hljs-string">&quot;aaaaaaaaaaa&quot;</span>);<br>map1.put(<span class="hljs-keyword">new</span> Emp(<span class="hljs-number">200</span>,<span class="hljs-string">&quot;bbb&quot;</span>,<span class="hljs-number">5000</span>),<span class="hljs-string">&quot;bbbbbbbbbbb&quot;</span>);<br>map1.put(<span class="hljs-keyword">new</span> Emp(<span class="hljs-number">150</span>,<span class="hljs-string">&quot;ccc&quot;</span>,<span class="hljs-number">6000</span>),<span class="hljs-string">&quot;ccccccccccc&quot;</span>);<br>map1.put(<span class="hljs-keyword">new</span> Emp(<span class="hljs-number">50</span>,<span class="hljs-string">&quot;ddd&quot;</span>,<span class="hljs-number">5000</span>),<span class="hljs-string">&quot;ddddddddddd&quot;</span>);<br><span class="hljs-keyword">for</span> (Emp e:map1.keySet())&#123;<br>System.out.println(e+ <span class="hljs-string">&quot;---&quot;</span> + map1.get(e));<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Emp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Emp</span>&gt; </span>&#123;<br><span class="hljs-keyword">int</span> id;<br>String name;<br><span class="hljs-keyword">double</span> salary;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Emp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, <span class="hljs-keyword">double</span> salary)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.salary = salary;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Emp o)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.salary &gt; o.salary)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.salary &lt; o.salary)&#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.id &gt; o.id)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.id &lt; o.id)&#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br><span class="hljs-string">&quot;id=&quot;</span> + id +<br><span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br><span class="hljs-string">&quot;, salary=&quot;</span> + salary +<br><span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Comparable接口</span><br><span class="hljs-comment">//1：所有可以 “排序” 的类都实现了java.lang.Comparable接口，Comparable接口中只有一个方法。</span><br><span class="hljs-comment">//2：public int compareTo(Object obj) ;</span><br><span class="hljs-comment">//该方法：</span><br><span class="hljs-comment">//返回 0 表示 this == obj</span><br><span class="hljs-comment">//返回整数表示 this &gt; obj</span><br><span class="hljs-comment">//返回负数表示 this &lt; obj</span><br><span class="hljs-comment">//3:实现了 Comparable 接口的类通过实现 comparaTo 方法从而确定该类对象的排序方式。</span><br><br></code></pre></td></tr></table></figure></code></pre><h3 id="2-5-手动实现HashSet"><a href="#2-5-手动实现HashSet" class="headerlink" title="2.5 手动实现HashSet"></a>2.5 手动实现HashSet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java">  <br><span class="hljs-comment">// HashSet是采用哈希算法实现，底层实际是用HashMap实现的(HashSet本质就是一个简化版的HashMap)，因此，查询效率和增删效率都比较高</span><br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">//手写HashSet</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test28</span> </span>&#123;<br>HashMap map;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object PERSENT = <span class="hljs-keyword">new</span> Object();<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Test28</span><span class="hljs-params">()</span></span>&#123;<br>map = <span class="hljs-keyword">new</span> HashMap();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> map.size();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object o)</span></span>&#123;<br>map.put(o,PERSENT);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;[&quot;</span>);<br><span class="hljs-keyword">for</span>(Object key:map.keySet())&#123;<br>sb.append(key + <span class="hljs-string">&quot;,&quot;</span>);<br>&#125;<br>sb.setCharAt(sb.length() - <span class="hljs-number">1</span>,<span class="hljs-string">&#x27;]&#x27;</span>);<br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Test28 test = <span class="hljs-keyword">new</span> Test28();<br>test.add(<span class="hljs-string">&quot;aa&quot;</span>);<br>test.add(<span class="hljs-string">&quot;bb&quot;</span>);<br>test.add(<span class="hljs-string">&quot;cc&quot;</span>);<br>System.out.println(test);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-6-TreeSet基本使用"><a href="#2-6-TreeSet基本使用" class="headerlink" title="2.6 TreeSet基本使用"></a>2.6 TreeSet基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-comment">//测试TreeSet</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test29</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>TreeSet&lt;Integer&gt; set = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br>set.add(<span class="hljs-number">200</span>);<br>set.add(<span class="hljs-number">100</span>);<br>set.add(<span class="hljs-number">300</span>);<br><br><span class="hljs-comment">//按照元素递增的方式排序</span><br><span class="hljs-keyword">for</span>(Integer m:set)&#123;<br>System.out.println(m);<br>&#125;<br><br>TreeSet&lt;Emp2&gt; set1 = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br>set1.add(<span class="hljs-keyword">new</span> Emp2(<span class="hljs-number">100</span>,<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-number">5000</span>));<br>set1.add(<span class="hljs-keyword">new</span> Emp2(<span class="hljs-number">100</span>,<span class="hljs-string">&quot;bbb&quot;</span>,<span class="hljs-number">6000</span>));<br>set1.add(<span class="hljs-keyword">new</span> Emp2(<span class="hljs-number">100</span>,<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-number">3000</span>));<br><span class="hljs-keyword">for</span>(Emp2 m:set1)&#123;<br>System.out.println(m);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Emp2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Emp2</span>&gt; </span>&#123;<br><span class="hljs-keyword">int</span> id;<br>String name;<br><span class="hljs-keyword">double</span> salary;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Emp2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, <span class="hljs-keyword">double</span> salary)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.salary = salary;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Emp2 o)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.salary &gt; o.salary)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.salary &lt; o.salary)&#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.id &gt; o.id)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.id &lt; o.id)&#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br><span class="hljs-string">&quot;id=&quot;</span> + id +<br><span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br><span class="hljs-string">&quot;, salary=&quot;</span> + salary +<br><span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-7-Iterator常用集合遍历"><a href="#2-7-Iterator常用集合遍历" class="headerlink" title="2.7 Iterator常用集合遍历"></a>2.7 Iterator常用集合遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">//迭代器使用 Iterator</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test30</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br> testIteratorList();<br> testIteratorSet();<br> testIteratorMap();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIteratorList</span><span class="hljs-params">()</span></span>&#123;<br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;aa&quot;</span>);<br>list.add(<span class="hljs-string">&quot;bb&quot;</span>);<br>list.add(<span class="hljs-string">&quot;cc&quot;</span>);<br><br><br><span class="hljs-keyword">for</span>(Iterator&lt;String&gt; iter = list.iterator();iter.hasNext();)&#123;<br>String temp = iter.next();<br>System.out.println(temp);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIteratorSet</span><span class="hljs-params">()</span></span>&#123;<br>Set&lt;String&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>set.add(<span class="hljs-string">&quot;aa&quot;</span>);<br>set.add(<span class="hljs-string">&quot;bb&quot;</span>);<br>set.add(<span class="hljs-string">&quot;cc&quot;</span>);<br><br><br><span class="hljs-keyword">for</span>(Iterator&lt;String&gt; iter = set.iterator();iter.hasNext();)&#123;<br>String temp = iter.next();<br>System.out.println(temp);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIteratorMap</span><span class="hljs-params">()</span></span>&#123;<br>Map&lt;Integer,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>map.put(<span class="hljs-number">100</span>,<span class="hljs-string">&quot;aa&quot;</span>);<br>map.put(<span class="hljs-number">200</span>,<span class="hljs-string">&quot;bb&quot;</span>);<br>map.put(<span class="hljs-number">300</span>,<span class="hljs-string">&quot;cc&quot;</span>);<br><br><span class="hljs-comment">//第一种遍历方式</span><br>Set&lt;Map.Entry&lt;Integer,String&gt;&gt; enterSet = map.entrySet();<br><span class="hljs-keyword">for</span>(Iterator&lt;Map.Entry&lt;Integer,String&gt;&gt; iter = enterSet.iterator();iter.hasNext();)&#123;<br>Map.Entry&lt;Integer,String&gt; temp = iter.next();<br>System.out.println(temp.getKey() + <span class="hljs-string">&quot;---&quot;</span> + temp.getValue());<br>&#125;<br><br><span class="hljs-comment">//第二种遍历方式</span><br>Set&lt;Integer&gt; keys = map.keySet();<br><span class="hljs-keyword">for</span>(Iterator&lt;Integer&gt; iter = keys.iterator();iter.hasNext();)&#123;<br>Integer key = iter.next();<br>System.out.println(key + <span class="hljs-string">&quot;---&quot;</span> + map.get(key));<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-8-Collections基本使用"><a href="#2-8-Collections基本使用" class="headerlink" title="2.8 Collections基本使用"></a>2.8 Collections基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">  <br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//Collections辅助类的使用</span><br><span class="hljs-comment">//Collection是接口  Collections是辅助类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test31</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++)&#123;<br>list.add(<span class="hljs-string">&quot;haha:&quot;</span> + i);<br>&#125;<br>System.out.println(list);<br>Collections.shuffle(list); <span class="hljs-comment">//随机排列list中的元素</span><br>System.out.println(list);<br>Collections.reverse(list); <span class="hljs-comment">//逆序排列</span><br>System.out.println(list);<br>Collections.sort(list);<br>System.out.println(list);<br>System.out.println(Collections.binarySearch(list,<span class="hljs-string">&quot;haha:2&quot;</span>)); <span class="hljs-comment">//二分法查找</span><br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-网络编程总结"><a href="#3-网络编程总结" class="headerlink" title="3 网络编程总结"></a>3 网络编程总结</h2><h3 id="3-0-tcp基本使用"><a href="#3-0-tcp基本使用" class="headerlink" title="3.0 tcp基本使用"></a>3.0 tcp基本使用</h3><pre><code>1.创建客户端(client)</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> socket.tcp;<br><br><span class="hljs-keyword">import</span> java.io.DataOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 熟悉流程</span><br><span class="hljs-comment"> * 创建客户端</span><br><span class="hljs-comment"> * 1.建立连接,使用Socket创建客户端+服务的地址和端口</span><br><span class="hljs-comment"> * 2.操作:输入输出流操作</span><br><span class="hljs-comment"> * 3.释放资源</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//使用Socket创建客户端</span><br>Socket client = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">8888</span>);<br><span class="hljs-comment">//输入输出流操作</span><br>DataOutputStream dos = <span class="hljs-keyword">new</span> DataOutputStream(client.getOutputStream());<br>String str = <span class="hljs-string">&quot;haha&quot;</span>;<br>dos.writeUTF(str);<br>dos.flush();<br><span class="hljs-comment">//释放资源</span><br>dos.close();<br>client.close();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>   2.创建服务器(server)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> socket.tcp;<br><br><span class="hljs-keyword">import</span> java.io.DataInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 熟悉流程</span><br><span class="hljs-comment"> * 创建服务器</span><br><span class="hljs-comment"> * 1.指定端口 使用SeverSocket创建服务器</span><br><span class="hljs-comment"> * 2.阻塞式等待链接 accept</span><br><span class="hljs-comment"> * 3.操作:输入输出流操作</span><br><span class="hljs-comment"> * 4.释放资源</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Server</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//使用SeverSocket创建服务器</span><br>ServerSocket server = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">8888</span>);<br><span class="hljs-comment">//阻塞式等待链接 accept</span><br>Socket client = server.accept();<br><span class="hljs-comment">//操作:输入输出流操作</span><br>System.out.println(<span class="hljs-string">&quot;一个客户端连接了&quot;</span>);<br>DataInputStream dis = <span class="hljs-keyword">new</span> DataInputStream(client.getInputStream());<br>String s = dis.readUTF();<br>System.out.println(s);<br><span class="hljs-comment">//释放资源</span><br>dis.close();<br>client.close();<br>server.close();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-1-tcp实现简单的登录"><a href="#3-1-tcp实现简单的登录" class="headerlink" title="3.1 tcp实现简单的登录"></a>3.1 tcp实现简单的登录</h3><pre><code> 1.创建登录客户端(通过输入用户名密码实现简单的登录)</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> socket.tcp;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginClient</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;---Client---&quot;</span>);<br>BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>System.out.println(<span class="hljs-string">&quot;输入名字&quot;</span>);<br>String uname = br.readLine();<br>System.out.println(<span class="hljs-string">&quot;输入密码&quot;</span>);<br>String pass = br.readLine();<br><span class="hljs-comment">//使用Socket创建客户端</span><br>Socket client = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">8888</span>);<br><span class="hljs-comment">//输入输出流操作</span><br>DataOutputStream dos = <span class="hljs-keyword">new</span> DataOutputStream(client.getOutputStream());<br>dos.writeUTF(<span class="hljs-string">&quot;uname=&quot;</span> + uname + <span class="hljs-string">&quot;&amp;&quot;</span> + <span class="hljs-string">&quot;pass=&quot;</span> + pass);<br>dos.flush();<br><br>DataInputStream dis = <span class="hljs-keyword">new</span> DataInputStream(client.getInputStream());<br>String datas = dis.readUTF();<br>System.out.println(datas);<br><span class="hljs-comment">//释放资源</span><br>dis.close();<br>dos.close();<br>client.close();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>   2.创建服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> socket.tcp;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginClient</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;---Client---&quot;</span>);<br>BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>System.out.println(<span class="hljs-string">&quot;输入名字&quot;</span>);<br>String uname = br.readLine();<br>System.out.println(<span class="hljs-string">&quot;输入密码&quot;</span>);<br>String pass = br.readLine();<br><span class="hljs-comment">//使用Socket创建客户端</span><br>Socket client = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">8888</span>);<br><span class="hljs-comment">//输入输出流操作</span><br>DataOutputStream dos = <span class="hljs-keyword">new</span> DataOutputStream(client.getOutputStream());<br>dos.writeUTF(<span class="hljs-string">&quot;uname=&quot;</span> + uname + <span class="hljs-string">&quot;&amp;&quot;</span> + <span class="hljs-string">&quot;pass=&quot;</span> + pass);<br>dos.flush();<br><br>DataInputStream dis = <span class="hljs-keyword">new</span> DataInputStream(client.getInputStream());<br>String datas = dis.readUTF();<br>System.out.println(datas);<br><span class="hljs-comment">//释放资源</span><br>dis.close();<br>dos.close();<br>client.close();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-2-udp基本使用"><a href="#3-2-udp基本使用" class="headerlink" title="3.2 udp基本使用"></a>3.2 udp基本使用</h3><pre><code> 1.创建发送端</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> socket.udp;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送端</span><br><span class="hljs-comment"> * 1.使用DataGramSocket 指定端口 创建发送端</span><br><span class="hljs-comment"> * 2.准备数据一定转成字节数组</span><br><span class="hljs-comment"> * 3.封装成DataGramPacket 包裹 需要指定目的地</span><br><span class="hljs-comment"> * 4.发送包裹send(DataGramPacket p)</span><br><span class="hljs-comment"> * 5.释放资源</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UdpClient</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//指定端口 创建发送端</span><br>DatagramSocket client = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">8888</span>);<br><span class="hljs-comment">//成字节数组</span><br>String str = <span class="hljs-string">&quot;哈哈哈嘿嘿嘿&quot;</span>;<br><span class="hljs-keyword">byte</span>[] datas = str.getBytes();<br><span class="hljs-comment">//封装成DataGramPacke</span><br>DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(datas,<span class="hljs-number">0</span>,datas.length,<br><span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">9999</span>));<br><span class="hljs-comment">//发送包裹</span><br>client.send(packet);<br><span class="hljs-comment">//释放资源</span><br>client.close();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><pre><code>2.创建接收端</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> socket.udp;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 接收端</span><br><span class="hljs-comment"> * 1.使用DataGramSocket 指定端口 创建接收端</span><br><span class="hljs-comment"> * 2.准备容器 封装成DataGramPacket 包裹</span><br><span class="hljs-comment"> * 3.阻塞式接收包裹receive(DataGramPacket p)</span><br><span class="hljs-comment"> * 4.分析数据 byte[] getData() getLength()</span><br><span class="hljs-comment"> * 5.释放资源</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UdpServer</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//指定端口 创建接收端</span><br>DatagramSocket server = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">9999</span>);<br><span class="hljs-comment">//准备容器</span><br><span class="hljs-keyword">byte</span>[] container = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">60</span>];<br><span class="hljs-comment">//封装成DataGramPacket</span><br>DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(container,<span class="hljs-number">0</span>,container.length);<br><span class="hljs-comment">//阻塞式接收包裹</span><br>server.receive(packet);<br><span class="hljs-comment">//分析数据</span><br><span class="hljs-keyword">byte</span>[] data = packet.getData();<br>System.out.println(<span class="hljs-keyword">new</span> String(data,<span class="hljs-number">0</span>, data.length));<br><span class="hljs-comment">//释放</span><br>server.close();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-3-udp-命令框的传输"><a href="#3-3-udp-命令框的传输" class="headerlink" title="3.3 udp(命令框的传输)"></a>3.3 udp(命令框的传输)</h3><pre><code>1.指定端口 创建发送端</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> socket.udp;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UdpTalkClient</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//指定端口 创建发送端</span><br>DatagramSocket client = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">8888</span>);<br>BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>String data = br.readLine();<br><span class="hljs-keyword">byte</span>[] datas = data.getBytes();<br><span class="hljs-comment">//封装成DataGramPacke</span><br>DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(datas, <span class="hljs-number">0</span>, datas.length, <br>        <span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">9999</span>));<br><span class="hljs-comment">//发送包裹</span><br>client.send(packet);<br><span class="hljs-keyword">if</span>(data.equals(<span class="hljs-string">&quot;bye&quot;</span>))&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//释放资源</span><br>client.close();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><pre><code>2.指定端口 创建接收端</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> socket.udp;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UdpTalkServer</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//指定端口 创建接收端</span><br>DatagramSocket server = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">9999</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><span class="hljs-comment">//准备容器</span><br><span class="hljs-keyword">byte</span>[] container = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">60</span>];<br><span class="hljs-comment">//封装成DataGramPacket</span><br>DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(container, <span class="hljs-number">0</span>, container.length);<br><span class="hljs-comment">//阻塞式接收包裹</span><br>server.receive(packet);<br><span class="hljs-comment">//分析数据</span><br><span class="hljs-keyword">byte</span>[] datas = packet.getData();<br>String data = <span class="hljs-keyword">new</span> String(datas, <span class="hljs-number">0</span>, packet.getLength());<br>System.out.println(data);<br><span class="hljs-keyword">if</span>(data.equals(<span class="hljs-string">&quot;bye&quot;</span>))&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//释放</span><br>server.close();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-4-案例-模拟在线咨询"><a href="#3-4-案例-模拟在线咨询" class="headerlink" title="3.4 案例(模拟在线咨询)"></a>3.4 案例(模拟在线咨询)</h3><pre><code>1.创建学生端</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> socket.udp;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 加入多线程 实现双向交流 模拟在线咨询</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TalkStudent</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> TalkSend(<span class="hljs-number">7777</span>,<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">9999</span>)).start();<br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> TalkReceive(<span class="hljs-number">8888</span>,<span class="hljs-string">&quot;老师&quot;</span>)).start();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><pre><code>2.创建老师端</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> socket.udp;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TalkTeacher</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//实现接收</span><br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> TalkReceive(<span class="hljs-number">9999</span>,<span class="hljs-string">&quot;学生&quot;</span>)).start();<br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> TalkSend(<span class="hljs-number">5555</span>,<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">8888</span>)).start();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><pre><code>3.创建发送端</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> socket.udp;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-comment">//接收端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TalkSend</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><span class="hljs-keyword">private</span> DatagramSocket client;<br><span class="hljs-keyword">private</span> BufferedReader br;<br><span class="hljs-keyword">private</span> String toIP;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> toPort;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TalkSend</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port,String toIP,<span class="hljs-keyword">int</span> toPort)</span></span>&#123;<br><span class="hljs-keyword">this</span>.toIP = toIP;<br><span class="hljs-keyword">this</span>.toPort = toPort;<br><br><span class="hljs-keyword">try</span> &#123;<br>client = <span class="hljs-keyword">new</span> DatagramSocket(port);<br>br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>&#125; <span class="hljs-keyword">catch</span> (SocketException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br><span class="hljs-keyword">try</span> &#123;<br>String data = br.readLine();<br><span class="hljs-keyword">byte</span>[] datas = data.getBytes();<br><span class="hljs-comment">//封装成DataGramPacke</span><br>DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(datas, <span class="hljs-number">0</span>, datas.length, <br>       <span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-keyword">this</span>.toIP, <span class="hljs-keyword">this</span>.toPort));<br><span class="hljs-comment">//发送包裹</span><br>client.send(packet);<br><span class="hljs-keyword">if</span>(data.equals(<span class="hljs-string">&quot;bye&quot;</span>))&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br>&#125;<br>client.close();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>   4.创建接收端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> socket.udp;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-comment">//发送端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TalkReceive</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><span class="hljs-keyword">private</span> DatagramSocket server;<br><span class="hljs-keyword">private</span> String from;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TalkReceive</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port,String from)</span></span>&#123;<br><span class="hljs-keyword">this</span>.from = from;<br><span class="hljs-keyword">try</span> &#123;<br>server = <span class="hljs-keyword">new</span> DatagramSocket(port);<br>&#125; <span class="hljs-keyword">catch</span> (SocketException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><span class="hljs-comment">//准备容器</span><br><span class="hljs-keyword">byte</span>[] container = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">60</span>];<br><span class="hljs-comment">//封装成DataGramPacket</span><br>DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(container, <span class="hljs-number">0</span>, container.length);<br><span class="hljs-comment">//阻塞式接收包裹</span><br><span class="hljs-keyword">try</span> &#123;<br><br>server.receive(packet);<br><span class="hljs-comment">//分析数据</span><br><span class="hljs-keyword">byte</span>[] datas = packet.getData();<br><span class="hljs-keyword">int</span> len = packet.getLength();<br>String data = <span class="hljs-keyword">new</span> String(datas, <span class="hljs-number">0</span>, len);<br>System.out.println(from + <span class="hljs-string">&quot;:&quot;</span> + data);<br><span class="hljs-keyword">if</span>(data.equals(<span class="hljs-string">&quot;bye&quot;</span>))&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-5"><a href="#3-5" class="headerlink" title="3.5"></a>3.5</h3>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/04/25/hello-world/"/>
    <url>/2021/04/25/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
